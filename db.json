{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1529552204947},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1529552204947},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1529552204947},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1529552204947},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1529552204947},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1529552204947},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1529552204947},{"_id":"themes/hexo-theme-next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1529552204947},{"_id":"themes/hexo-theme-next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1529552204948},{"_id":"themes/hexo-theme-next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1529552204948},{"_id":"themes/hexo-theme-next/_config.yml","hash":"97afa3fb6cc561d7d7e11af8e734427aca27b5ac","modified":1529552204948},{"_id":"themes/hexo-theme-next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1529552204948},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1529552204948},{"_id":"themes/hexo-theme-next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1529552204966},{"_id":"source/_posts/coin.md","hash":"ac093154e5498ab853db4cd548238c9661b49548","modified":1530671120498},{"_id":"source/_posts/eth.md","hash":"78e6e3040a665f6de2ed4ee9769a5c0b79d510f4","modified":1533192898976},{"_id":"source/_posts/go_goroutine.md","hash":"8229d10c3c44bc8c089e025e67478be6dc318d83","modified":1530671149615},{"_id":"source/_posts/golang_base.md","hash":"4afa4f7f0bf613a8d2b6e35e211c8a02be6066d0","modified":1529552204944},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1529552204944},{"_id":"source/_posts/ipfs.md","hash":"dd5280ee5ca0c9b37aa9f047de7e6b9a73f9731b","modified":1532602406518},{"_id":"source/_posts/solidity_01.md","hash":"62c5dc40afbd914466655eabe0c59c7215f927fa","modified":1530671337996},{"_id":"source/about/index.md","hash":"be34062f2cb0754829cf21018a65118332b5b985","modified":1529552204945},{"_id":"source/categories/index.md","hash":"45377c7a31db51bfd4c59029c30f31e5764228d5","modified":1529552204945},{"_id":"source/tags/index.md","hash":"aba53ea9fc8d1e53b1af2d18e8789484a2e7f478","modified":1529552204945},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1529552204948},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1529552204949},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1529552204949},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1529552204949},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1529552204949},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1529552204949},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1529552204949},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1529552204949},{"_id":"themes/hexo-theme-next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1529552204949},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1529552204949},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1529552204950},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1529552204950},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1529552204950},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1529552204950},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1529552204950},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1529552204950},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1529552204952},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1529552204965},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1529552204965},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1529552204965},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1529552204965},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1529552204965},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1529552204965},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1529552204966},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1529552204966},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1529552204966},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1529552205041},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1529552205041},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1529552205041},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529552204987},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1529552204952},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1529552204952},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1529552204952},{"_id":"themes/hexo-theme-next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1529552204952},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1529552204953},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1529552204953},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1529552204953},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1529552204953},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1529552204953},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1529552204953},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1529552204953},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1529552204954},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1529552204954},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1529552204954},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1529552204954},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1529552204956},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1529552204956},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1529552204959},{"_id":"themes/hexo-theme-next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1529552204962},{"_id":"themes/hexo-theme-next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1529552204962},{"_id":"themes/hexo-theme-next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1529552204962},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1529552204962},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1529552204962},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1529552204962},{"_id":"themes/hexo-theme-next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1529552204962},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1529552204968},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1529552204968},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1529552204968},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1529552204968},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1529552204968},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1529552204968},{"_id":"themes/hexo-theme-next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1529552204969},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1529552204969},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1529552204969},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1529552204987},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1529552204988},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1529552204988},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1529552204988},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1529552204988},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1529552204988},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1529552204988},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1529552204989},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1529552204989},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1529552204989},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1529552204989},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1529552204989},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1529552204989},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529552204990},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1529552204990},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529552204990},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1529552204990},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1529552204990},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1529552204990},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529552204958},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529552204958},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529552204981},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529552204981},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529552204981},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529552204987},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529552204987},{"_id":"themes/hexo-theme-next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1529552204953},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1529552204954},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1529552204956},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1529552204956},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1529552204956},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1529552204956},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1529552204956},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1529552204956},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1529552204956},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1529552204957},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1529552204958},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1529552204959},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1529552204959},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1529552204959},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1529552204959},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1529552204959},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1529552204959},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1529552204960},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1529552204960},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1529552204960},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1529552204960},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1529552204960},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1529552204960},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1529552204960},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1529552204961},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1529552204961},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1529552204961},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1529552204961},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1529552204961},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1529552204961},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1529552204961},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1529552204961},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1529552204961},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1529552204962},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1529552204964},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1529552204964},{"_id":"themes/hexo-theme-next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1529552204965},{"_id":"themes/hexo-theme-next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1529552204965},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1529552204979},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1529552204981},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1529552204981},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1529552204981},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1529552204987},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1529552204987},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1529552204987},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1529552204987},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1529552204992},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1529552204992},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1529552204992},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1529552204992},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1529552204992},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1529552204992},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1529552204992},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1529552204993},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1529552204993},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1529552204993},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1529552204993},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1529552204999},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1529552205004},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1529552205004},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1532602332296},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1532602332296},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1529552205009},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1529552205009},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1529552205009},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1529552205009},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1529552205010},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1529552205010},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1529552205010},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1529552205010},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1529552205010},{"_id":"themes/hexo-theme-next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1529552205024},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1529552205026},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1529552205026},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1529552205026},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1529552205026},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1529552205026},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1529552205026},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1529552205028},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1529552205028},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1529552205029},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1529552205029},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1529552205029},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1529552205029},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1529552205029},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1529552205029},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1529552205029},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1529552205029},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1529552205030},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1529552205030},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1529552205030},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1529552205030},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1529552205030},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1529552205030},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1529552205030},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1529552205031},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1529552205031},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1529552205032},{"_id":"themes/hexo-theme-next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1529552205038},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1529552205038},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1529552205041},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1529552205041},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1529552205041},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1529552205025},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1529552204964},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1529552204964},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1529552204971},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1529552204971},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1529552204971},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1529552204971},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1529552204971},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1529552204973},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1529552204976},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1529552204978},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1529552204978},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1529552204979},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1529552204979},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1529552204979},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1529552204979},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1529552204979},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1529552204981},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1529552204982},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1529552204982},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1529552204982},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1529552204982},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1529552204982},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1529552204982},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1529552204982},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1529552204984},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1529552204984},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1529552204984},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1529552204984},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1529552204984},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1529552204986},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1529552204986},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1529552204986},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1529552204986},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1529552204986},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1529552204987},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1529552204993},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1529552204997},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1529552204998},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1529552204999},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1529552205005},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1529552205005},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1529552205005},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1529552205005},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1529552205005},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1529552205005},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1532602332306},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1532602332306},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1532602332307},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1529552205009},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1529552205010},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1529552205012},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1529552205012},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1529552205013},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1529552205038},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1529552205038},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1529552204998},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1529552205024},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1529552205024},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1529552205040},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1529552204971},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1529552204971},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1529552204971},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1529552204971},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1529552204972},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1529552204972},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1529552204972},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1529552204972},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1529552204972},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1529552204972},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1529552204972},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1529552204972},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1529552204973},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1529552204973},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1529552204973},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1529552204973},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1529552204973},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1529552204973},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1529552204973},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1529552204973},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1529552204974},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1529552204974},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1529552204974},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1529552204974},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1529552204974},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1529552204974},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1529552204974},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1529552204974},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1529552204975},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1529552204975},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1529552204975},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1529552204975},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1529552204975},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1529552204975},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1529552204975},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1529552204975},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1529552204975},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1529552204976},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1529552204976},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1529552204976},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1529552204976},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1529552204976},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1529552204976},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1529552204976},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1529552204976},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1529552204977},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1529552204977},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1529552204977},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1529552204977},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1529552204977},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1529552204977},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1529552204977},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1529552204978},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1529552204978},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1529552204978},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1529552204978},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1529552204978},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1529552204978},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1529552204984},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1529552204984},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1529552204984},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1529552204996},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1529552204996},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1529552204996},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1529552204996},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1529552204997},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1529552205007},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1532602332302},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1532602332304},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1532602332304},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1532602332305},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1532602332305},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1529552205014},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1529552205017},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1529552205023},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1529552205002},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1529552205036},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1529552205021},{"_id":"public/about/index.html","hash":"d454ff76865fff6b7b4c61fdc7750c0e067f6d7c","modified":1545732522119},{"_id":"public/categories/index.html","hash":"7eff579814905374d026f68adc17b9e8f6b5ad65","modified":1545732522969},{"_id":"public/tags/index.html","hash":"bb49242c131b15cd026bdc2c982809b98d766357","modified":1545732522972},{"_id":"public/archives/index.html","hash":"e6b4c8f735c2c952f78ff08a8e7233b1354ec330","modified":1545732522974},{"_id":"public/archives/2018/index.html","hash":"3811d6e03d3c4913865a16fdc36f97762ef315f3","modified":1545732522975},{"_id":"public/archives/2018/06/index.html","hash":"cf4aa0cccf46630a01c73fe9c90b8ed44ba8a154","modified":1545732522972},{"_id":"public/archives/2018/07/index.html","hash":"5241b8a039adf01c28f7ff7080de6d90b8c56889","modified":1545732522972},{"_id":"public/2018/07/04/go_goroutine/index.html","hash":"3b6452127ee3c0899be39a0b1229796a9111923b","modified":1545732522974},{"_id":"public/2018/07/04/eth/index.html","hash":"b3ddc57c1c540fe447390bd845146d5ace9d239c","modified":1531814298601},{"_id":"public/2018/07/04/coin/index.html","hash":"04322c78651a8b0607f2f7405747fd84d235c81e","modified":1545732522974},{"_id":"public/2018/07/04/solidity_01/index.html","hash":"2926fb6fdec01e0c1f18abd4da3898b5d722ba33","modified":1545732522974},{"_id":"public/index.html","hash":"04c0e7fc1d132ff6ca40644b0a24f0297cb42090","modified":1545732522974},{"_id":"public/2018/06/21/hello-world/index.html","hash":"e71aa77be105eae8707ba4127b372d02709b58e9","modified":1545732522972},{"_id":"public/2018/06/21/ipfs/index.html","hash":"1fdc2c899919843d9503870b4ec590d20a8abbf7","modified":1531814298604},{"_id":"public/2018/06/21/golang_base/index.html","hash":"79967f5b076540c535b22d6041d23754b773892e","modified":1536046751846},{"_id":"source/_posts/makefile.md","hash":"77ec2de5f2f64aa72294122f59babfaf9c1bbaab","modified":1539253597294},{"_id":"source/_posts/sodility_optimal.md","hash":"ef7d4bbf59a3bd969457cf18cf5b754abfa9ec3f","modified":1530874040000},{"_id":"source/_posts/solidity_inter_call.md","hash":"cdb6823796f8be41a98434e7d237de1384633efd","modified":1531814377774},{"_id":"source/_posts/solidity_library.md","hash":"07d47810ba61b0c0575aebe08b4395a379aab82f","modified":1530699316000},{"_id":"public/archives/page/2/index.html","hash":"e60b97df98f55024de941e9876aa115a945ccd9d","modified":1545732704332},{"_id":"public/archives/2018/page/2/index.html","hash":"24eb53db12f728146c58a73aba6fa89612dfc5be","modified":1545732704332},{"_id":"public/page/2/index.html","hash":"c2c2e36094f74d768de9cfd6b5e7ed3b9cc5b00d","modified":1545732704332},{"_id":"public/2018/07/17/solidity_inter_call/index.html","hash":"0034afc50d501968e279d2de59841f30b2da1e85","modified":1545732522974},{"_id":"public/2018/07/17/solidity_library/index.html","hash":"aa1a382ad4e0c02a697f0d0f3c47e61eeedffe03","modified":1545732522974},{"_id":"public/2018/07/17/sodility_optimal/index.html","hash":"c8b25d5117767fd228091624996a575fa28c5a74","modified":1545732522974},{"_id":"public/2018/07/17/makefile/index.html","hash":"ab25edd6886a913fba9416e550c8a8b7c4a9d1e4","modified":1536046751846},{"_id":"public/2018/07/26/ipfs/index.html","hash":"8b92829572137db43e869cca0dd602519a54e7da","modified":1545732522974},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1532602427952},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1532602427952},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1532602427952},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1532602427952},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1532602427952},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1532602427952},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1532602427952},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1532602427953},{"_id":"source/_posts/ceph_rbd_snap.md","hash":"0d4bfc7c09ed68e14101ef9af201aff28b2383a9","modified":1537514202237},{"_id":"source/_posts/ceph_pg.md","hash":"d22142d342f8f2abb10c16fed7278371f9c8560a","modified":1539241448506},{"_id":"source/_posts/ceph_messenger.md","hash":"e0c289b991dd7a53101978685ac0257dca5c64cd","modified":1534318809940},{"_id":"source/_posts/ERC20标准.md","hash":"7fee010636e6365027c86f59089b1a631debbac8","modified":1532663000011},{"_id":"source/_posts/ solidity_truffle.md","hash":"bab29e90052be07242af406608de28d7cb5dffde","modified":1536046976049},{"_id":"source/_posts/go_paxos.md","hash":"19aa6b8adc23060bda11c945b4939f10f3390499","modified":1536046884210},{"_id":"source/_posts/librbd.md","hash":"7ce3ea86db6ef1314b491cb2b2c011445b9b1e2b","modified":1544768808768},{"_id":"source/_posts/eth交易签名.md","hash":"1a96cd24d20772feedf7308dc99b75f02a579aa8","modified":1533811856846},{"_id":"source/_posts/golang reflect(反射机制).md","hash":"2dff6971b977d459938c76e0444cbab75408c659","modified":1536046927310},{"_id":"source/_posts/北京ceph集群解决方案.md","hash":"3e1091f8e17561b1c4fd9f91bbd8ec02261af2be","modified":1533881639277},{"_id":"source/_posts/snapshot.md","hash":"831b01af78edd3e2ed587e2d82a70f22ec004417","modified":1535458665967},{"_id":"public/2018/08/13/snapshot/index.html","hash":"64dcd73e3e89f8241f060ec402f872efb70b01fe","modified":1545732704332},{"_id":"public/2018/08/10/ceph_messenger/index.html","hash":"ac173ab65f694e78bff46128a4fc29dad023649f","modified":1545732522972},{"_id":"public/page/3/index.html","hash":"aed44772f9abe3f4f1f850c6dfecf85cb0fb9c71","modified":1545732522974},{"_id":"public/archives/page/3/index.html","hash":"fc46277d6a0d9f30beaa61a614cfb07d726c6ccc","modified":1545732522972},{"_id":"public/2018/08/20/ceph_rbd_snap/index.html","hash":"3ac861ff715a17b294a7f627adcbf49c5480432c","modified":1536047004961},{"_id":"public/2018/08/16/ceph_pg/index.html","hash":"b6bc207475330ea6be5aa0d94c345308054c5aca","modified":1536046751845},{"_id":"public/2018/08/15/librbd/index.html","hash":"adfd321791dedc630db710649c2d028418bf9799","modified":1536046751847},{"_id":"public/2018/08/08/北京ceph集群解决方案/index.html","hash":"0eb6bc42a6847665f102defefe8a57bb8d131231","modified":1534761967034},{"_id":"public/2018/08/07/go_paxos/index.html","hash":"5375580d6288beebfeec69de4e00e4fce2ece714","modified":1545732522974},{"_id":"public/2018/08/03/eth交易签名/index.html","hash":"eb39c39905048af2da7eb68e109fece8598b595d","modified":1545732522974},{"_id":"public/2018/08/02/golang reflect(反射机制)/index.html","hash":"8b319487e52a6e661afc55a9d909911ce1ff3e1a","modified":1536047004963},{"_id":"public/2018/08/02/ solidity_truffle/index.html","hash":"69df8c32efef6bba7d9936ceda94d78603e4975c","modified":1545732522974},{"_id":"public/2018/07/27/ERC20标准/index.html","hash":"ff3116d5bc8bef095e4876a3ee36e206859cf516","modified":1545732522974},{"_id":"public/2018/07/26/eth/index.html","hash":"24b9ba54a7e634807e3e45d7952544f769bbbeb9","modified":1545732522974},{"_id":"public/archives/2018/page/3/index.html","hash":"3cef49a1907203c1bb03f447382df2dc9d8aa341","modified":1545732522972},{"_id":"public/archives/2018/08/index.html","hash":"6e9621247fc57f38fd375b91a3fe0ef6a9ab105d","modified":1545732522973},{"_id":"source/_posts/cache_lru.md","hash":"a95b4c261859386ebd8ca05f2434acf283856fa3","modified":1536046784982},{"_id":"source/_posts/ssd_write_amplification.md","hash":"8dcb953fb55b4abe1337c6436607a7d2b1d61fb0","modified":1543398154633},{"_id":"public/2018/09/04/ssd_write_amplification/index.html","hash":"a4deef8422a32c1e9d366417f24b2fe0210813fe","modified":1536047004960},{"_id":"public/archives/2018/09/index.html","hash":"db09f779c837c0a24d561b9ba39323701d5241ee","modified":1545732704332},{"_id":"public/2018/09/04/cache_lru/index.html","hash":"8a121822d810f24b67835d1c92061d827149f2cc","modified":1536047004962},{"_id":"source/_posts/ceph_mon.md","hash":"5ffa32e34825cb73d25c695d9c6357776a921eec","modified":1545732476466},{"_id":"source/_posts/ceph_object_attr.md","hash":"438f41cfba23566cb8aa08e285a2424428d5454f","modified":1544516199942},{"_id":"source/_posts/ceph_log.md","hash":"f59bbc55a07ff837b420c392b1eb8ae8e4e2c851","modified":1545732691639},{"_id":"source/_posts/design.md","hash":"e8b2d187991c7a1b633599a23656d2ce58be0af8","modified":1542598200188},{"_id":"source/_posts/go_base.md","hash":"af6c6a9f82d80ede39c7c30511a16ff2c7e4c527","modified":1537514202260},{"_id":"source/_posts/c++11_base.md","hash":"4ef27de46270277bd2fc3becd97c54a0ccc5a78c","modified":1543978739333},{"_id":"source/_posts/go_cache_lru.md","hash":"a95b4c261859386ebd8ca05f2434acf283856fa3","modified":1537514202268},{"_id":"source/_posts/go_reflect(反射机制).md","hash":"2dff6971b977d459938c76e0444cbab75408c659","modified":1537514202284},{"_id":"source/_posts/rgw_put_object.md","hash":"dc4fe859abeadfa600e77b1abccedf3ae815c9c5","modified":1544516292286},{"_id":"public/2018/12/14/ceph_mon/index.html","hash":"ce4d375aa8b33410a84c3b781ac7bd3f91fe9079","modified":1545732522973},{"_id":"public/2018/09/21/ssd_write_amplification/index.html","hash":"b2df5f6b141deb3ca572587de66c43ac0ba96d4c","modified":1545732522979},{"_id":"public/2018/09/21/ceph_log/index.html","hash":"6fd2c47305718c05b35a95586e4f173c117ece18","modified":1545732704332},{"_id":"public/2018/11/30/rgw_put_object/index.html","hash":"f0cd08c0d332031922ed2d61c6d31b228fa09038","modified":1545732522979},{"_id":"public/archives/2018/10/index.html","hash":"f465b42d6dd61f5f9f35fe4f850538e45457ad4c","modified":1545732522979},{"_id":"public/archives/2018/11/index.html","hash":"695dc696efd76ff6b86f338205f92a5321804a0a","modified":1545732522979},{"_id":"public/archives/2018/12/index.html","hash":"34140205ea3955a882d0cc5620f9a3a46555455b","modified":1545732522979},{"_id":"public/2018/11/28/ceph_object_attr/index.html","hash":"ff377906c8fcc48d02ddb9db53380c11c9dd9b0d","modified":1545732522979},{"_id":"public/2018/11/09/design/index.html","hash":"0e0b76d2f320fe712c365bb5c3d779cc59843247","modified":1545732522979},{"_id":"public/2018/10/08/c++11_base/index.html","hash":"bf9b922d984f24929925fae9df92f8c341a64b69","modified":1545732522979},{"_id":"public/2018/09/21/makefile/index.html","hash":"af98fa07945aaca7b0a528475e295ca65f541642","modified":1545732522979},{"_id":"public/2018/09/21/librbd/index.html","hash":"6d7b2f9218eb3fcc022e144516fd7c3cc563468c","modified":1545732522980},{"_id":"public/2018/09/21/go_reflect(反射机制)/index.html","hash":"6fd9423ed2fc1dc9a52dad91b62de595834cd301","modified":1545732522980},{"_id":"public/2018/09/21/go_cache_lru/index.html","hash":"ecd1ce1665772040c38f6638eb119e5d3a2332bd","modified":1545732522980},{"_id":"public/2018/09/21/go_base/index.html","hash":"299e3d65e118abcee0323ea112829b7020fb1b80","modified":1545732522980},{"_id":"public/2018/09/21/ceph_rbd_snap/index.html","hash":"ad65dbd1ddfa881579580d2eb3705b32f31e080c","modified":1545732522980},{"_id":"public/2018/09/21/ceph_pg/index.html","hash":"6fcafad7bad6f276d021a28b0566ddec8b8e1ff9","modified":1545732704332}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-06-19T09:14:17.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-06-19 17:14:17\n---\n","updated":"2018-06-21T03:36:44.945Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjj6hwjn00001lihaqdm6xniu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-06-19T09:12:34.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-06-19 17:12:34\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-06-21T03:36:44.945Z","path":"categories/index.html","layout":"page","_id":"cjj6hwjnk0003lihat10s9zs8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-06-19T09:10:52.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-06-19 17:10:52\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-06-21T03:36:44.945Z","path":"tags/index.html","layout":"page","_id":"cjj6hwjo90005lihasidn74r3","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"基于ERC20发币合约","_content":"\n```solidity\npragma solidity ^0.4.16;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract TokenERC20 {\n    // Public variables of the token\n    string public name;     //名称\n    string public symbol;   //标记\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;  //总额\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance; //限额\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        // 供应量 10的18次方是从wei转换到ether\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     * 给其他地址设置限额\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address a9nd notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n}\n\n/******************************************/\n/*       ADVANCED TOKEN STARTS HERE       */\n/******************************************/\n\ncontract MyAdvancedToken is owned, TokenERC20 {\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function MyAdvancedToken(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n    /// @notice Create `mintedAmount` tokens and send it to `target` 挖矿\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        emit Transfer(0, this, mintedAmount); //代币总量需要无中生有地进行累加\n        emit Transfer(this, target, mintedAmount); // 合约帐户给矿工帐户进行发代币\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n    /// @param newSellPrice Price the users can sell to the contract\n    /// @param newBuyPrice Price users can buy from the contract\n    /// 从合约处买入的价钱设置；\n    /// 卖给合约帐户的价钱设置；\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    /// @notice Buy tokens from contract by sending ether\n    /// 代币帐户使用以太坊买入代币\n    /// - 通过payable关键字，请求自带的以太坊发给合约帐户；\n    /// - 给代币账号进行转账操作；\n    function buy() payable public {\n        uint amount = msg.value / buyPrice;               // calculates the amount\n        _transfer(this, msg.sender, amount);              // makes the transfers\n    }\n\n    /// @notice Sell `amount` tokens to contract\n    /// @param amount amount of tokens to be sold\n    /// 代币帐户将代币换成以太坊\n    function sell(uint256 amount) public {\n        address myAddress = this;\n        require(myAddress.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n        _transfer(msg.sender, this, amount);              // makes the transfers\n        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n    }\n}\n```\n","source":"_posts/coin.md","raw":"---\n title: 基于ERC20发币合约\n---\n\n```solidity\npragma solidity ^0.4.16;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract TokenERC20 {\n    // Public variables of the token\n    string public name;     //名称\n    string public symbol;   //标记\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;  //总额\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance; //限额\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        // 供应量 10的18次方是从wei转换到ether\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     * 给其他地址设置限额\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address a9nd notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n}\n\n/******************************************/\n/*       ADVANCED TOKEN STARTS HERE       */\n/******************************************/\n\ncontract MyAdvancedToken is owned, TokenERC20 {\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function MyAdvancedToken(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n    /// @notice Create `mintedAmount` tokens and send it to `target` 挖矿\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        emit Transfer(0, this, mintedAmount); //代币总量需要无中生有地进行累加\n        emit Transfer(this, target, mintedAmount); // 合约帐户给矿工帐户进行发代币\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n    /// @param newSellPrice Price the users can sell to the contract\n    /// @param newBuyPrice Price users can buy from the contract\n    /// 从合约处买入的价钱设置；\n    /// 卖给合约帐户的价钱设置；\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    /// @notice Buy tokens from contract by sending ether\n    /// 代币帐户使用以太坊买入代币\n    /// - 通过payable关键字，请求自带的以太坊发给合约帐户；\n    /// - 给代币账号进行转账操作；\n    function buy() payable public {\n        uint amount = msg.value / buyPrice;               // calculates the amount\n        _transfer(this, msg.sender, amount);              // makes the transfers\n    }\n\n    /// @notice Sell `amount` tokens to contract\n    /// @param amount amount of tokens to be sold\n    /// 代币帐户将代币换成以太坊\n    function sell(uint256 amount) public {\n        address myAddress = this;\n        require(myAddress.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n        _transfer(msg.sender, this, amount);              // makes the transfers\n        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n    }\n}\n```\n","slug":"coin","published":1,"date":"2018-07-04T02:25:20.498Z","updated":"2018-07-04T02:25:20.498Z","_id":"cjj6hwjmh0000lihaqcq6vnye","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.16;</span><br><span class=\"line\"></span><br><span class=\"line\">contract owned &#123;</span><br><span class=\"line\">    address public owner;</span><br><span class=\"line\"></span><br><span class=\"line\">    function owned() public &#123;</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    modifier onlyOwner &#123;</span><br><span class=\"line\">        require(msg.sender == owner);</span><br><span class=\"line\">        _;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function transferOwnership(address newOwner) onlyOwner public &#123;</span><br><span class=\"line\">        owner = newOwner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface tokenRecipient &#123; function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract TokenERC20 &#123;</span><br><span class=\"line\">    // Public variables of the token</span><br><span class=\"line\">    string public name;     //名称</span><br><span class=\"line\">    string public symbol;   //标记</span><br><span class=\"line\">    uint8 public decimals = 18;</span><br><span class=\"line\">    // 18 decimals is the strongly suggested default, avoid changing it</span><br><span class=\"line\">    uint256 public totalSupply;  //总额</span><br><span class=\"line\"></span><br><span class=\"line\">    // This creates an array with all balances</span><br><span class=\"line\">    mapping (address =&gt; uint256) public balanceOf;</span><br><span class=\"line\">    mapping (address =&gt; mapping (address =&gt; uint256)) public allowance; //限额</span><br><span class=\"line\"></span><br><span class=\"line\">    // This generates a public event on the blockchain that will notify clients</span><br><span class=\"line\">    event Transfer(address indexed from, address indexed to, uint256 value);</span><br><span class=\"line\"></span><br><span class=\"line\">    // This notifies clients about the amount burnt</span><br><span class=\"line\">    event Burn(address indexed from, uint256 value);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Constrctor function</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Initializes contract with initial supply tokens to the creator of the contract</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function TokenERC20(</span><br><span class=\"line\">        uint256 initialSupply,</span><br><span class=\"line\">        string tokenName,</span><br><span class=\"line\">        string tokenSymbol</span><br><span class=\"line\">    ) public &#123;</span><br><span class=\"line\">        // 供应量 10的18次方是从wei转换到ether</span><br><span class=\"line\">        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount</span><br><span class=\"line\">        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens</span><br><span class=\"line\">        name = tokenName;                                   // Set the name for display purposes</span><br><span class=\"line\">        symbol = tokenSymbol;                               // Set the symbol for display purposes</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Internal transfer, only can be called by this contract</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function _transfer(address _from, address _to, uint _value) internal &#123;</span><br><span class=\"line\">        // Prevent transfer to 0x0 address. Use burn() instead</span><br><span class=\"line\">        require(_to != 0x0);</span><br><span class=\"line\">        // Check if the sender has enough</span><br><span class=\"line\">        require(balanceOf[_from] &gt;= _value);</span><br><span class=\"line\">        // Check for overflows</span><br><span class=\"line\">        require(balanceOf[_to] + _value &gt; balanceOf[_to]);</span><br><span class=\"line\">        // Save this for an assertion in the future</span><br><span class=\"line\">        uint previousBalances = balanceOf[_from] + balanceOf[_to];</span><br><span class=\"line\">        // Subtract from the sender</span><br><span class=\"line\">        balanceOf[_from] -= _value;</span><br><span class=\"line\">        // Add the same to the recipient</span><br><span class=\"line\">        balanceOf[_to] += _value;</span><br><span class=\"line\">        emit Transfer(_from, _to, _value);</span><br><span class=\"line\">        // Asserts are used to use static analysis to find bugs in your code. They should never fail</span><br><span class=\"line\">        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Transfer tokens</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Send `_value` tokens to `_to` from your account</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _to The address of the recipient</span><br><span class=\"line\">     * @param _value the amount to send</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function transfer(address _to, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        _transfer(msg.sender, _to, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Transfer tokens from other address</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Send `_value` tokens to `_to` in behalf of `_from`</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _from The address of the sender</span><br><span class=\"line\">     * @param _to The address of the recipient</span><br><span class=\"line\">     * @param _value the amount to send</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(_value &lt;= allowance[_from][msg.sender]);     // Check allowance</span><br><span class=\"line\">        allowance[_from][msg.sender] -= _value;</span><br><span class=\"line\">        _transfer(_from, _to, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Set allowance for other address</span><br><span class=\"line\">     * 给其他地址设置限额</span><br><span class=\"line\">     * Allows `_spender` to spend no more than `_value` tokens in your behalf</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _spender The address authorized to spend</span><br><span class=\"line\">     * @param _value the max amount they can spend</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function approve(address _spender, uint256 _value) public</span><br><span class=\"line\">        returns (bool success) &#123;</span><br><span class=\"line\">        allowance[msg.sender][_spender] = _value;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Set allowance for other address a9nd notify</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _spender The address authorized to spend</span><br><span class=\"line\">     * @param _value the max amount they can spend</span><br><span class=\"line\">     * @param _extraData some extra information to send to the approved contract</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function approveAndCall(address _spender, uint256 _value, bytes _extraData)</span><br><span class=\"line\">        public</span><br><span class=\"line\">        returns (bool success) &#123;</span><br><span class=\"line\">        tokenRecipient spender = tokenRecipient(_spender);</span><br><span class=\"line\">        if (approve(_spender, _value)) &#123;</span><br><span class=\"line\">            spender.receiveApproval(msg.sender, _value, this, _extraData);</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Destroy tokens</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Remove `_value` tokens from the system irreversibly</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _value the amount of money to burn</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function burn(uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(balanceOf[msg.sender] &gt;= _value);   // Check if the sender has enough</span><br><span class=\"line\">        balanceOf[msg.sender] -= _value;            // Subtract from the sender</span><br><span class=\"line\">        totalSupply -= _value;                      // Updates totalSupply</span><br><span class=\"line\">        emit Burn(msg.sender, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Destroy tokens from other account</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _from the address of the sender</span><br><span class=\"line\">     * @param _value the amount of money to burn</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function burnFrom(address _from, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(balanceOf[_from] &gt;= _value);                // Check if the targeted balance is enough</span><br><span class=\"line\">        require(_value &lt;= allowance[_from][msg.sender]);    // Check allowance</span><br><span class=\"line\">        balanceOf[_from] -= _value;                         // Subtract from the targeted balance</span><br><span class=\"line\">        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&apos;s allowance</span><br><span class=\"line\">        totalSupply -= _value;                              // Update totalSupply</span><br><span class=\"line\">        emit Burn(_from, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/******************************************/</span><br><span class=\"line\">/*       ADVANCED TOKEN STARTS HERE       */</span><br><span class=\"line\">/******************************************/</span><br><span class=\"line\"></span><br><span class=\"line\">contract MyAdvancedToken is owned, TokenERC20 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    uint256 public sellPrice;</span><br><span class=\"line\">    uint256 public buyPrice;</span><br><span class=\"line\"></span><br><span class=\"line\">    mapping (address =&gt; bool) public frozenAccount;</span><br><span class=\"line\"></span><br><span class=\"line\">    /* This generates a public event on the blockchain that will notify clients */</span><br><span class=\"line\">    event FrozenFunds(address target, bool frozen);</span><br><span class=\"line\"></span><br><span class=\"line\">    /* Initializes contract with initial supply tokens to the creator of the contract */</span><br><span class=\"line\">    function MyAdvancedToken(</span><br><span class=\"line\">        uint256 initialSupply,</span><br><span class=\"line\">        string tokenName,</span><br><span class=\"line\">        string tokenSymbol</span><br><span class=\"line\">    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /* Internal transfer, only can be called by this contract */</span><br><span class=\"line\">    function _transfer(address _from, address _to, uint _value) internal &#123;</span><br><span class=\"line\">        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead</span><br><span class=\"line\">        require (balanceOf[_from] &gt;= _value);               // Check if the sender has enough</span><br><span class=\"line\">        require (balanceOf[_to] + _value &gt;= balanceOf[_to]); // Check for overflows</span><br><span class=\"line\">        require(!frozenAccount[_from]);                     // Check if sender is frozen</span><br><span class=\"line\">        require(!frozenAccount[_to]);                       // Check if recipient is frozen</span><br><span class=\"line\">        balanceOf[_from] -= _value;                         // Subtract from the sender</span><br><span class=\"line\">        balanceOf[_to] += _value;                           // Add the same to the recipient</span><br><span class=\"line\">        emit Transfer(_from, _to, _value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice Create `mintedAmount` tokens and send it to `target` 挖矿</span><br><span class=\"line\">    /// @param target Address to receive the tokens</span><br><span class=\"line\">    /// @param mintedAmount the amount of tokens it will receive</span><br><span class=\"line\">    function mintToken(address target, uint256 mintedAmount) onlyOwner public &#123;</span><br><span class=\"line\">        balanceOf[target] += mintedAmount;</span><br><span class=\"line\">        totalSupply += mintedAmount;</span><br><span class=\"line\">        emit Transfer(0, this, mintedAmount); //代币总量需要无中生有地进行累加</span><br><span class=\"line\">        emit Transfer(this, target, mintedAmount); // 合约帐户给矿工帐户进行发代币</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice `freeze? Prevent | Allow` `target` from sending &amp; receiving tokens</span><br><span class=\"line\">    /// @param target Address to be frozen</span><br><span class=\"line\">    /// @param freeze either to freeze it or not</span><br><span class=\"line\">    function freezeAccount(address target, bool freeze) onlyOwner public &#123;</span><br><span class=\"line\">        frozenAccount[target] = freeze;</span><br><span class=\"line\">        emit FrozenFunds(target, freeze);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth</span><br><span class=\"line\">    /// @param newSellPrice Price the users can sell to the contract</span><br><span class=\"line\">    /// @param newBuyPrice Price users can buy from the contract</span><br><span class=\"line\">    /// 从合约处买入的价钱设置；</span><br><span class=\"line\">    /// 卖给合约帐户的价钱设置；</span><br><span class=\"line\">    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public &#123;</span><br><span class=\"line\">        sellPrice = newSellPrice;</span><br><span class=\"line\">        buyPrice = newBuyPrice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice Buy tokens from contract by sending ether</span><br><span class=\"line\">    /// 代币帐户使用以太坊买入代币</span><br><span class=\"line\">    /// - 通过payable关键字，请求自带的以太坊发给合约帐户；</span><br><span class=\"line\">    /// - 给代币账号进行转账操作；</span><br><span class=\"line\">    function buy() payable public &#123;</span><br><span class=\"line\">        uint amount = msg.value / buyPrice;               // calculates the amount</span><br><span class=\"line\">        _transfer(this, msg.sender, amount);              // makes the transfers</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice Sell `amount` tokens to contract</span><br><span class=\"line\">    /// @param amount amount of tokens to be sold</span><br><span class=\"line\">    /// 代币帐户将代币换成以太坊</span><br><span class=\"line\">    function sell(uint256 amount) public &#123;</span><br><span class=\"line\">        address myAddress = this;</span><br><span class=\"line\">        require(myAddress.balance &gt;= amount * sellPrice);      // checks if the contract has enough ether to buy</span><br><span class=\"line\">        _transfer(msg.sender, this, amount);              // makes the transfers</span><br><span class=\"line\">        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It&apos;s important to do this last to avoid recursion attacks</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.16;</span><br><span class=\"line\"></span><br><span class=\"line\">contract owned &#123;</span><br><span class=\"line\">    address public owner;</span><br><span class=\"line\"></span><br><span class=\"line\">    function owned() public &#123;</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    modifier onlyOwner &#123;</span><br><span class=\"line\">        require(msg.sender == owner);</span><br><span class=\"line\">        _;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function transferOwnership(address newOwner) onlyOwner public &#123;</span><br><span class=\"line\">        owner = newOwner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface tokenRecipient &#123; function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract TokenERC20 &#123;</span><br><span class=\"line\">    // Public variables of the token</span><br><span class=\"line\">    string public name;     //名称</span><br><span class=\"line\">    string public symbol;   //标记</span><br><span class=\"line\">    uint8 public decimals = 18;</span><br><span class=\"line\">    // 18 decimals is the strongly suggested default, avoid changing it</span><br><span class=\"line\">    uint256 public totalSupply;  //总额</span><br><span class=\"line\"></span><br><span class=\"line\">    // This creates an array with all balances</span><br><span class=\"line\">    mapping (address =&gt; uint256) public balanceOf;</span><br><span class=\"line\">    mapping (address =&gt; mapping (address =&gt; uint256)) public allowance; //限额</span><br><span class=\"line\"></span><br><span class=\"line\">    // This generates a public event on the blockchain that will notify clients</span><br><span class=\"line\">    event Transfer(address indexed from, address indexed to, uint256 value);</span><br><span class=\"line\"></span><br><span class=\"line\">    // This notifies clients about the amount burnt</span><br><span class=\"line\">    event Burn(address indexed from, uint256 value);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Constrctor function</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Initializes contract with initial supply tokens to the creator of the contract</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function TokenERC20(</span><br><span class=\"line\">        uint256 initialSupply,</span><br><span class=\"line\">        string tokenName,</span><br><span class=\"line\">        string tokenSymbol</span><br><span class=\"line\">    ) public &#123;</span><br><span class=\"line\">        // 供应量 10的18次方是从wei转换到ether</span><br><span class=\"line\">        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount</span><br><span class=\"line\">        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens</span><br><span class=\"line\">        name = tokenName;                                   // Set the name for display purposes</span><br><span class=\"line\">        symbol = tokenSymbol;                               // Set the symbol for display purposes</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Internal transfer, only can be called by this contract</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function _transfer(address _from, address _to, uint _value) internal &#123;</span><br><span class=\"line\">        // Prevent transfer to 0x0 address. Use burn() instead</span><br><span class=\"line\">        require(_to != 0x0);</span><br><span class=\"line\">        // Check if the sender has enough</span><br><span class=\"line\">        require(balanceOf[_from] &gt;= _value);</span><br><span class=\"line\">        // Check for overflows</span><br><span class=\"line\">        require(balanceOf[_to] + _value &gt; balanceOf[_to]);</span><br><span class=\"line\">        // Save this for an assertion in the future</span><br><span class=\"line\">        uint previousBalances = balanceOf[_from] + balanceOf[_to];</span><br><span class=\"line\">        // Subtract from the sender</span><br><span class=\"line\">        balanceOf[_from] -= _value;</span><br><span class=\"line\">        // Add the same to the recipient</span><br><span class=\"line\">        balanceOf[_to] += _value;</span><br><span class=\"line\">        emit Transfer(_from, _to, _value);</span><br><span class=\"line\">        // Asserts are used to use static analysis to find bugs in your code. They should never fail</span><br><span class=\"line\">        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Transfer tokens</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Send `_value` tokens to `_to` from your account</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _to The address of the recipient</span><br><span class=\"line\">     * @param _value the amount to send</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function transfer(address _to, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        _transfer(msg.sender, _to, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Transfer tokens from other address</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Send `_value` tokens to `_to` in behalf of `_from`</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _from The address of the sender</span><br><span class=\"line\">     * @param _to The address of the recipient</span><br><span class=\"line\">     * @param _value the amount to send</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(_value &lt;= allowance[_from][msg.sender]);     // Check allowance</span><br><span class=\"line\">        allowance[_from][msg.sender] -= _value;</span><br><span class=\"line\">        _transfer(_from, _to, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Set allowance for other address</span><br><span class=\"line\">     * 给其他地址设置限额</span><br><span class=\"line\">     * Allows `_spender` to spend no more than `_value` tokens in your behalf</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _spender The address authorized to spend</span><br><span class=\"line\">     * @param _value the max amount they can spend</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function approve(address _spender, uint256 _value) public</span><br><span class=\"line\">        returns (bool success) &#123;</span><br><span class=\"line\">        allowance[msg.sender][_spender] = _value;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Set allowance for other address a9nd notify</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _spender The address authorized to spend</span><br><span class=\"line\">     * @param _value the max amount they can spend</span><br><span class=\"line\">     * @param _extraData some extra information to send to the approved contract</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function approveAndCall(address _spender, uint256 _value, bytes _extraData)</span><br><span class=\"line\">        public</span><br><span class=\"line\">        returns (bool success) &#123;</span><br><span class=\"line\">        tokenRecipient spender = tokenRecipient(_spender);</span><br><span class=\"line\">        if (approve(_spender, _value)) &#123;</span><br><span class=\"line\">            spender.receiveApproval(msg.sender, _value, this, _extraData);</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Destroy tokens</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Remove `_value` tokens from the system irreversibly</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _value the amount of money to burn</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function burn(uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(balanceOf[msg.sender] &gt;= _value);   // Check if the sender has enough</span><br><span class=\"line\">        balanceOf[msg.sender] -= _value;            // Subtract from the sender</span><br><span class=\"line\">        totalSupply -= _value;                      // Updates totalSupply</span><br><span class=\"line\">        emit Burn(msg.sender, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Destroy tokens from other account</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _from the address of the sender</span><br><span class=\"line\">     * @param _value the amount of money to burn</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function burnFrom(address _from, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(balanceOf[_from] &gt;= _value);                // Check if the targeted balance is enough</span><br><span class=\"line\">        require(_value &lt;= allowance[_from][msg.sender]);    // Check allowance</span><br><span class=\"line\">        balanceOf[_from] -= _value;                         // Subtract from the targeted balance</span><br><span class=\"line\">        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&apos;s allowance</span><br><span class=\"line\">        totalSupply -= _value;                              // Update totalSupply</span><br><span class=\"line\">        emit Burn(_from, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/******************************************/</span><br><span class=\"line\">/*       ADVANCED TOKEN STARTS HERE       */</span><br><span class=\"line\">/******************************************/</span><br><span class=\"line\"></span><br><span class=\"line\">contract MyAdvancedToken is owned, TokenERC20 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    uint256 public sellPrice;</span><br><span class=\"line\">    uint256 public buyPrice;</span><br><span class=\"line\"></span><br><span class=\"line\">    mapping (address =&gt; bool) public frozenAccount;</span><br><span class=\"line\"></span><br><span class=\"line\">    /* This generates a public event on the blockchain that will notify clients */</span><br><span class=\"line\">    event FrozenFunds(address target, bool frozen);</span><br><span class=\"line\"></span><br><span class=\"line\">    /* Initializes contract with initial supply tokens to the creator of the contract */</span><br><span class=\"line\">    function MyAdvancedToken(</span><br><span class=\"line\">        uint256 initialSupply,</span><br><span class=\"line\">        string tokenName,</span><br><span class=\"line\">        string tokenSymbol</span><br><span class=\"line\">    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /* Internal transfer, only can be called by this contract */</span><br><span class=\"line\">    function _transfer(address _from, address _to, uint _value) internal &#123;</span><br><span class=\"line\">        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead</span><br><span class=\"line\">        require (balanceOf[_from] &gt;= _value);               // Check if the sender has enough</span><br><span class=\"line\">        require (balanceOf[_to] + _value &gt;= balanceOf[_to]); // Check for overflows</span><br><span class=\"line\">        require(!frozenAccount[_from]);                     // Check if sender is frozen</span><br><span class=\"line\">        require(!frozenAccount[_to]);                       // Check if recipient is frozen</span><br><span class=\"line\">        balanceOf[_from] -= _value;                         // Subtract from the sender</span><br><span class=\"line\">        balanceOf[_to] += _value;                           // Add the same to the recipient</span><br><span class=\"line\">        emit Transfer(_from, _to, _value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice Create `mintedAmount` tokens and send it to `target` 挖矿</span><br><span class=\"line\">    /// @param target Address to receive the tokens</span><br><span class=\"line\">    /// @param mintedAmount the amount of tokens it will receive</span><br><span class=\"line\">    function mintToken(address target, uint256 mintedAmount) onlyOwner public &#123;</span><br><span class=\"line\">        balanceOf[target] += mintedAmount;</span><br><span class=\"line\">        totalSupply += mintedAmount;</span><br><span class=\"line\">        emit Transfer(0, this, mintedAmount); //代币总量需要无中生有地进行累加</span><br><span class=\"line\">        emit Transfer(this, target, mintedAmount); // 合约帐户给矿工帐户进行发代币</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice `freeze? Prevent | Allow` `target` from sending &amp; receiving tokens</span><br><span class=\"line\">    /// @param target Address to be frozen</span><br><span class=\"line\">    /// @param freeze either to freeze it or not</span><br><span class=\"line\">    function freezeAccount(address target, bool freeze) onlyOwner public &#123;</span><br><span class=\"line\">        frozenAccount[target] = freeze;</span><br><span class=\"line\">        emit FrozenFunds(target, freeze);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth</span><br><span class=\"line\">    /// @param newSellPrice Price the users can sell to the contract</span><br><span class=\"line\">    /// @param newBuyPrice Price users can buy from the contract</span><br><span class=\"line\">    /// 从合约处买入的价钱设置；</span><br><span class=\"line\">    /// 卖给合约帐户的价钱设置；</span><br><span class=\"line\">    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public &#123;</span><br><span class=\"line\">        sellPrice = newSellPrice;</span><br><span class=\"line\">        buyPrice = newBuyPrice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice Buy tokens from contract by sending ether</span><br><span class=\"line\">    /// 代币帐户使用以太坊买入代币</span><br><span class=\"line\">    /// - 通过payable关键字，请求自带的以太坊发给合约帐户；</span><br><span class=\"line\">    /// - 给代币账号进行转账操作；</span><br><span class=\"line\">    function buy() payable public &#123;</span><br><span class=\"line\">        uint amount = msg.value / buyPrice;               // calculates the amount</span><br><span class=\"line\">        _transfer(this, msg.sender, amount);              // makes the transfers</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice Sell `amount` tokens to contract</span><br><span class=\"line\">    /// @param amount amount of tokens to be sold</span><br><span class=\"line\">    /// 代币帐户将代币换成以太坊</span><br><span class=\"line\">    function sell(uint256 amount) public &#123;</span><br><span class=\"line\">        address myAddress = this;</span><br><span class=\"line\">        require(myAddress.balance &gt;= amount * sellPrice);      // checks if the contract has enough ether to buy</span><br><span class=\"line\">        _transfer(msg.sender, this, amount);              // makes the transfers</span><br><span class=\"line\">        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It&apos;s important to do this last to avoid recursion attacks</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"部署以太坊私链：","_content":"帐号准备：\n​ 部署合约需要外部帐户，进入交互界面；\n```javascript\n> eth.accounts  //分配给开发者的帐户\n[\"0x7b30423838ac0bccccfcbb9d9b494b834a76f847\"]\n```\n\n创建新帐户\n```javascript\n> personal.newAccount(\"test\")\n\"0xa7287e272e3814f59025ece844665e6a30e4d296\"\n```\n\n查看帐户列表\n```\n> personal.listAccounts\n[\"0x7b30423838ac0bccccfcbb9d9b494b834a76f847\", \"0xa7287e272e3814f59025ece844665e6a30e4d296\"]\n```\n\n查看帐号余额\t\t\t//新建的帐户此时余额为0\n```\n> eth.getBalance(\"0xa7287e272e3814f59025ece844665e6a30e4d296\")\n0\n```\n\n转账\t\t\t\t// 没有余额的帐户无法部署合约，从默认帐户转账给新帐户\n```\n> eth.sendTransaction({from:eth.accounts[0], to: eth.accounts[2], value: web3.toWei(1, \"ether\")})\n\"0x5f2c80f25b83b3b5b04f89cee37b8a4fe3950f8f66e81f8169c4719a0f37e584\"\n```\n\n### 部署合约\n1、解锁帐户 \t\t\t//只有解锁帐户之后，才能进行合约的部署；\n```javascript\n> personal.unlockAccount(eth.accounts[2], \"test\")\ntrue\n```\n2、编写合约\n3、部署合约 \t\t//https://ethereum.github.io/browser-solidity/\n4、部署合约之后查看余额\n> ```\n> eth.getBalance(eth.accounts[2])\n> 999999999999603541\n> ```\n\n5、运行合约：\n\n> ```\n> > hello\n> {\n> abi: [{\n>     constant: true,\n>     inputs: [],\n>     name: \"say\",\n>     outputs: [{...}],\n>     payable: false,\n>     stateMutability: \"view\",\n>     type: \"function\"\n> }, {\n>     inputs: [{...}],\n>     payable: false,\n>     stateMutability: \"nonpayable\",\n>     type: \"constructor\"\n> }],\n> address: \"0xd81c0b77218fda9037ae5df48f6e75a6b3e6ffd0\",\n> transactionHash: \"0x1cc62a197d92a2ab848e55deaae9c1fe5c19be18c3b17c33b00fc6173e1c52a4\",\n> allEvents: function(),\n> say: function()\n> }\n> > hello.say()\n> \"Hello World\"\n> ```\n\nQ&A:\n- 在节点1上创建的帐户，在节点2上是没有办法看到的；\n  在节点1上创建的帐户，保存出该帐户的密钥文件，需要将密钥文件导入到节点2中，才能在节点2上操作该帐户；\n","source":"_posts/eth.md","raw":"---\n title: 部署以太坊私链：\n---\n帐号准备：\n​ 部署合约需要外部帐户，进入交互界面；\n```javascript\n> eth.accounts  //分配给开发者的帐户\n[\"0x7b30423838ac0bccccfcbb9d9b494b834a76f847\"]\n```\n\n创建新帐户\n```javascript\n> personal.newAccount(\"test\")\n\"0xa7287e272e3814f59025ece844665e6a30e4d296\"\n```\n\n查看帐户列表\n```\n> personal.listAccounts\n[\"0x7b30423838ac0bccccfcbb9d9b494b834a76f847\", \"0xa7287e272e3814f59025ece844665e6a30e4d296\"]\n```\n\n查看帐号余额\t\t\t//新建的帐户此时余额为0\n```\n> eth.getBalance(\"0xa7287e272e3814f59025ece844665e6a30e4d296\")\n0\n```\n\n转账\t\t\t\t// 没有余额的帐户无法部署合约，从默认帐户转账给新帐户\n```\n> eth.sendTransaction({from:eth.accounts[0], to: eth.accounts[2], value: web3.toWei(1, \"ether\")})\n\"0x5f2c80f25b83b3b5b04f89cee37b8a4fe3950f8f66e81f8169c4719a0f37e584\"\n```\n\n### 部署合约\n1、解锁帐户 \t\t\t//只有解锁帐户之后，才能进行合约的部署；\n```javascript\n> personal.unlockAccount(eth.accounts[2], \"test\")\ntrue\n```\n2、编写合约\n3、部署合约 \t\t//https://ethereum.github.io/browser-solidity/\n4、部署合约之后查看余额\n> ```\n> eth.getBalance(eth.accounts[2])\n> 999999999999603541\n> ```\n\n5、运行合约：\n\n> ```\n> > hello\n> {\n> abi: [{\n>     constant: true,\n>     inputs: [],\n>     name: \"say\",\n>     outputs: [{...}],\n>     payable: false,\n>     stateMutability: \"view\",\n>     type: \"function\"\n> }, {\n>     inputs: [{...}],\n>     payable: false,\n>     stateMutability: \"nonpayable\",\n>     type: \"constructor\"\n> }],\n> address: \"0xd81c0b77218fda9037ae5df48f6e75a6b3e6ffd0\",\n> transactionHash: \"0x1cc62a197d92a2ab848e55deaae9c1fe5c19be18c3b17c33b00fc6173e1c52a4\",\n> allEvents: function(),\n> say: function()\n> }\n> > hello.say()\n> \"Hello World\"\n> ```\n\nQ&A:\n- 在节点1上创建的帐户，在节点2上是没有办法看到的；\n  在节点1上创建的帐户，保存出该帐户的密钥文件，需要将密钥文件导入到节点2中，才能在节点2上操作该帐户；\n","slug":"eth","published":1,"date":"2018-07-26T10:58:34.635Z","updated":"2018-08-02T06:54:58.976Z","_id":"cjj6hwjna0002lihadokoe7qr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>帐号准备：<br>​ 部署合约需要外部帐户，进入交互界面；<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.accounts  <span class=\"comment\">//分配给开发者的帐户</span></span><br><span class=\"line\">[<span class=\"string\">\"0x7b30423838ac0bccccfcbb9d9b494b834a76f847\"</span>]</span><br></pre></td></tr></table></figure></p>\n<p>创建新帐户<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.newAccount(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\"><span class=\"string\">\"0xa7287e272e3814f59025ece844665e6a30e4d296\"</span></span><br></pre></td></tr></table></figure></p>\n<p>查看帐户列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.listAccounts</span><br><span class=\"line\">[&quot;0x7b30423838ac0bccccfcbb9d9b494b834a76f847&quot;, &quot;0xa7287e272e3814f59025ece844665e6a30e4d296&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>查看帐号余额            //新建的帐户此时余额为0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(&quot;0xa7287e272e3814f59025ece844665e6a30e4d296&quot;)</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure></p>\n<p>转账                // 没有余额的帐户无法部署合约，从默认帐户转账给新帐户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.sendTransaction(&#123;from:eth.accounts[0], to: eth.accounts[2], value: web3.toWei(1, &quot;ether&quot;)&#125;)</span><br><span class=\"line\">&quot;0x5f2c80f25b83b3b5b04f89cee37b8a4fe3950f8f66e81f8169c4719a0f37e584&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"部署合约\"><a href=\"#部署合约\" class=\"headerlink\" title=\"部署合约\"></a>部署合约</h3><p>1、解锁帐户             //只有解锁帐户之后，才能进行合约的部署；<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.unlockAccount(eth.accounts[<span class=\"number\">2</span>], <span class=\"string\">\"test\"</span>)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>2、编写合约<br>3、部署合约         //<a href=\"https://ethereum.github.io/browser-solidity/\" target=\"_blank\" rel=\"noopener\">https://ethereum.github.io/browser-solidity/</a><br>4、部署合约之后查看余额</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[2])</span><br><span class=\"line\">&gt; 999999999999603541</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>5、运行合约：</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; &gt; hello</span><br><span class=\"line\">&gt; &#123;</span><br><span class=\"line\">&gt; abi: [&#123;</span><br><span class=\"line\">&gt;     constant: true,</span><br><span class=\"line\">&gt;     inputs: [],</span><br><span class=\"line\">&gt;     name: &quot;say&quot;,</span><br><span class=\"line\">&gt;     outputs: [&#123;...&#125;],</span><br><span class=\"line\">&gt;     payable: false,</span><br><span class=\"line\">&gt;     stateMutability: &quot;view&quot;,</span><br><span class=\"line\">&gt;     type: &quot;function&quot;</span><br><span class=\"line\">&gt; &#125;, &#123;</span><br><span class=\"line\">&gt;     inputs: [&#123;...&#125;],</span><br><span class=\"line\">&gt;     payable: false,</span><br><span class=\"line\">&gt;     stateMutability: &quot;nonpayable&quot;,</span><br><span class=\"line\">&gt;     type: &quot;constructor&quot;</span><br><span class=\"line\">&gt; &#125;],</span><br><span class=\"line\">&gt; address: &quot;0xd81c0b77218fda9037ae5df48f6e75a6b3e6ffd0&quot;,</span><br><span class=\"line\">&gt; transactionHash: &quot;0x1cc62a197d92a2ab848e55deaae9c1fe5c19be18c3b17c33b00fc6173e1c52a4&quot;,</span><br><span class=\"line\">&gt; allEvents: function(),</span><br><span class=\"line\">&gt; say: function()</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt; &gt; hello.say()</span><br><span class=\"line\">&gt; &quot;Hello World&quot;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>Q&amp;A:</p>\n<ul>\n<li>在节点1上创建的帐户，在节点2上是没有办法看到的；<br>在节点1上创建的帐户，保存出该帐户的密钥文件，需要将密钥文件导入到节点2中，才能在节点2上操作该帐户；</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>帐号准备：<br>​ 部署合约需要外部帐户，进入交互界面；<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.accounts  <span class=\"comment\">//分配给开发者的帐户</span></span><br><span class=\"line\">[<span class=\"string\">\"0x7b30423838ac0bccccfcbb9d9b494b834a76f847\"</span>]</span><br></pre></td></tr></table></figure></p>\n<p>创建新帐户<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.newAccount(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\"><span class=\"string\">\"0xa7287e272e3814f59025ece844665e6a30e4d296\"</span></span><br></pre></td></tr></table></figure></p>\n<p>查看帐户列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.listAccounts</span><br><span class=\"line\">[&quot;0x7b30423838ac0bccccfcbb9d9b494b834a76f847&quot;, &quot;0xa7287e272e3814f59025ece844665e6a30e4d296&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>查看帐号余额            //新建的帐户此时余额为0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(&quot;0xa7287e272e3814f59025ece844665e6a30e4d296&quot;)</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure></p>\n<p>转账                // 没有余额的帐户无法部署合约，从默认帐户转账给新帐户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.sendTransaction(&#123;from:eth.accounts[0], to: eth.accounts[2], value: web3.toWei(1, &quot;ether&quot;)&#125;)</span><br><span class=\"line\">&quot;0x5f2c80f25b83b3b5b04f89cee37b8a4fe3950f8f66e81f8169c4719a0f37e584&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"部署合约\"><a href=\"#部署合约\" class=\"headerlink\" title=\"部署合约\"></a>部署合约</h3><p>1、解锁帐户             //只有解锁帐户之后，才能进行合约的部署；<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.unlockAccount(eth.accounts[<span class=\"number\">2</span>], <span class=\"string\">\"test\"</span>)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>2、编写合约<br>3、部署合约         //<a href=\"https://ethereum.github.io/browser-solidity/\" target=\"_blank\" rel=\"noopener\">https://ethereum.github.io/browser-solidity/</a><br>4、部署合约之后查看余额</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[2])</span><br><span class=\"line\">&gt; 999999999999603541</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>5、运行合约：</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; &gt; hello</span><br><span class=\"line\">&gt; &#123;</span><br><span class=\"line\">&gt; abi: [&#123;</span><br><span class=\"line\">&gt;     constant: true,</span><br><span class=\"line\">&gt;     inputs: [],</span><br><span class=\"line\">&gt;     name: &quot;say&quot;,</span><br><span class=\"line\">&gt;     outputs: [&#123;...&#125;],</span><br><span class=\"line\">&gt;     payable: false,</span><br><span class=\"line\">&gt;     stateMutability: &quot;view&quot;,</span><br><span class=\"line\">&gt;     type: &quot;function&quot;</span><br><span class=\"line\">&gt; &#125;, &#123;</span><br><span class=\"line\">&gt;     inputs: [&#123;...&#125;],</span><br><span class=\"line\">&gt;     payable: false,</span><br><span class=\"line\">&gt;     stateMutability: &quot;nonpayable&quot;,</span><br><span class=\"line\">&gt;     type: &quot;constructor&quot;</span><br><span class=\"line\">&gt; &#125;],</span><br><span class=\"line\">&gt; address: &quot;0xd81c0b77218fda9037ae5df48f6e75a6b3e6ffd0&quot;,</span><br><span class=\"line\">&gt; transactionHash: &quot;0x1cc62a197d92a2ab848e55deaae9c1fe5c19be18c3b17c33b00fc6173e1c52a4&quot;,</span><br><span class=\"line\">&gt; allEvents: function(),</span><br><span class=\"line\">&gt; say: function()</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt; &gt; hello.say()</span><br><span class=\"line\">&gt; &quot;Hello World&quot;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>Q&amp;A:</p>\n<ul>\n<li>在节点1上创建的帐户，在节点2上是没有办法看到的；<br>在节点1上创建的帐户，保存出该帐户的密钥文件，需要将密钥文件导入到节点2中，才能在节点2上操作该帐户；</li>\n</ul>\n"},{"title":"goroutine","_content":"\n### 协程\n协程（Coroutine）本质上是一种用户态线程，不需要操作系统来进行抢占式调度，且在真正的实现中寄存于线程中，因此，系统开销极小，可以有效提高线程的任务并发性，而避免多线程的缺点。使用协程的优点是编程简单，结构清晰；缺点是需要语言的支持，如果不支持，则需要用户在程序中自行实现调度器；目前，原生支持协程的语言还很少；\n\n### 并发通信\n- 两种最常用的并发通信模式：消息和共享数据\n```go\nvar ch map[string] chan bool\n```\n\n### 单向channel\n对channel的限制使用：<br/>\n一个channel变量传递到一个函数时，可以通过将其指定为单向channel变量，从而限制该函数中可以对此channel的操作，比如只能往这个channel写，或者只能从这个channel读。\n\n- 使用多核心CPU:\n```go\n  runtime.GOMAXPROCS(16)\n```\n- 出让时间片\n  使用runtime包中的Gosched()函数实现\n  实际上，需要精细地控制goroutine的行为，就必须深入地了解GO语言开发包中的runtime包所提供的具体功能；\n\n### go 网络编程\n- 标准库中的net包\n- 使用net.Dial()封装了socket(), bind(), listen(), connect(),accept(), receive(), send()函数；\n```go\nfunc handleMsg(conn net.Conn) ([]byte, error) {\n    defer conn.Close()\n\n    result := bytes.NewBuffer(nil)  //这里需要用循环buf来提高效率\n    var buf [512]byte\n    for {\n        size, err := conn.Read(buf[0:])\n        result.Write(buf[0:size])\n        if err != nil {\n            if err == io.EOF {\n                break\n            }\n            return nil, err\n        }\n    }\n    return result.Bytes(), nil\n}\n```\n\n### http\n- net/http包\n\n\n### 工程管理\n- 命名<br/>\n  驼峰命名命名法doSometing<br/>\n  c/c++则是下划线命名法\n- 目录结构\n```sh\n<calcproj>\n  ├─README\n  ├─AUTHORS\n  |─LICENSE\n  ├─<bin>\n    ├─calc\n  ├─<pkg>\n    └─<linux_amd64>\n      └─simplemath.a\n  ├─<src>\n    ├─<calc>\n      └─calc.go\n    ├─<simplemath>\n      ├─add.go\n      ├─add_test.go\n      ├─sqrt.go\n      ├─sqrt_test.go\n```\n","source":"_posts/go_goroutine.md","raw":"---\n    title: goroutine\n---\n\n### 协程\n协程（Coroutine）本质上是一种用户态线程，不需要操作系统来进行抢占式调度，且在真正的实现中寄存于线程中，因此，系统开销极小，可以有效提高线程的任务并发性，而避免多线程的缺点。使用协程的优点是编程简单，结构清晰；缺点是需要语言的支持，如果不支持，则需要用户在程序中自行实现调度器；目前，原生支持协程的语言还很少；\n\n### 并发通信\n- 两种最常用的并发通信模式：消息和共享数据\n```go\nvar ch map[string] chan bool\n```\n\n### 单向channel\n对channel的限制使用：<br/>\n一个channel变量传递到一个函数时，可以通过将其指定为单向channel变量，从而限制该函数中可以对此channel的操作，比如只能往这个channel写，或者只能从这个channel读。\n\n- 使用多核心CPU:\n```go\n  runtime.GOMAXPROCS(16)\n```\n- 出让时间片\n  使用runtime包中的Gosched()函数实现\n  实际上，需要精细地控制goroutine的行为，就必须深入地了解GO语言开发包中的runtime包所提供的具体功能；\n\n### go 网络编程\n- 标准库中的net包\n- 使用net.Dial()封装了socket(), bind(), listen(), connect(),accept(), receive(), send()函数；\n```go\nfunc handleMsg(conn net.Conn) ([]byte, error) {\n    defer conn.Close()\n\n    result := bytes.NewBuffer(nil)  //这里需要用循环buf来提高效率\n    var buf [512]byte\n    for {\n        size, err := conn.Read(buf[0:])\n        result.Write(buf[0:size])\n        if err != nil {\n            if err == io.EOF {\n                break\n            }\n            return nil, err\n        }\n    }\n    return result.Bytes(), nil\n}\n```\n\n### http\n- net/http包\n\n\n### 工程管理\n- 命名<br/>\n  驼峰命名命名法doSometing<br/>\n  c/c++则是下划线命名法\n- 目录结构\n```sh\n<calcproj>\n  ├─README\n  ├─AUTHORS\n  |─LICENSE\n  ├─<bin>\n    ├─calc\n  ├─<pkg>\n    └─<linux_amd64>\n      └─simplemath.a\n  ├─<src>\n    ├─<calc>\n      └─calc.go\n    ├─<simplemath>\n      ├─add.go\n      ├─add_test.go\n      ├─sqrt.go\n      ├─sqrt_test.go\n```\n","slug":"go_goroutine","published":1,"date":"2018-07-04T02:25:49.616Z","updated":"2018-07-04T02:25:49.615Z","_id":"cjj6hwjnv0004lihaonla0ilw","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h3><p>协程（Coroutine）本质上是一种用户态线程，不需要操作系统来进行抢占式调度，且在真正的实现中寄存于线程中，因此，系统开销极小，可以有效提高线程的任务并发性，而避免多线程的缺点。使用协程的优点是编程简单，结构清晰；缺点是需要语言的支持，如果不支持，则需要用户在程序中自行实现调度器；目前，原生支持协程的语言还很少；</p>\n<h3 id=\"并发通信\"><a href=\"#并发通信\" class=\"headerlink\" title=\"并发通信\"></a>并发通信</h3><ul>\n<li>两种最常用的并发通信模式：消息和共享数据<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ch <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>] <span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"单向channel\"><a href=\"#单向channel\" class=\"headerlink\" title=\"单向channel\"></a>单向channel</h3><p>对channel的限制使用：<br><br>一个channel变量传递到一个函数时，可以通过将其指定为单向channel变量，从而限制该函数中可以对此channel的操作，比如只能往这个channel写，或者只能从这个channel读。</p>\n<ul>\n<li><p>使用多核心CPU:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runtime.GOMAXPROCS(<span class=\"number\">16</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>出让时间片<br>使用runtime包中的Gosched()函数实现<br>实际上，需要精细地控制goroutine的行为，就必须深入地了解GO语言开发包中的runtime包所提供的具体功能；</p>\n</li>\n</ul>\n<h3 id=\"go-网络编程\"><a href=\"#go-网络编程\" class=\"headerlink\" title=\"go 网络编程\"></a>go 网络编程</h3><ul>\n<li>标准库中的net包</li>\n<li>使用net.Dial()封装了socket(), bind(), listen(), connect(),accept(), receive(), send()函数；<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleMsg</span><span class=\"params\">(conn net.Conn)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    result := bytes.NewBuffer(<span class=\"literal\">nil</span>)  <span class=\"comment\">//这里需要用循环buf来提高效率</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> buf [<span class=\"number\">512</span>]<span class=\"keyword\">byte</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        size, err := conn.Read(buf[<span class=\"number\">0</span>:])</span><br><span class=\"line\">        result.Write(buf[<span class=\"number\">0</span>:size])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> err == io.EOF &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.Bytes(), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h3><ul>\n<li>net/http包</li>\n</ul>\n<h3 id=\"工程管理\"><a href=\"#工程管理\" class=\"headerlink\" title=\"工程管理\"></a>工程管理</h3><ul>\n<li>命名<br><br>驼峰命名命名法doSometing<br><br>c/c++则是下划线命名法</li>\n<li>目录结构<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;calcproj&gt;</span><br><span class=\"line\">  ├─README</span><br><span class=\"line\">  ├─AUTHORS</span><br><span class=\"line\">  |─LICENSE</span><br><span class=\"line\">  ├─&lt;bin&gt;</span><br><span class=\"line\">    ├─calc</span><br><span class=\"line\">  ├─&lt;pkg&gt;</span><br><span class=\"line\">    └─&lt;linux_amd64&gt;</span><br><span class=\"line\">      └─simplemath.a</span><br><span class=\"line\">  ├─&lt;src&gt;</span><br><span class=\"line\">    ├─&lt;calc&gt;</span><br><span class=\"line\">      └─calc.go</span><br><span class=\"line\">    ├─&lt;simplemath&gt;</span><br><span class=\"line\">      ├─add.go</span><br><span class=\"line\">      ├─add_test.go</span><br><span class=\"line\">      ├─sqrt.go</span><br><span class=\"line\">      ├─sqrt_test.go</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h3><p>协程（Coroutine）本质上是一种用户态线程，不需要操作系统来进行抢占式调度，且在真正的实现中寄存于线程中，因此，系统开销极小，可以有效提高线程的任务并发性，而避免多线程的缺点。使用协程的优点是编程简单，结构清晰；缺点是需要语言的支持，如果不支持，则需要用户在程序中自行实现调度器；目前，原生支持协程的语言还很少；</p>\n<h3 id=\"并发通信\"><a href=\"#并发通信\" class=\"headerlink\" title=\"并发通信\"></a>并发通信</h3><ul>\n<li>两种最常用的并发通信模式：消息和共享数据<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ch <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>] <span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"单向channel\"><a href=\"#单向channel\" class=\"headerlink\" title=\"单向channel\"></a>单向channel</h3><p>对channel的限制使用：<br><br>一个channel变量传递到一个函数时，可以通过将其指定为单向channel变量，从而限制该函数中可以对此channel的操作，比如只能往这个channel写，或者只能从这个channel读。</p>\n<ul>\n<li><p>使用多核心CPU:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runtime.GOMAXPROCS(<span class=\"number\">16</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>出让时间片<br>使用runtime包中的Gosched()函数实现<br>实际上，需要精细地控制goroutine的行为，就必须深入地了解GO语言开发包中的runtime包所提供的具体功能；</p>\n</li>\n</ul>\n<h3 id=\"go-网络编程\"><a href=\"#go-网络编程\" class=\"headerlink\" title=\"go 网络编程\"></a>go 网络编程</h3><ul>\n<li>标准库中的net包</li>\n<li>使用net.Dial()封装了socket(), bind(), listen(), connect(),accept(), receive(), send()函数；<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleMsg</span><span class=\"params\">(conn net.Conn)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    result := bytes.NewBuffer(<span class=\"literal\">nil</span>)  <span class=\"comment\">//这里需要用循环buf来提高效率</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> buf [<span class=\"number\">512</span>]<span class=\"keyword\">byte</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        size, err := conn.Read(buf[<span class=\"number\">0</span>:])</span><br><span class=\"line\">        result.Write(buf[<span class=\"number\">0</span>:size])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> err == io.EOF &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.Bytes(), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h3><ul>\n<li>net/http包</li>\n</ul>\n<h3 id=\"工程管理\"><a href=\"#工程管理\" class=\"headerlink\" title=\"工程管理\"></a>工程管理</h3><ul>\n<li>命名<br><br>驼峰命名命名法doSometing<br><br>c/c++则是下划线命名法</li>\n<li>目录结构<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;calcproj&gt;</span><br><span class=\"line\">  ├─README</span><br><span class=\"line\">  ├─AUTHORS</span><br><span class=\"line\">  |─LICENSE</span><br><span class=\"line\">  ├─&lt;bin&gt;</span><br><span class=\"line\">    ├─calc</span><br><span class=\"line\">  ├─&lt;pkg&gt;</span><br><span class=\"line\">    └─&lt;linux_amd64&gt;</span><br><span class=\"line\">      └─simplemath.a</span><br><span class=\"line\">  ├─&lt;src&gt;</span><br><span class=\"line\">    ├─&lt;calc&gt;</span><br><span class=\"line\">      └─calc.go</span><br><span class=\"line\">    ├─&lt;simplemath&gt;</span><br><span class=\"line\">      ├─add.go</span><br><span class=\"line\">      ├─add_test.go</span><br><span class=\"line\">      ├─sqrt.go</span><br><span class=\"line\">      ├─sqrt_test.go</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-06-21T03:36:44.944Z","updated":"2018-06-21T03:36:44.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj6hwjp70007lihaytzoogyj","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"ipfs","_content":"\n### ipfs系统相关命令 (主要与ipfs在/root/.ipfs/的配置相关）\n\n- ipfs id\n- ipfs 跨域\n  - `ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"PUT\", \"GET\", \"POST\", \"OPTIONS\"]'`\n  - `ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"*\"]'`\n\n### 操作相关命令\n\n- ipfs add demo.file   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //upload file and the output is hash key\n- ipfs get {hash key}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //download file\n- ipfs add -r  {dir}   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //递归添加，输出包含文件和目录的hash key\n- ipfs get {dir hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //download dir and file\n- ipfs get {not exist hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //一直blocked\n- 目录操作\n  - ipfs files  mkdir  /demo         //只能是一级一级创建，不能多级创建\n  - ipfs files cp /ipfs/QmXXX   /demo/file.txt\n  - ipfs filess ls /    ;  ipfs files ls /demo\n  - ipfs files read /demo/file.txt\n\n#### 增加目录\n\n- ipfs add  -r demo\n\n\t\tadded QmZoApUnALi4oRJpGGZhgDi8cp3x65EA668nnJMrqEonPg demo/demo2.txt\n\tadded QmWMgtnYhbEuEVRvdejoD8bEuLy5JJisD19WrJYCqQiHeP demo/ipget\n\tadded QmefA8mR2ed2mTfaqtm7RbNAY2nMDpKkBUtKmg61kcq617 demo\n\n-  ipfs cat  QmefA8mR2ed2mTfaqtm7RbNAY2nMDpKkBUtKmg61kcq617/demo2.txt\n\n#### Pin （是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）\n\n&nbsp;&nbsp;IPFS的Pin是将文件长期保留在本地，不被垃圾回收；\n\n- ipfs pin ls  //查看哪些文件在本地是持久化的，通过 add 添加的文件默认就是 pin 过的\n\n### IPFS存储文件时，会经历以下几个步骤：\n\n-  把单个文件拆分成若干个256KB大小的块（ block，这个就可以理解成扇区 ）；\n- 逐块(block)计算block hash，hashn = hash ( blockn )；\n- 把所有的block hash拼凑成一个数组，再计算一次hash，便得到了文件最终的hash，hash ( file ) = hash ( hash1……n )，并将这个 hash（file） 和block hash数组“捆绑”起来，组成一个对象，把这个对象当做一个索引结构；\n- 把block、索引结构全部上传给IPFS节点，文件便同步到了IPFS网络了；\n-  把 Hash（file）打印出来，读的时候用；\n\n### 绑定节点\n\n- ipfs name publish {dir hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //将该目录与ipfs node id进行绑定\n\n### 绑定节点之后，可以通过ipns进行访问\n\n- ipfs cat /ipns/{ipfs node id}/demo.txt &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //demo.txt为dir下文件\n\n### DNS 解析\n\n&nbsp;&nbsp;IPFS 允许用户使用现有的域名系统，这样就能用一个好记的地址来访问文件；\n\n- ipfs cat /ipns/ipfs.b3log.org/hacpai/README.md\n\n只需要在DNS解析加入一条TXT记录即可：\n\nTXT\tipfs\tdnslink=/ipns/{ipfs node id}\n\n### 查看当前ipfs节点连接状态\n\n\tipfs swarm peers\n\n### 查看数据提供方 （这里需要深入研究）\n\n\tipfs dht findprovs <hash>\n\tipfs dht provide   <hash>\n\tipfs bitswap ledger <peer ID>  #对账单\n\n### 查找peer：\n\n\tipfs dht findpeer <node A peerID>\n\n### 手动连接特定节点:\n\n\tipfs swarm connect <multiaddr>\n\n\n### ipfs p2p listener ls\n\n\t[root@SJ-T1-Cloud172 .ipfs]# ipfs p2p listener ls\n\tError: libp2p stream mounting not enabled\n\t需要修改config中Libp2pStreamMounting\n\n### 删除local store file\n\n\tipfs pin rm <hash>\n\tipfs repo gc\n\n\n### 生成hash，但不上传\n\n\techo <data>  | ipfs add -n\n\tipfs add <file> -n\n\n### add分析：\n\n\tipfs add alargefile  //ensure this file is larger than 256k,otherwise has no sub-tree\n\tipfs ls thathash\n\n\tipfs@earth ~> ipfs ls qms2hjwx8qejwm4nmwu7ze6ndam2sfums3x6idwz5myzbn\n\tqmv8ndh7ageh9b24zngaextmuhj7aiuw3scc8hkczvjkww 7866189  //称为block\n\tqmuvjja4s4cgyqyppozttssquvgcv2n2v8mae3gnkrxmol 7866189\n\tqmrgjmlhlddhvxuieveuuwkeci4ygx8z7ujunikzpfzjuk 7866189\n\tqmrolalcquyo5vu5v8bvqmgjcpzow16wukq3s3vrll2tdk 7866189\n\tqmwk51jygpchgwr3srdnmhyerheqd22qw3vvyamb3emhuw 5244129\n\n### 查看block：\n\n\tipfs cat <block hash>  //output to screen\n\tipfs block stat <block hash> //查看block状态，大小等\n\n\tipfs refs <block hash> //打印该block的子块\n\t等价于\n\tipfs object links <block hash> 或 ipfs ls <block hash>\n\n### 查看ipfs对象底层结构：\n\n\tipfs object get <hash>\n\n\n### debug模式运行\n\n\tIPFS_LOGGING=debug ipfs daemon\n\t//eventlog output:\n\tipfs log tail\n\t//or\n\tcurl http://localhost:5001/logs\n\nipfs blog：\n\nhttps://forum.qtum.org/topic/87/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%98%9F%E9%99%85%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E7%BD%91%E7%BB%9C-ipfs-%E6%90%AD%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BE%E6%9C%8D%E5%8A%A1-%E4%B8%80\n\n## IPFS 内部\n\nIPLD（ InterPlanetary Linked Data） 主要用来定义数据， 给数据建模；定义了统一的数据模型IPLD ；\n\n    \"API\": \"/ip4/0.0.0.0/tcp/5001\",\n    \"Gateway\": \"/ip4/0.0.0.0/tcp/8080\"\n","source":"_posts/ipfs.md","raw":"---\ntitle: ipfs\n---\n\n### ipfs系统相关命令 (主要与ipfs在/root/.ipfs/的配置相关）\n\n- ipfs id\n- ipfs 跨域\n  - `ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"PUT\", \"GET\", \"POST\", \"OPTIONS\"]'`\n  - `ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"*\"]'`\n\n### 操作相关命令\n\n- ipfs add demo.file   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //upload file and the output is hash key\n- ipfs get {hash key}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //download file\n- ipfs add -r  {dir}   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //递归添加，输出包含文件和目录的hash key\n- ipfs get {dir hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //download dir and file\n- ipfs get {not exist hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //一直blocked\n- 目录操作\n  - ipfs files  mkdir  /demo         //只能是一级一级创建，不能多级创建\n  - ipfs files cp /ipfs/QmXXX   /demo/file.txt\n  - ipfs filess ls /    ;  ipfs files ls /demo\n  - ipfs files read /demo/file.txt\n\n#### 增加目录\n\n- ipfs add  -r demo\n\n\t\tadded QmZoApUnALi4oRJpGGZhgDi8cp3x65EA668nnJMrqEonPg demo/demo2.txt\n\tadded QmWMgtnYhbEuEVRvdejoD8bEuLy5JJisD19WrJYCqQiHeP demo/ipget\n\tadded QmefA8mR2ed2mTfaqtm7RbNAY2nMDpKkBUtKmg61kcq617 demo\n\n-  ipfs cat  QmefA8mR2ed2mTfaqtm7RbNAY2nMDpKkBUtKmg61kcq617/demo2.txt\n\n#### Pin （是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）\n\n&nbsp;&nbsp;IPFS的Pin是将文件长期保留在本地，不被垃圾回收；\n\n- ipfs pin ls  //查看哪些文件在本地是持久化的，通过 add 添加的文件默认就是 pin 过的\n\n### IPFS存储文件时，会经历以下几个步骤：\n\n-  把单个文件拆分成若干个256KB大小的块（ block，这个就可以理解成扇区 ）；\n- 逐块(block)计算block hash，hashn = hash ( blockn )；\n- 把所有的block hash拼凑成一个数组，再计算一次hash，便得到了文件最终的hash，hash ( file ) = hash ( hash1……n )，并将这个 hash（file） 和block hash数组“捆绑”起来，组成一个对象，把这个对象当做一个索引结构；\n- 把block、索引结构全部上传给IPFS节点，文件便同步到了IPFS网络了；\n-  把 Hash（file）打印出来，读的时候用；\n\n### 绑定节点\n\n- ipfs name publish {dir hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //将该目录与ipfs node id进行绑定\n\n### 绑定节点之后，可以通过ipns进行访问\n\n- ipfs cat /ipns/{ipfs node id}/demo.txt &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //demo.txt为dir下文件\n\n### DNS 解析\n\n&nbsp;&nbsp;IPFS 允许用户使用现有的域名系统，这样就能用一个好记的地址来访问文件；\n\n- ipfs cat /ipns/ipfs.b3log.org/hacpai/README.md\n\n只需要在DNS解析加入一条TXT记录即可：\n\nTXT\tipfs\tdnslink=/ipns/{ipfs node id}\n\n### 查看当前ipfs节点连接状态\n\n\tipfs swarm peers\n\n### 查看数据提供方 （这里需要深入研究）\n\n\tipfs dht findprovs <hash>\n\tipfs dht provide   <hash>\n\tipfs bitswap ledger <peer ID>  #对账单\n\n### 查找peer：\n\n\tipfs dht findpeer <node A peerID>\n\n### 手动连接特定节点:\n\n\tipfs swarm connect <multiaddr>\n\n\n### ipfs p2p listener ls\n\n\t[root@SJ-T1-Cloud172 .ipfs]# ipfs p2p listener ls\n\tError: libp2p stream mounting not enabled\n\t需要修改config中Libp2pStreamMounting\n\n### 删除local store file\n\n\tipfs pin rm <hash>\n\tipfs repo gc\n\n\n### 生成hash，但不上传\n\n\techo <data>  | ipfs add -n\n\tipfs add <file> -n\n\n### add分析：\n\n\tipfs add alargefile  //ensure this file is larger than 256k,otherwise has no sub-tree\n\tipfs ls thathash\n\n\tipfs@earth ~> ipfs ls qms2hjwx8qejwm4nmwu7ze6ndam2sfums3x6idwz5myzbn\n\tqmv8ndh7ageh9b24zngaextmuhj7aiuw3scc8hkczvjkww 7866189  //称为block\n\tqmuvjja4s4cgyqyppozttssquvgcv2n2v8mae3gnkrxmol 7866189\n\tqmrgjmlhlddhvxuieveuuwkeci4ygx8z7ujunikzpfzjuk 7866189\n\tqmrolalcquyo5vu5v8bvqmgjcpzow16wukq3s3vrll2tdk 7866189\n\tqmwk51jygpchgwr3srdnmhyerheqd22qw3vvyamb3emhuw 5244129\n\n### 查看block：\n\n\tipfs cat <block hash>  //output to screen\n\tipfs block stat <block hash> //查看block状态，大小等\n\n\tipfs refs <block hash> //打印该block的子块\n\t等价于\n\tipfs object links <block hash> 或 ipfs ls <block hash>\n\n### 查看ipfs对象底层结构：\n\n\tipfs object get <hash>\n\n\n### debug模式运行\n\n\tIPFS_LOGGING=debug ipfs daemon\n\t//eventlog output:\n\tipfs log tail\n\t//or\n\tcurl http://localhost:5001/logs\n\nipfs blog：\n\nhttps://forum.qtum.org/topic/87/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%98%9F%E9%99%85%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E7%BD%91%E7%BB%9C-ipfs-%E6%90%AD%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BE%E6%9C%8D%E5%8A%A1-%E4%B8%80\n\n## IPFS 内部\n\nIPLD（ InterPlanetary Linked Data） 主要用来定义数据， 给数据建模；定义了统一的数据模型IPLD ；\n\n    \"API\": \"/ip4/0.0.0.0/tcp/5001\",\n    \"Gateway\": \"/ip4/0.0.0.0/tcp/8080\"\n","slug":"ipfs","published":1,"date":"2018-07-26T10:52:11.479Z","updated":"2018-07-26T10:53:26.518Z","_id":"cjj6hwjph0008liha2p8y7o55","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"ipfs系统相关命令-主要与ipfs在-root-ipfs-的配置相关）\"><a href=\"#ipfs系统相关命令-主要与ipfs在-root-ipfs-的配置相关）\" class=\"headerlink\" title=\"ipfs系统相关命令 (主要与ipfs在/root/.ipfs/的配置相关）\"></a>ipfs系统相关命令 (主要与ipfs在/root/.ipfs/的配置相关）</h3><ul>\n<li>ipfs id</li>\n<li>ipfs 跨域<ul>\n<li><code>ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods &#39;[&quot;PUT&quot;, &quot;GET&quot;, &quot;POST&quot;, &quot;OPTIONS&quot;]&#39;</code></li>\n<li><code>ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin &#39;[&quot;*&quot;]&#39;</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"操作相关命令\"><a href=\"#操作相关命令\" class=\"headerlink\" title=\"操作相关命令\"></a>操作相关命令</h3><ul>\n<li>ipfs add demo.file   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //upload file and the output is hash key</li>\n<li>ipfs get {hash key}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //download file</li>\n<li>ipfs add -r  {dir}   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //递归添加，输出包含文件和目录的hash key</li>\n<li>ipfs get {dir hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //download dir and file</li>\n<li>ipfs get {not exist hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //一直blocked</li>\n<li>目录操作<ul>\n<li>ipfs files  mkdir  /demo         //只能是一级一级创建，不能多级创建</li>\n<li>ipfs files cp /ipfs/QmXXX   /demo/file.txt</li>\n<li>ipfs filess ls /    ;  ipfs files ls /demo</li>\n<li>ipfs files read /demo/file.txt</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"增加目录\"><a href=\"#增加目录\" class=\"headerlink\" title=\"增加目录\"></a>增加目录</h4><ul>\n<li><p>ipfs add  -r demo</p>\n<pre><code>added QmZoApUnALi4oRJpGGZhgDi8cp3x65EA668nnJMrqEonPg demo/demo2.txt\n</code></pre><p>  added QmWMgtnYhbEuEVRvdejoD8bEuLy5JJisD19WrJYCqQiHeP demo/ipget<br>  added QmefA8mR2ed2mTfaqtm7RbNAY2nMDpKkBUtKmg61kcq617 demo</p>\n</li>\n<li><p>ipfs cat  QmefA8mR2ed2mTfaqtm7RbNAY2nMDpKkBUtKmg61kcq617/demo2.txt</p>\n</li>\n</ul>\n<h4 id=\"Pin-（是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）\"><a href=\"#Pin-（是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）\" class=\"headerlink\" title=\"Pin （是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）\"></a>Pin （是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）</h4><p>&nbsp;&nbsp;IPFS的Pin是将文件长期保留在本地，不被垃圾回收；</p>\n<ul>\n<li>ipfs pin ls  //查看哪些文件在本地是持久化的，通过 add 添加的文件默认就是 pin 过的</li>\n</ul>\n<h3 id=\"IPFS存储文件时，会经历以下几个步骤：\"><a href=\"#IPFS存储文件时，会经历以下几个步骤：\" class=\"headerlink\" title=\"IPFS存储文件时，会经历以下几个步骤：\"></a>IPFS存储文件时，会经历以下几个步骤：</h3><ul>\n<li>把单个文件拆分成若干个256KB大小的块（ block，这个就可以理解成扇区 ）；</li>\n<li>逐块(block)计算block hash，hashn = hash ( blockn )；</li>\n<li>把所有的block hash拼凑成一个数组，再计算一次hash，便得到了文件最终的hash，hash ( file ) = hash ( hash1……n )，并将这个 hash（file） 和block hash数组“捆绑”起来，组成一个对象，把这个对象当做一个索引结构；</li>\n<li>把block、索引结构全部上传给IPFS节点，文件便同步到了IPFS网络了；</li>\n<li>把 Hash（file）打印出来，读的时候用；</li>\n</ul>\n<h3 id=\"绑定节点\"><a href=\"#绑定节点\" class=\"headerlink\" title=\"绑定节点\"></a>绑定节点</h3><ul>\n<li>ipfs name publish {dir hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //将该目录与ipfs node id进行绑定</li>\n</ul>\n<h3 id=\"绑定节点之后，可以通过ipns进行访问\"><a href=\"#绑定节点之后，可以通过ipns进行访问\" class=\"headerlink\" title=\"绑定节点之后，可以通过ipns进行访问\"></a>绑定节点之后，可以通过ipns进行访问</h3><ul>\n<li>ipfs cat /ipns/{ipfs node id}/demo.txt &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //demo.txt为dir下文件</li>\n</ul>\n<h3 id=\"DNS-解析\"><a href=\"#DNS-解析\" class=\"headerlink\" title=\"DNS 解析\"></a>DNS 解析</h3><p>&nbsp;&nbsp;IPFS 允许用户使用现有的域名系统，这样就能用一个好记的地址来访问文件；</p>\n<ul>\n<li>ipfs cat /ipns/ipfs.b3log.org/hacpai/README.md</li>\n</ul>\n<p>只需要在DNS解析加入一条TXT记录即可：</p>\n<p>TXT    ipfs    dnslink=/ipns/{ipfs node id}</p>\n<h3 id=\"查看当前ipfs节点连接状态\"><a href=\"#查看当前ipfs节点连接状态\" class=\"headerlink\" title=\"查看当前ipfs节点连接状态\"></a>查看当前ipfs节点连接状态</h3><pre><code>ipfs swarm peers\n</code></pre><h3 id=\"查看数据提供方-（这里需要深入研究）\"><a href=\"#查看数据提供方-（这里需要深入研究）\" class=\"headerlink\" title=\"查看数据提供方 （这里需要深入研究）\"></a>查看数据提供方 （这里需要深入研究）</h3><pre><code>ipfs dht findprovs &lt;hash&gt;\nipfs dht provide   &lt;hash&gt;\nipfs bitswap ledger &lt;peer ID&gt;  #对账单\n</code></pre><h3 id=\"查找peer：\"><a href=\"#查找peer：\" class=\"headerlink\" title=\"查找peer：\"></a>查找peer：</h3><pre><code>ipfs dht findpeer &lt;node A peerID&gt;\n</code></pre><h3 id=\"手动连接特定节点\"><a href=\"#手动连接特定节点\" class=\"headerlink\" title=\"手动连接特定节点:\"></a>手动连接特定节点:</h3><pre><code>ipfs swarm connect &lt;multiaddr&gt;\n</code></pre><h3 id=\"ipfs-p2p-listener-ls\"><a href=\"#ipfs-p2p-listener-ls\" class=\"headerlink\" title=\"ipfs p2p listener ls\"></a>ipfs p2p listener ls</h3><pre><code>[root@SJ-T1-Cloud172 .ipfs]# ipfs p2p listener ls\nError: libp2p stream mounting not enabled\n需要修改config中Libp2pStreamMounting\n</code></pre><h3 id=\"删除local-store-file\"><a href=\"#删除local-store-file\" class=\"headerlink\" title=\"删除local store file\"></a>删除local store file</h3><pre><code>ipfs pin rm &lt;hash&gt;\nipfs repo gc\n</code></pre><h3 id=\"生成hash，但不上传\"><a href=\"#生成hash，但不上传\" class=\"headerlink\" title=\"生成hash，但不上传\"></a>生成hash，但不上传</h3><pre><code>echo &lt;data&gt;  | ipfs add -n\nipfs add &lt;file&gt; -n\n</code></pre><h3 id=\"add分析：\"><a href=\"#add分析：\" class=\"headerlink\" title=\"add分析：\"></a>add分析：</h3><pre><code>ipfs add alargefile  //ensure this file is larger than 256k,otherwise has no sub-tree\nipfs ls thathash\n\nipfs@earth ~&gt; ipfs ls qms2hjwx8qejwm4nmwu7ze6ndam2sfums3x6idwz5myzbn\nqmv8ndh7ageh9b24zngaextmuhj7aiuw3scc8hkczvjkww 7866189  //称为block\nqmuvjja4s4cgyqyppozttssquvgcv2n2v8mae3gnkrxmol 7866189\nqmrgjmlhlddhvxuieveuuwkeci4ygx8z7ujunikzpfzjuk 7866189\nqmrolalcquyo5vu5v8bvqmgjcpzow16wukq3s3vrll2tdk 7866189\nqmwk51jygpchgwr3srdnmhyerheqd22qw3vvyamb3emhuw 5244129\n</code></pre><h3 id=\"查看block：\"><a href=\"#查看block：\" class=\"headerlink\" title=\"查看block：\"></a>查看block：</h3><pre><code>ipfs cat &lt;block hash&gt;  //output to screen\nipfs block stat &lt;block hash&gt; //查看block状态，大小等\n\nipfs refs &lt;block hash&gt; //打印该block的子块\n等价于\nipfs object links &lt;block hash&gt; 或 ipfs ls &lt;block hash&gt;\n</code></pre><h3 id=\"查看ipfs对象底层结构：\"><a href=\"#查看ipfs对象底层结构：\" class=\"headerlink\" title=\"查看ipfs对象底层结构：\"></a>查看ipfs对象底层结构：</h3><pre><code>ipfs object get &lt;hash&gt;\n</code></pre><h3 id=\"debug模式运行\"><a href=\"#debug模式运行\" class=\"headerlink\" title=\"debug模式运行\"></a>debug模式运行</h3><pre><code>IPFS_LOGGING=debug ipfs daemon\n//eventlog output:\nipfs log tail\n//or\ncurl http://localhost:5001/logs\n</code></pre><p>ipfs blog：</p>\n<p><a href=\"https://forum.qtum.org/topic/87/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%98%9F%E9%99%85%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E7%BD%91%E7%BB%9C-ipfs-%E6%90%AD%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BE%E6%9C%8D%E5%8A%A1-%E4%B8%80\" target=\"_blank\" rel=\"noopener\">https://forum.qtum.org/topic/87/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%98%9F%E9%99%85%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E7%BD%91%E7%BB%9C-ipfs-%E6%90%AD%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BE%E6%9C%8D%E5%8A%A1-%E4%B8%80</a></p>\n<h2 id=\"IPFS-内部\"><a href=\"#IPFS-内部\" class=\"headerlink\" title=\"IPFS 内部\"></a>IPFS 内部</h2><p>IPLD（ InterPlanetary Linked Data） 主要用来定义数据， 给数据建模；定义了统一的数据模型IPLD ；</p>\n<pre><code>&quot;API&quot;: &quot;/ip4/0.0.0.0/tcp/5001&quot;,\n&quot;Gateway&quot;: &quot;/ip4/0.0.0.0/tcp/8080&quot;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ipfs系统相关命令-主要与ipfs在-root-ipfs-的配置相关）\"><a href=\"#ipfs系统相关命令-主要与ipfs在-root-ipfs-的配置相关）\" class=\"headerlink\" title=\"ipfs系统相关命令 (主要与ipfs在/root/.ipfs/的配置相关）\"></a>ipfs系统相关命令 (主要与ipfs在/root/.ipfs/的配置相关）</h3><ul>\n<li>ipfs id</li>\n<li>ipfs 跨域<ul>\n<li><code>ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods &#39;[&quot;PUT&quot;, &quot;GET&quot;, &quot;POST&quot;, &quot;OPTIONS&quot;]&#39;</code></li>\n<li><code>ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin &#39;[&quot;*&quot;]&#39;</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"操作相关命令\"><a href=\"#操作相关命令\" class=\"headerlink\" title=\"操作相关命令\"></a>操作相关命令</h3><ul>\n<li>ipfs add demo.file   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //upload file and the output is hash key</li>\n<li>ipfs get {hash key}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //download file</li>\n<li>ipfs add -r  {dir}   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //递归添加，输出包含文件和目录的hash key</li>\n<li>ipfs get {dir hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //download dir and file</li>\n<li>ipfs get {not exist hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //一直blocked</li>\n<li>目录操作<ul>\n<li>ipfs files  mkdir  /demo         //只能是一级一级创建，不能多级创建</li>\n<li>ipfs files cp /ipfs/QmXXX   /demo/file.txt</li>\n<li>ipfs filess ls /    ;  ipfs files ls /demo</li>\n<li>ipfs files read /demo/file.txt</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"增加目录\"><a href=\"#增加目录\" class=\"headerlink\" title=\"增加目录\"></a>增加目录</h4><ul>\n<li><p>ipfs add  -r demo</p>\n<pre><code>added QmZoApUnALi4oRJpGGZhgDi8cp3x65EA668nnJMrqEonPg demo/demo2.txt\n</code></pre><p>  added QmWMgtnYhbEuEVRvdejoD8bEuLy5JJisD19WrJYCqQiHeP demo/ipget<br>  added QmefA8mR2ed2mTfaqtm7RbNAY2nMDpKkBUtKmg61kcq617 demo</p>\n</li>\n<li><p>ipfs cat  QmefA8mR2ed2mTfaqtm7RbNAY2nMDpKkBUtKmg61kcq617/demo2.txt</p>\n</li>\n</ul>\n<h4 id=\"Pin-（是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）\"><a href=\"#Pin-（是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）\" class=\"headerlink\" title=\"Pin （是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）\"></a>Pin （是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）</h4><p>&nbsp;&nbsp;IPFS的Pin是将文件长期保留在本地，不被垃圾回收；</p>\n<ul>\n<li>ipfs pin ls  //查看哪些文件在本地是持久化的，通过 add 添加的文件默认就是 pin 过的</li>\n</ul>\n<h3 id=\"IPFS存储文件时，会经历以下几个步骤：\"><a href=\"#IPFS存储文件时，会经历以下几个步骤：\" class=\"headerlink\" title=\"IPFS存储文件时，会经历以下几个步骤：\"></a>IPFS存储文件时，会经历以下几个步骤：</h3><ul>\n<li>把单个文件拆分成若干个256KB大小的块（ block，这个就可以理解成扇区 ）；</li>\n<li>逐块(block)计算block hash，hashn = hash ( blockn )；</li>\n<li>把所有的block hash拼凑成一个数组，再计算一次hash，便得到了文件最终的hash，hash ( file ) = hash ( hash1……n )，并将这个 hash（file） 和block hash数组“捆绑”起来，组成一个对象，把这个对象当做一个索引结构；</li>\n<li>把block、索引结构全部上传给IPFS节点，文件便同步到了IPFS网络了；</li>\n<li>把 Hash（file）打印出来，读的时候用；</li>\n</ul>\n<h3 id=\"绑定节点\"><a href=\"#绑定节点\" class=\"headerlink\" title=\"绑定节点\"></a>绑定节点</h3><ul>\n<li>ipfs name publish {dir hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //将该目录与ipfs node id进行绑定</li>\n</ul>\n<h3 id=\"绑定节点之后，可以通过ipns进行访问\"><a href=\"#绑定节点之后，可以通过ipns进行访问\" class=\"headerlink\" title=\"绑定节点之后，可以通过ipns进行访问\"></a>绑定节点之后，可以通过ipns进行访问</h3><ul>\n<li>ipfs cat /ipns/{ipfs node id}/demo.txt &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //demo.txt为dir下文件</li>\n</ul>\n<h3 id=\"DNS-解析\"><a href=\"#DNS-解析\" class=\"headerlink\" title=\"DNS 解析\"></a>DNS 解析</h3><p>&nbsp;&nbsp;IPFS 允许用户使用现有的域名系统，这样就能用一个好记的地址来访问文件；</p>\n<ul>\n<li>ipfs cat /ipns/ipfs.b3log.org/hacpai/README.md</li>\n</ul>\n<p>只需要在DNS解析加入一条TXT记录即可：</p>\n<p>TXT    ipfs    dnslink=/ipns/{ipfs node id}</p>\n<h3 id=\"查看当前ipfs节点连接状态\"><a href=\"#查看当前ipfs节点连接状态\" class=\"headerlink\" title=\"查看当前ipfs节点连接状态\"></a>查看当前ipfs节点连接状态</h3><pre><code>ipfs swarm peers\n</code></pre><h3 id=\"查看数据提供方-（这里需要深入研究）\"><a href=\"#查看数据提供方-（这里需要深入研究）\" class=\"headerlink\" title=\"查看数据提供方 （这里需要深入研究）\"></a>查看数据提供方 （这里需要深入研究）</h3><pre><code>ipfs dht findprovs &lt;hash&gt;\nipfs dht provide   &lt;hash&gt;\nipfs bitswap ledger &lt;peer ID&gt;  #对账单\n</code></pre><h3 id=\"查找peer：\"><a href=\"#查找peer：\" class=\"headerlink\" title=\"查找peer：\"></a>查找peer：</h3><pre><code>ipfs dht findpeer &lt;node A peerID&gt;\n</code></pre><h3 id=\"手动连接特定节点\"><a href=\"#手动连接特定节点\" class=\"headerlink\" title=\"手动连接特定节点:\"></a>手动连接特定节点:</h3><pre><code>ipfs swarm connect &lt;multiaddr&gt;\n</code></pre><h3 id=\"ipfs-p2p-listener-ls\"><a href=\"#ipfs-p2p-listener-ls\" class=\"headerlink\" title=\"ipfs p2p listener ls\"></a>ipfs p2p listener ls</h3><pre><code>[root@SJ-T1-Cloud172 .ipfs]# ipfs p2p listener ls\nError: libp2p stream mounting not enabled\n需要修改config中Libp2pStreamMounting\n</code></pre><h3 id=\"删除local-store-file\"><a href=\"#删除local-store-file\" class=\"headerlink\" title=\"删除local store file\"></a>删除local store file</h3><pre><code>ipfs pin rm &lt;hash&gt;\nipfs repo gc\n</code></pre><h3 id=\"生成hash，但不上传\"><a href=\"#生成hash，但不上传\" class=\"headerlink\" title=\"生成hash，但不上传\"></a>生成hash，但不上传</h3><pre><code>echo &lt;data&gt;  | ipfs add -n\nipfs add &lt;file&gt; -n\n</code></pre><h3 id=\"add分析：\"><a href=\"#add分析：\" class=\"headerlink\" title=\"add分析：\"></a>add分析：</h3><pre><code>ipfs add alargefile  //ensure this file is larger than 256k,otherwise has no sub-tree\nipfs ls thathash\n\nipfs@earth ~&gt; ipfs ls qms2hjwx8qejwm4nmwu7ze6ndam2sfums3x6idwz5myzbn\nqmv8ndh7ageh9b24zngaextmuhj7aiuw3scc8hkczvjkww 7866189  //称为block\nqmuvjja4s4cgyqyppozttssquvgcv2n2v8mae3gnkrxmol 7866189\nqmrgjmlhlddhvxuieveuuwkeci4ygx8z7ujunikzpfzjuk 7866189\nqmrolalcquyo5vu5v8bvqmgjcpzow16wukq3s3vrll2tdk 7866189\nqmwk51jygpchgwr3srdnmhyerheqd22qw3vvyamb3emhuw 5244129\n</code></pre><h3 id=\"查看block：\"><a href=\"#查看block：\" class=\"headerlink\" title=\"查看block：\"></a>查看block：</h3><pre><code>ipfs cat &lt;block hash&gt;  //output to screen\nipfs block stat &lt;block hash&gt; //查看block状态，大小等\n\nipfs refs &lt;block hash&gt; //打印该block的子块\n等价于\nipfs object links &lt;block hash&gt; 或 ipfs ls &lt;block hash&gt;\n</code></pre><h3 id=\"查看ipfs对象底层结构：\"><a href=\"#查看ipfs对象底层结构：\" class=\"headerlink\" title=\"查看ipfs对象底层结构：\"></a>查看ipfs对象底层结构：</h3><pre><code>ipfs object get &lt;hash&gt;\n</code></pre><h3 id=\"debug模式运行\"><a href=\"#debug模式运行\" class=\"headerlink\" title=\"debug模式运行\"></a>debug模式运行</h3><pre><code>IPFS_LOGGING=debug ipfs daemon\n//eventlog output:\nipfs log tail\n//or\ncurl http://localhost:5001/logs\n</code></pre><p>ipfs blog：</p>\n<p><a href=\"https://forum.qtum.org/topic/87/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%98%9F%E9%99%85%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E7%BD%91%E7%BB%9C-ipfs-%E6%90%AD%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BE%E6%9C%8D%E5%8A%A1-%E4%B8%80\" target=\"_blank\" rel=\"noopener\">https://forum.qtum.org/topic/87/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%98%9F%E9%99%85%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E7%BD%91%E7%BB%9C-ipfs-%E6%90%AD%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BE%E6%9C%8D%E5%8A%A1-%E4%B8%80</a></p>\n<h2 id=\"IPFS-内部\"><a href=\"#IPFS-内部\" class=\"headerlink\" title=\"IPFS 内部\"></a>IPFS 内部</h2><p>IPLD（ InterPlanetary Linked Data） 主要用来定义数据， 给数据建模；定义了统一的数据模型IPLD ；</p>\n<pre><code>&quot;API&quot;: &quot;/ip4/0.0.0.0/tcp/5001&quot;,\n&quot;Gateway&quot;: &quot;/ip4/0.0.0.0/tcp/8080&quot;\n</code></pre>"},{"title":"solidity入门之一","_content":"\n### 概述\nsolidity 编译的方式生产evm字节,广泛用于投票、众筹，封闭，拍卖，多重签名钱包等合约中；\n\n- 外部帐户地址是由公钥决定的;\n- 合约帐户：被存储在帐户中的代码控制，在创建合约时候确定的；（这个地址由合约创建者的地址和该地址发出过的交易数量计算得到，地址发出过的交易数量也被称作为\"nonce\"）\n\n合约帐户存储了合约代码，而外部帐户则没有\n\n### 合约的结构\n- 状态变量： 在合约存储器中永久存储的值；\n- 函数： 合约中可执行单元的代码；\n- 函数修饰符： 在声明的方式中补充函数的语义；\n- 事件： 和EVM日志设施的接口\n- 结构体：一组用户定义的变量\n- 枚举： 创建一个特定值的集合的类型；\n\n\n### 特殊的数据类型\n\n- int/uint：是有符号和无符号的整数；\n- int/uint: 分别是int256 和uint256 的别名；\n\n- 地址address：\n\n  1、地址属性：balance 和 发送（send）<br/>\n  若查询到有资产余额的地址，然后发送 Ether（以wei为单位）到send函数的地址上\n```solidity\n  address x = 0x123；\n  x.send(10)\n```\n  2、call 和 callcode（调用和调用码）<br/>\n  call和callcode是非常低级的函数，它可以作为打破Solidity的类型安全的最后手段。\n```\n  address nameReg = 0x123;\n  nameReg.call(\"register\", \"MyName\");\n  nameReg.call(bytes4(sha3(\"fun(uint256)\")), a)\n```\n  函数调用返回了一个布尔值，表示函数是否正常调用结束或EVM异常（false）\n  callcode：只使用给定地址的编码\n\n- bytes1, bytes2, bytes3, ..., bytes32; byte 是bytes1的别名\n\n- 枚举：\n```\n  enum Choices{GoLeft, GORight, GoStraight, SitStill}\n  Choices constant defaultChoice = Choices.GoStraight;\n```\n\n- 字符串常量\n\n  字符串常量可以隐式换成bytes\n\n- 引用类型\n\n  复杂类型，例如类型并不总是256为，因为拷贝他们相当消耗存储和时间，我们必须考虑把它们存储在内存或者存储器（状态变量存放的地方）\n\n- 数据位置：\n  - 内存\n  - 存储器\n  - calldata： 一个无法改变的，非持久的 存储函数参数的地方\n  - 每一个复杂类型,即数组和结构体,有一个额外的注解,“数据位置”,不管它是存储在内存中，还是存储在存储器上。根据上下文,总是有一个默认的,但它可以通过附加存储或内存覆盖类型。函数参数的默认值(包括返回参数)是在内存上,局部变量的默认存储位置是在存储器上。存储器上存有状态变量(很明显)。\n  - 赋值过程：\n    - 在存储和内存以及状态变量之间赋值总需要创建一个独立的副本；赋值只分配一个本地存储变量引用，这总是指向状态变量的引用，后者同时改变，\n    -  从一个内存存储引用类型，赋值到另一个内存存储引用类型，并不创建一个副本；\n\n- 数组：\n  - 数组可以长度固定，也可以动态（类似切片）\n  - 存储器数组，成员类型是任意的（映射，结构体)\n  - 内存数组， 成员类型不能是映射\n  - bytes 和 string是特殊类型的数组， bytes byte[], string  bytes\n\n\n- 函数可见性和访问限制：\n  - external: 外部函数是合约接口的一部分，可能从其他合约调用；也通过食物调用；不能在被内部调用（即f()不执行，但是this.f()执行）\n  - public: default\n  - internal： 只能在内部访问（当前合约或它派生的合约），而不使用(关键字) this\n  - private： 私有函数和状态变量仅仅在定义该合约中可见，在派生的合约中不可见；\n\n- interface\n  -接口内没有任何函数是已实现的，并限制如下：\n  - 不能继承其他合约，或接口\n  - 不能定义构造器\n  - 不能定义变量、结构体、枚举等\n\n```\n  interface Token{\n    function transfer(address recipient, uint amount);\n  }\n```\n\n继承：\n\n```\n  contract owned{\n    address public owner;\n    function owned(){\n      owner = msg.sender;\n    }\n  }\n\n  contract base1{\n      addresss public owner2;\n      function base1(){\n        owner2 = msg.sender;\n      }\n  }\n\n // is 关键字\n  contract mortal is owned{\n\n    function kill(){\n      if(msg.sender == owner)\n        selfdestruct(owner);\n    }\n  }\n\n //继承顺序，从“最基本”到“最近派生”\n  contract Final is owned, base1{\n\n  }\n\n```\n优秀solidity文章：\nhttps://steemit.com/cn/@speeding/smart-contract-development8\n建议熟读Solidity全局变量、全局函数，要抄代码，首先去OpenZeppelin，然后是Consensys的项目里去抄，有现成的 ERC20、ERC721合约模版和mock，\n\n\nthis在合约中表示当前合约地址；\n\npayable 标识的函数：【重点】\n\n- 函数上增加payable标识，即可接收ether，并会把ether存在当前合约地址\n\n```\n   contract Pay{\n     //存入一些ether到合约帐户中\n     function deposit() payable{\n     }\n\n     //查询当前的余额\n     function getBalance() constant returns(uint){\n       return this.balance;\n     }\n   }\n```\n\n合约要接收通过send()函数发送的ether，有如下限制：\n\n- 必须定义fallback函数，否则抛异常\n- fallback函数必须增加payable关键字，否则send()执行结果始终未false；\n\n```\n  pragma solidity ^0.4.0;\n  contract SendAndReceiveBycontract{\n    //fallback函数对应记录事件\n    event fallbackTrigged(bytes data);\n\n    //合约接收send()的ether时，必须存在\n    function() payable{fallbackTrigged(msg.data);}\n  }\n\n  function deposit () payable{\n  }\n\n  function getBalance() constant returns (uint){\n    return this.balance;\n  }\n  event SendEvent(address to, uint value, bool result);\n\n  //使用send()发送ether\n  function sendEther(){\n    // this.send(msg.value) : 向当前合约转账；\n    bool result = this.send(1);\n    SendEvent(this, 1, result);\n  }\n```\n代\n\n```\n  modifier notThis(address _address){\n    require(_address != address(this))\n    _;\n  }\n```\n```go\n  type Account struct{\n    Address common.Address `json:\"address\"`\n    URL URL                `json:\"url\"`\n  }\n\n  const (\n    HashLength = 32 //32 bytes [256bit]\n    AddressLength = 20 // 20 bytes\n  )\n\n  type URL struct{\n    Scheme string\n    Path   string\n  }\n\n  type Address [AddressLength]byte  //20 bytes\n\n  type Wallet interface{\n    URL() URL\n    Status() (string, error)\n    ...\n  }\n\n  type KeyStore struct{\n    storage keyStore\n    cache *accountCache\n    changes chan struct{}\n    unlocked map[common.Address]*unlocked\n\n    ....\n\n  }\n  4.576b shard 528: soid 62df576b/rbd_data.742c2250945ff8.0000000000009896/118//4 size 0 != known size 8388608\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- xx\n","source":"_posts/solidity_01.md","raw":"---\n  title: solidity入门之一\n---\n\n### 概述\nsolidity 编译的方式生产evm字节,广泛用于投票、众筹，封闭，拍卖，多重签名钱包等合约中；\n\n- 外部帐户地址是由公钥决定的;\n- 合约帐户：被存储在帐户中的代码控制，在创建合约时候确定的；（这个地址由合约创建者的地址和该地址发出过的交易数量计算得到，地址发出过的交易数量也被称作为\"nonce\"）\n\n合约帐户存储了合约代码，而外部帐户则没有\n\n### 合约的结构\n- 状态变量： 在合约存储器中永久存储的值；\n- 函数： 合约中可执行单元的代码；\n- 函数修饰符： 在声明的方式中补充函数的语义；\n- 事件： 和EVM日志设施的接口\n- 结构体：一组用户定义的变量\n- 枚举： 创建一个特定值的集合的类型；\n\n\n### 特殊的数据类型\n\n- int/uint：是有符号和无符号的整数；\n- int/uint: 分别是int256 和uint256 的别名；\n\n- 地址address：\n\n  1、地址属性：balance 和 发送（send）<br/>\n  若查询到有资产余额的地址，然后发送 Ether（以wei为单位）到send函数的地址上\n```solidity\n  address x = 0x123；\n  x.send(10)\n```\n  2、call 和 callcode（调用和调用码）<br/>\n  call和callcode是非常低级的函数，它可以作为打破Solidity的类型安全的最后手段。\n```\n  address nameReg = 0x123;\n  nameReg.call(\"register\", \"MyName\");\n  nameReg.call(bytes4(sha3(\"fun(uint256)\")), a)\n```\n  函数调用返回了一个布尔值，表示函数是否正常调用结束或EVM异常（false）\n  callcode：只使用给定地址的编码\n\n- bytes1, bytes2, bytes3, ..., bytes32; byte 是bytes1的别名\n\n- 枚举：\n```\n  enum Choices{GoLeft, GORight, GoStraight, SitStill}\n  Choices constant defaultChoice = Choices.GoStraight;\n```\n\n- 字符串常量\n\n  字符串常量可以隐式换成bytes\n\n- 引用类型\n\n  复杂类型，例如类型并不总是256为，因为拷贝他们相当消耗存储和时间，我们必须考虑把它们存储在内存或者存储器（状态变量存放的地方）\n\n- 数据位置：\n  - 内存\n  - 存储器\n  - calldata： 一个无法改变的，非持久的 存储函数参数的地方\n  - 每一个复杂类型,即数组和结构体,有一个额外的注解,“数据位置”,不管它是存储在内存中，还是存储在存储器上。根据上下文,总是有一个默认的,但它可以通过附加存储或内存覆盖类型。函数参数的默认值(包括返回参数)是在内存上,局部变量的默认存储位置是在存储器上。存储器上存有状态变量(很明显)。\n  - 赋值过程：\n    - 在存储和内存以及状态变量之间赋值总需要创建一个独立的副本；赋值只分配一个本地存储变量引用，这总是指向状态变量的引用，后者同时改变，\n    -  从一个内存存储引用类型，赋值到另一个内存存储引用类型，并不创建一个副本；\n\n- 数组：\n  - 数组可以长度固定，也可以动态（类似切片）\n  - 存储器数组，成员类型是任意的（映射，结构体)\n  - 内存数组， 成员类型不能是映射\n  - bytes 和 string是特殊类型的数组， bytes byte[], string  bytes\n\n\n- 函数可见性和访问限制：\n  - external: 外部函数是合约接口的一部分，可能从其他合约调用；也通过食物调用；不能在被内部调用（即f()不执行，但是this.f()执行）\n  - public: default\n  - internal： 只能在内部访问（当前合约或它派生的合约），而不使用(关键字) this\n  - private： 私有函数和状态变量仅仅在定义该合约中可见，在派生的合约中不可见；\n\n- interface\n  -接口内没有任何函数是已实现的，并限制如下：\n  - 不能继承其他合约，或接口\n  - 不能定义构造器\n  - 不能定义变量、结构体、枚举等\n\n```\n  interface Token{\n    function transfer(address recipient, uint amount);\n  }\n```\n\n继承：\n\n```\n  contract owned{\n    address public owner;\n    function owned(){\n      owner = msg.sender;\n    }\n  }\n\n  contract base1{\n      addresss public owner2;\n      function base1(){\n        owner2 = msg.sender;\n      }\n  }\n\n // is 关键字\n  contract mortal is owned{\n\n    function kill(){\n      if(msg.sender == owner)\n        selfdestruct(owner);\n    }\n  }\n\n //继承顺序，从“最基本”到“最近派生”\n  contract Final is owned, base1{\n\n  }\n\n```\n优秀solidity文章：\nhttps://steemit.com/cn/@speeding/smart-contract-development8\n建议熟读Solidity全局变量、全局函数，要抄代码，首先去OpenZeppelin，然后是Consensys的项目里去抄，有现成的 ERC20、ERC721合约模版和mock，\n\n\nthis在合约中表示当前合约地址；\n\npayable 标识的函数：【重点】\n\n- 函数上增加payable标识，即可接收ether，并会把ether存在当前合约地址\n\n```\n   contract Pay{\n     //存入一些ether到合约帐户中\n     function deposit() payable{\n     }\n\n     //查询当前的余额\n     function getBalance() constant returns(uint){\n       return this.balance;\n     }\n   }\n```\n\n合约要接收通过send()函数发送的ether，有如下限制：\n\n- 必须定义fallback函数，否则抛异常\n- fallback函数必须增加payable关键字，否则send()执行结果始终未false；\n\n```\n  pragma solidity ^0.4.0;\n  contract SendAndReceiveBycontract{\n    //fallback函数对应记录事件\n    event fallbackTrigged(bytes data);\n\n    //合约接收send()的ether时，必须存在\n    function() payable{fallbackTrigged(msg.data);}\n  }\n\n  function deposit () payable{\n  }\n\n  function getBalance() constant returns (uint){\n    return this.balance;\n  }\n  event SendEvent(address to, uint value, bool result);\n\n  //使用send()发送ether\n  function sendEther(){\n    // this.send(msg.value) : 向当前合约转账；\n    bool result = this.send(1);\n    SendEvent(this, 1, result);\n  }\n```\n代\n\n```\n  modifier notThis(address _address){\n    require(_address != address(this))\n    _;\n  }\n```\n```go\n  type Account struct{\n    Address common.Address `json:\"address\"`\n    URL URL                `json:\"url\"`\n  }\n\n  const (\n    HashLength = 32 //32 bytes [256bit]\n    AddressLength = 20 // 20 bytes\n  )\n\n  type URL struct{\n    Scheme string\n    Path   string\n  }\n\n  type Address [AddressLength]byte  //20 bytes\n\n  type Wallet interface{\n    URL() URL\n    Status() (string, error)\n    ...\n  }\n\n  type KeyStore struct{\n    storage keyStore\n    cache *accountCache\n    changes chan struct{}\n    unlocked map[common.Address]*unlocked\n\n    ....\n\n  }\n  4.576b shard 528: soid 62df576b/rbd_data.742c2250945ff8.0000000000009896/118//4 size 0 != known size 8388608\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- xx\n","slug":"solidity_01","published":1,"date":"2018-07-04T02:28:57.997Z","updated":"2018-07-04T02:28:57.996Z","_id":"cjj6hwjpr0009lihaihbrkz64","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>solidity 编译的方式生产evm字节,广泛用于投票、众筹，封闭，拍卖，多重签名钱包等合约中；</p>\n<ul>\n<li>外部帐户地址是由公钥决定的;</li>\n<li>合约帐户：被存储在帐户中的代码控制，在创建合约时候确定的；（这个地址由合约创建者的地址和该地址发出过的交易数量计算得到，地址发出过的交易数量也被称作为”nonce”）</li>\n</ul>\n<p>合约帐户存储了合约代码，而外部帐户则没有</p>\n<h3 id=\"合约的结构\"><a href=\"#合约的结构\" class=\"headerlink\" title=\"合约的结构\"></a>合约的结构</h3><ul>\n<li>状态变量： 在合约存储器中永久存储的值；</li>\n<li>函数： 合约中可执行单元的代码；</li>\n<li>函数修饰符： 在声明的方式中补充函数的语义；</li>\n<li>事件： 和EVM日志设施的接口</li>\n<li>结构体：一组用户定义的变量</li>\n<li>枚举： 创建一个特定值的集合的类型；</li>\n</ul>\n<h3 id=\"特殊的数据类型\"><a href=\"#特殊的数据类型\" class=\"headerlink\" title=\"特殊的数据类型\"></a>特殊的数据类型</h3><ul>\n<li>int/uint：是有符号和无符号的整数；</li>\n<li><p>int/uint: 分别是int256 和uint256 的别名；</p>\n</li>\n<li><p>地址address：</p>\n<p>1、地址属性：balance 和 发送（send）<br><br>若查询到有资产余额的地址，然后发送 Ether（以wei为单位）到send函数的地址上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">address x = 0x123；</span><br><span class=\"line\">x.send(10)</span><br></pre></td></tr></table></figure>\n<p>2、call 和 callcode（调用和调用码）<br><br>call和callcode是非常低级的函数，它可以作为打破Solidity的类型安全的最后手段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">address nameReg = 0x123;</span><br><span class=\"line\">nameReg.call(&quot;register&quot;, &quot;MyName&quot;);</span><br><span class=\"line\">nameReg.call(bytes4(sha3(&quot;fun(uint256)&quot;)), a)</span><br></pre></td></tr></table></figure>\n<p>函数调用返回了一个布尔值，表示函数是否正常调用结束或EVM异常（false）<br>callcode：只使用给定地址的编码</p>\n</li>\n<li><p>bytes1, bytes2, bytes3, …, bytes32; byte 是bytes1的别名</p>\n</li>\n<li><p>枚举：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Choices&#123;GoLeft, GORight, GoStraight, SitStill&#125;</span><br><span class=\"line\">Choices constant defaultChoice = Choices.GoStraight;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串常量</p>\n<p>字符串常量可以隐式换成bytes</p>\n</li>\n<li><p>引用类型</p>\n<p>复杂类型，例如类型并不总是256为，因为拷贝他们相当消耗存储和时间，我们必须考虑把它们存储在内存或者存储器（状态变量存放的地方）</p>\n</li>\n<li><p>数据位置：</p>\n<ul>\n<li>内存</li>\n<li>存储器</li>\n<li>calldata： 一个无法改变的，非持久的 存储函数参数的地方</li>\n<li>每一个复杂类型,即数组和结构体,有一个额外的注解,“数据位置”,不管它是存储在内存中，还是存储在存储器上。根据上下文,总是有一个默认的,但它可以通过附加存储或内存覆盖类型。函数参数的默认值(包括返回参数)是在内存上,局部变量的默认存储位置是在存储器上。存储器上存有状态变量(很明显)。</li>\n<li>赋值过程：<ul>\n<li>在存储和内存以及状态变量之间赋值总需要创建一个独立的副本；赋值只分配一个本地存储变量引用，这总是指向状态变量的引用，后者同时改变，</li>\n<li>从一个内存存储引用类型，赋值到另一个内存存储引用类型，并不创建一个副本；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>数组：</p>\n<ul>\n<li>数组可以长度固定，也可以动态（类似切片）</li>\n<li>存储器数组，成员类型是任意的（映射，结构体)</li>\n<li>内存数组， 成员类型不能是映射</li>\n<li>bytes 和 string是特殊类型的数组， bytes byte[], string  bytes</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>函数可见性和访问限制：</p>\n<ul>\n<li>external: 外部函数是合约接口的一部分，可能从其他合约调用；也通过食物调用；不能在被内部调用（即f()不执行，但是this.f()执行）</li>\n<li>public: default</li>\n<li>internal： 只能在内部访问（当前合约或它派生的合约），而不使用(关键字) this</li>\n<li>private： 私有函数和状态变量仅仅在定义该合约中可见，在派生的合约中不可见；</li>\n</ul>\n</li>\n<li><p>interface<br>-接口内没有任何函数是已实现的，并限制如下：</p>\n<ul>\n<li>不能继承其他合约，或接口</li>\n<li>不能定义构造器</li>\n<li>不能定义变量、结构体、枚举等</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Token&#123;</span><br><span class=\"line\">  function transfer(address recipient, uint amount);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继承：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> contract owned&#123;</span><br><span class=\"line\">   address public owner;</span><br><span class=\"line\">   function owned()&#123;</span><br><span class=\"line\">     owner = msg.sender;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> contract base1&#123;</span><br><span class=\"line\">     addresss public owner2;</span><br><span class=\"line\">     function base1()&#123;</span><br><span class=\"line\">       owner2 = msg.sender;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// is 关键字</span><br><span class=\"line\"> contract mortal is owned&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   function kill()&#123;</span><br><span class=\"line\">     if(msg.sender == owner)</span><br><span class=\"line\">       selfdestruct(owner);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//继承顺序，从“最基本”到“最近派生”</span><br><span class=\"line\"> contract Final is owned, base1&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>优秀solidity文章：<br><a href=\"https://steemit.com/cn/@speeding/smart-contract-development8\" target=\"_blank\" rel=\"noopener\">https://steemit.com/cn/@speeding/smart-contract-development8</a><br>建议熟读Solidity全局变量、全局函数，要抄代码，首先去OpenZeppelin，然后是Consensys的项目里去抄，有现成的 ERC20、ERC721合约模版和mock，</p>\n<p>this在合约中表示当前合约地址；</p>\n<p>payable 标识的函数：【重点】</p>\n<ul>\n<li>函数上增加payable标识，即可接收ether，并会把ether存在当前合约地址</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract Pay&#123;</span><br><span class=\"line\">  //存入一些ether到合约帐户中</span><br><span class=\"line\">  function deposit() payable&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //查询当前的余额</span><br><span class=\"line\">  function getBalance() constant returns(uint)&#123;</span><br><span class=\"line\">    return this.balance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>合约要接收通过send()函数发送的ether，有如下限制：</p>\n<ul>\n<li>必须定义fallback函数，否则抛异常</li>\n<li>fallback函数必须增加payable关键字，否则send()执行结果始终未false；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\">contract SendAndReceiveBycontract&#123;</span><br><span class=\"line\">  //fallback函数对应记录事件</span><br><span class=\"line\">  event fallbackTrigged(bytes data);</span><br><span class=\"line\"></span><br><span class=\"line\">  //合约接收send()的ether时，必须存在</span><br><span class=\"line\">  function() payable&#123;fallbackTrigged(msg.data);&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function deposit () payable&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function getBalance() constant returns (uint)&#123;</span><br><span class=\"line\">  return this.balance;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">event SendEvent(address to, uint value, bool result);</span><br><span class=\"line\"></span><br><span class=\"line\">//使用send()发送ether</span><br><span class=\"line\">function sendEther()&#123;</span><br><span class=\"line\">  // this.send(msg.value) : 向当前合约转账；</span><br><span class=\"line\">  bool result = this.send(1);</span><br><span class=\"line\">  SendEvent(this, 1, result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modifier notThis(address _address)&#123;</span><br><span class=\"line\">  require(_address != address(this))</span><br><span class=\"line\">  _;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Account <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  Address common.Address <span class=\"string\">`json:\"address\"`</span></span><br><span class=\"line\">  URL URL                <span class=\"string\">`json:\"url\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  HashLength = <span class=\"number\">32</span> <span class=\"comment\">//32 bytes [256bit]</span></span><br><span class=\"line\">  AddressLength = <span class=\"number\">20</span> <span class=\"comment\">// 20 bytes</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> URL <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  Scheme <span class=\"keyword\">string</span></span><br><span class=\"line\">  Path   <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Address [AddressLength]<span class=\"keyword\">byte</span>  <span class=\"comment\">//20 bytes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Wallet <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">  URL() URL</span><br><span class=\"line\">  Status() (<span class=\"keyword\">string</span>, error)</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> KeyStore <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  storage keyStore</span><br><span class=\"line\">  cache *accountCache</span><br><span class=\"line\">  changes <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\">  unlocked <span class=\"keyword\">map</span>[common.Address]*unlocked</span><br><span class=\"line\"></span><br><span class=\"line\">  ....</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">4.576</span>b shard <span class=\"number\">528</span>: soid <span class=\"number\">62d</span>f576b/rbd_data<span class=\"number\">.742</span>c2250945ff8<span class=\"number\">.0000000000009896</span>/<span class=\"number\">118</span><span class=\"comment\">//4 size 0 != known size 8388608</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>xx</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>solidity 编译的方式生产evm字节,广泛用于投票、众筹，封闭，拍卖，多重签名钱包等合约中；</p>\n<ul>\n<li>外部帐户地址是由公钥决定的;</li>\n<li>合约帐户：被存储在帐户中的代码控制，在创建合约时候确定的；（这个地址由合约创建者的地址和该地址发出过的交易数量计算得到，地址发出过的交易数量也被称作为”nonce”）</li>\n</ul>\n<p>合约帐户存储了合约代码，而外部帐户则没有</p>\n<h3 id=\"合约的结构\"><a href=\"#合约的结构\" class=\"headerlink\" title=\"合约的结构\"></a>合约的结构</h3><ul>\n<li>状态变量： 在合约存储器中永久存储的值；</li>\n<li>函数： 合约中可执行单元的代码；</li>\n<li>函数修饰符： 在声明的方式中补充函数的语义；</li>\n<li>事件： 和EVM日志设施的接口</li>\n<li>结构体：一组用户定义的变量</li>\n<li>枚举： 创建一个特定值的集合的类型；</li>\n</ul>\n<h3 id=\"特殊的数据类型\"><a href=\"#特殊的数据类型\" class=\"headerlink\" title=\"特殊的数据类型\"></a>特殊的数据类型</h3><ul>\n<li>int/uint：是有符号和无符号的整数；</li>\n<li><p>int/uint: 分别是int256 和uint256 的别名；</p>\n</li>\n<li><p>地址address：</p>\n<p>1、地址属性：balance 和 发送（send）<br><br>若查询到有资产余额的地址，然后发送 Ether（以wei为单位）到send函数的地址上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">address x = 0x123；</span><br><span class=\"line\">x.send(10)</span><br></pre></td></tr></table></figure>\n<p>2、call 和 callcode（调用和调用码）<br><br>call和callcode是非常低级的函数，它可以作为打破Solidity的类型安全的最后手段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">address nameReg = 0x123;</span><br><span class=\"line\">nameReg.call(&quot;register&quot;, &quot;MyName&quot;);</span><br><span class=\"line\">nameReg.call(bytes4(sha3(&quot;fun(uint256)&quot;)), a)</span><br></pre></td></tr></table></figure>\n<p>函数调用返回了一个布尔值，表示函数是否正常调用结束或EVM异常（false）<br>callcode：只使用给定地址的编码</p>\n</li>\n<li><p>bytes1, bytes2, bytes3, …, bytes32; byte 是bytes1的别名</p>\n</li>\n<li><p>枚举：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Choices&#123;GoLeft, GORight, GoStraight, SitStill&#125;</span><br><span class=\"line\">Choices constant defaultChoice = Choices.GoStraight;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串常量</p>\n<p>字符串常量可以隐式换成bytes</p>\n</li>\n<li><p>引用类型</p>\n<p>复杂类型，例如类型并不总是256为，因为拷贝他们相当消耗存储和时间，我们必须考虑把它们存储在内存或者存储器（状态变量存放的地方）</p>\n</li>\n<li><p>数据位置：</p>\n<ul>\n<li>内存</li>\n<li>存储器</li>\n<li>calldata： 一个无法改变的，非持久的 存储函数参数的地方</li>\n<li>每一个复杂类型,即数组和结构体,有一个额外的注解,“数据位置”,不管它是存储在内存中，还是存储在存储器上。根据上下文,总是有一个默认的,但它可以通过附加存储或内存覆盖类型。函数参数的默认值(包括返回参数)是在内存上,局部变量的默认存储位置是在存储器上。存储器上存有状态变量(很明显)。</li>\n<li>赋值过程：<ul>\n<li>在存储和内存以及状态变量之间赋值总需要创建一个独立的副本；赋值只分配一个本地存储变量引用，这总是指向状态变量的引用，后者同时改变，</li>\n<li>从一个内存存储引用类型，赋值到另一个内存存储引用类型，并不创建一个副本；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>数组：</p>\n<ul>\n<li>数组可以长度固定，也可以动态（类似切片）</li>\n<li>存储器数组，成员类型是任意的（映射，结构体)</li>\n<li>内存数组， 成员类型不能是映射</li>\n<li>bytes 和 string是特殊类型的数组， bytes byte[], string  bytes</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>函数可见性和访问限制：</p>\n<ul>\n<li>external: 外部函数是合约接口的一部分，可能从其他合约调用；也通过食物调用；不能在被内部调用（即f()不执行，但是this.f()执行）</li>\n<li>public: default</li>\n<li>internal： 只能在内部访问（当前合约或它派生的合约），而不使用(关键字) this</li>\n<li>private： 私有函数和状态变量仅仅在定义该合约中可见，在派生的合约中不可见；</li>\n</ul>\n</li>\n<li><p>interface<br>-接口内没有任何函数是已实现的，并限制如下：</p>\n<ul>\n<li>不能继承其他合约，或接口</li>\n<li>不能定义构造器</li>\n<li>不能定义变量、结构体、枚举等</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Token&#123;</span><br><span class=\"line\">  function transfer(address recipient, uint amount);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继承：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> contract owned&#123;</span><br><span class=\"line\">   address public owner;</span><br><span class=\"line\">   function owned()&#123;</span><br><span class=\"line\">     owner = msg.sender;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> contract base1&#123;</span><br><span class=\"line\">     addresss public owner2;</span><br><span class=\"line\">     function base1()&#123;</span><br><span class=\"line\">       owner2 = msg.sender;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// is 关键字</span><br><span class=\"line\"> contract mortal is owned&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   function kill()&#123;</span><br><span class=\"line\">     if(msg.sender == owner)</span><br><span class=\"line\">       selfdestruct(owner);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//继承顺序，从“最基本”到“最近派生”</span><br><span class=\"line\"> contract Final is owned, base1&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>优秀solidity文章：<br><a href=\"https://steemit.com/cn/@speeding/smart-contract-development8\" target=\"_blank\" rel=\"noopener\">https://steemit.com/cn/@speeding/smart-contract-development8</a><br>建议熟读Solidity全局变量、全局函数，要抄代码，首先去OpenZeppelin，然后是Consensys的项目里去抄，有现成的 ERC20、ERC721合约模版和mock，</p>\n<p>this在合约中表示当前合约地址；</p>\n<p>payable 标识的函数：【重点】</p>\n<ul>\n<li>函数上增加payable标识，即可接收ether，并会把ether存在当前合约地址</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract Pay&#123;</span><br><span class=\"line\">  //存入一些ether到合约帐户中</span><br><span class=\"line\">  function deposit() payable&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //查询当前的余额</span><br><span class=\"line\">  function getBalance() constant returns(uint)&#123;</span><br><span class=\"line\">    return this.balance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>合约要接收通过send()函数发送的ether，有如下限制：</p>\n<ul>\n<li>必须定义fallback函数，否则抛异常</li>\n<li>fallback函数必须增加payable关键字，否则send()执行结果始终未false；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\">contract SendAndReceiveBycontract&#123;</span><br><span class=\"line\">  //fallback函数对应记录事件</span><br><span class=\"line\">  event fallbackTrigged(bytes data);</span><br><span class=\"line\"></span><br><span class=\"line\">  //合约接收send()的ether时，必须存在</span><br><span class=\"line\">  function() payable&#123;fallbackTrigged(msg.data);&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function deposit () payable&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function getBalance() constant returns (uint)&#123;</span><br><span class=\"line\">  return this.balance;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">event SendEvent(address to, uint value, bool result);</span><br><span class=\"line\"></span><br><span class=\"line\">//使用send()发送ether</span><br><span class=\"line\">function sendEther()&#123;</span><br><span class=\"line\">  // this.send(msg.value) : 向当前合约转账；</span><br><span class=\"line\">  bool result = this.send(1);</span><br><span class=\"line\">  SendEvent(this, 1, result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modifier notThis(address _address)&#123;</span><br><span class=\"line\">  require(_address != address(this))</span><br><span class=\"line\">  _;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Account <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  Address common.Address <span class=\"string\">`json:\"address\"`</span></span><br><span class=\"line\">  URL URL                <span class=\"string\">`json:\"url\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  HashLength = <span class=\"number\">32</span> <span class=\"comment\">//32 bytes [256bit]</span></span><br><span class=\"line\">  AddressLength = <span class=\"number\">20</span> <span class=\"comment\">// 20 bytes</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> URL <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  Scheme <span class=\"keyword\">string</span></span><br><span class=\"line\">  Path   <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Address [AddressLength]<span class=\"keyword\">byte</span>  <span class=\"comment\">//20 bytes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Wallet <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">  URL() URL</span><br><span class=\"line\">  Status() (<span class=\"keyword\">string</span>, error)</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> KeyStore <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  storage keyStore</span><br><span class=\"line\">  cache *accountCache</span><br><span class=\"line\">  changes <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\">  unlocked <span class=\"keyword\">map</span>[common.Address]*unlocked</span><br><span class=\"line\"></span><br><span class=\"line\">  ....</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">4.576</span>b shard <span class=\"number\">528</span>: soid <span class=\"number\">62d</span>f576b/rbd_data<span class=\"number\">.742</span>c2250945ff8<span class=\"number\">.0000000000009896</span>/<span class=\"number\">118</span><span class=\"comment\">//4 size 0 != known size 8388608</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>xx</li>\n</ul>\n"},{"_content":"---\n  title:golang中使用makefile\n---\n\nMakefile必须以tab来进行缩进\n\n```\n  target: prerequisites\n    recipe\n```\n\n- make 变量\n\n  VAR := value  //声明变量\n```\n  FILE := abc\n  $(FILE): xyz\n    echo $(FILE) > \"something\"\n\n  xyz:\n    echo \"xyz\" > xyz\n```\nhttps://sahilm.com/makefiles-for-golang/\n\nmake描述了如何构建我们的项目，那些可运行的测试以及项目中依赖的额外的工具；\nPHONY 目标并非实际的文件名： 只是显示请求时执行命令的名字；优势有以下两点：\n\n- 避免和同名文件冲突\n  如果编写一个规则，并不产生目标文件，则其命令在每次make该目标时都执行：\n ```\n  clean:\n    rm *.o temp\n ```\n   因为\" rm \"  并不生成\" clean \"文件，则每次执行\" make clean \" 的时候，该命令都会执行；\n   如果目录中出现了 \" clean \"文件，则规则失效了：没有依赖文件，文件\"clean\"始终是最新的， 命令永远不会执行； 为了避免这个问题，可使用\" .PHONY \"指明该目标。\n```\n  .PHONY: clean\n  clean:\n    rm *.0 temp\n```\n  这样执行\" make clean \"会无视\" clean \"文件存在与否；\n  已知phony 目标并非是由其它文件生成的实际文件，make 会跳过隐含规则搜索。这就是声明phony 目标会改善性能的原因，即使你并不担心实际文件存在与否。\n\n- 改善性能\n  phony 目标可以有依赖关系。当一个目录中有多个程序，将其放在一个makefile 中会更方便。因为缺省目标是makefile 中的第一个目标，通常将这个phony 目标叫做\"all\"，其依赖文件为各个程序：\n\n```\nall : prog1 prog2 prog3\n.PHONY : all\nprog1 : prog1.o utils.o\n  cc -o prog1 prog1.o utils.o\nprog2 : prog2.o\n  cc -o prog2 prog2.o\nprog3 : prog3.o sort.o utils.o\n  cc -o prog3 prog3.o sort.o utils.o\n```\n一个项目最后需要产生两个可执行文件。主要目标是产生两个可执行文件，但这两个文件是相互独立的——如果一个文件需要重建，并不影响另一个。使用“假象目的”来 达到这种效果。一个假象目的跟一个正常的目的几乎是一样的， 只是这个目的文件是不存在的。因此， make 总是会假设它需要 被生成，当把它的依赖文件更新后，就会执行它的规则里的命令行。\n","source":"_posts/makefile.md","raw":"---\n  title:golang中使用makefile\n---\n\nMakefile必须以tab来进行缩进\n\n```\n  target: prerequisites\n    recipe\n```\n\n- make 变量\n\n  VAR := value  //声明变量\n```\n  FILE := abc\n  $(FILE): xyz\n    echo $(FILE) > \"something\"\n\n  xyz:\n    echo \"xyz\" > xyz\n```\nhttps://sahilm.com/makefiles-for-golang/\n\nmake描述了如何构建我们的项目，那些可运行的测试以及项目中依赖的额外的工具；\nPHONY 目标并非实际的文件名： 只是显示请求时执行命令的名字；优势有以下两点：\n\n- 避免和同名文件冲突\n  如果编写一个规则，并不产生目标文件，则其命令在每次make该目标时都执行：\n ```\n  clean:\n    rm *.o temp\n ```\n   因为\" rm \"  并不生成\" clean \"文件，则每次执行\" make clean \" 的时候，该命令都会执行；\n   如果目录中出现了 \" clean \"文件，则规则失效了：没有依赖文件，文件\"clean\"始终是最新的， 命令永远不会执行； 为了避免这个问题，可使用\" .PHONY \"指明该目标。\n```\n  .PHONY: clean\n  clean:\n    rm *.0 temp\n```\n  这样执行\" make clean \"会无视\" clean \"文件存在与否；\n  已知phony 目标并非是由其它文件生成的实际文件，make 会跳过隐含规则搜索。这就是声明phony 目标会改善性能的原因，即使你并不担心实际文件存在与否。\n\n- 改善性能\n  phony 目标可以有依赖关系。当一个目录中有多个程序，将其放在一个makefile 中会更方便。因为缺省目标是makefile 中的第一个目标，通常将这个phony 目标叫做\"all\"，其依赖文件为各个程序：\n\n```\nall : prog1 prog2 prog3\n.PHONY : all\nprog1 : prog1.o utils.o\n  cc -o prog1 prog1.o utils.o\nprog2 : prog2.o\n  cc -o prog2 prog2.o\nprog3 : prog3.o sort.o utils.o\n  cc -o prog3 prog3.o sort.o utils.o\n```\n一个项目最后需要产生两个可执行文件。主要目标是产生两个可执行文件，但这两个文件是相互独立的——如果一个文件需要重建，并不影响另一个。使用“假象目的”来 达到这种效果。一个假象目的跟一个正常的目的几乎是一样的， 只是这个目的文件是不存在的。因此， make 总是会假设它需要 被生成，当把它的依赖文件更新后，就会执行它的规则里的命令行。\n","slug":"makefile","published":1,"date":"2018-09-21T07:16:42.312Z","updated":"2018-10-11T10:26:37.294Z","_id":"cjjpeohpc000075hake7q25tm","title":"","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<h2 id=\"title-golang中使用makefile\"><a href=\"#title-golang中使用makefile\" class=\"headerlink\" title=\"  title:golang中使用makefile\"></a>  title:golang中使用makefile</h2><p>Makefile必须以tab来进行缩进</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target: prerequisites</span><br><span class=\"line\">  recipe</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>make 变量</p>\n<p>VAR := value  //声明变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FILE := abc</span><br><span class=\"line\">$(FILE): xyz</span><br><span class=\"line\">  echo $(FILE) &gt; &quot;something&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">xyz:</span><br><span class=\"line\">  echo &quot;xyz&quot; &gt; xyz</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"https://sahilm.com/makefiles-for-golang/\" target=\"_blank\" rel=\"noopener\">https://sahilm.com/makefiles-for-golang/</a></p>\n<p>make描述了如何构建我们的项目，那些可运行的测试以及项目中依赖的额外的工具；<br>PHONY 目标并非实际的文件名： 只是显示请求时执行命令的名字；优势有以下两点：</p>\n<ul>\n<li><p>避免和同名文件冲突<br>如果编写一个规则，并不产生目标文件，则其命令在每次make该目标时都执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clean:</span><br><span class=\"line\">  rm *.o temp</span><br></pre></td></tr></table></figure>\n<p> 因为” rm “  并不生成” clean “文件，则每次执行” make clean “ 的时候，该命令都会执行；<br> 如果目录中出现了 “ clean “文件，则规则失效了：没有依赖文件，文件”clean”始终是最新的， 命令永远不会执行； 为了避免这个问题，可使用” .PHONY “指明该目标。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.PHONY: clean</span><br><span class=\"line\">clean:</span><br><span class=\"line\">  rm *.0 temp</span><br></pre></td></tr></table></figure>\n<p>这样执行” make clean “会无视” clean “文件存在与否；<br>已知phony 目标并非是由其它文件生成的实际文件，make 会跳过隐含规则搜索。这就是声明phony 目标会改善性能的原因，即使你并不担心实际文件存在与否。</p>\n</li>\n<li><p>改善性能<br>phony 目标可以有依赖关系。当一个目录中有多个程序，将其放在一个makefile 中会更方便。因为缺省目标是makefile 中的第一个目标，通常将这个phony 目标叫做”all”，其依赖文件为各个程序：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all : prog1 prog2 prog3</span><br><span class=\"line\">.PHONY : all</span><br><span class=\"line\">prog1 : prog1.o utils.o</span><br><span class=\"line\">  cc -o prog1 prog1.o utils.o</span><br><span class=\"line\">prog2 : prog2.o</span><br><span class=\"line\">  cc -o prog2 prog2.o</span><br><span class=\"line\">prog3 : prog3.o sort.o utils.o</span><br><span class=\"line\">  cc -o prog3 prog3.o sort.o utils.o</span><br></pre></td></tr></table></figure>\n<p>一个项目最后需要产生两个可执行文件。主要目标是产生两个可执行文件，但这两个文件是相互独立的——如果一个文件需要重建，并不影响另一个。使用“假象目的”来 达到这种效果。一个假象目的跟一个正常的目的几乎是一样的， 只是这个目的文件是不存在的。因此， make 总是会假设它需要 被生成，当把它的依赖文件更新后，就会执行它的规则里的命令行。</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"title-golang中使用makefile\"><a href=\"#title-golang中使用makefile\" class=\"headerlink\" title=\"  title:golang中使用makefile\"></a>  title:golang中使用makefile</h2><p>Makefile必须以tab来进行缩进</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target: prerequisites</span><br><span class=\"line\">  recipe</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>make 变量</p>\n<p>VAR := value  //声明变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FILE := abc</span><br><span class=\"line\">$(FILE): xyz</span><br><span class=\"line\">  echo $(FILE) &gt; &quot;something&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">xyz:</span><br><span class=\"line\">  echo &quot;xyz&quot; &gt; xyz</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"https://sahilm.com/makefiles-for-golang/\" target=\"_blank\" rel=\"noopener\">https://sahilm.com/makefiles-for-golang/</a></p>\n<p>make描述了如何构建我们的项目，那些可运行的测试以及项目中依赖的额外的工具；<br>PHONY 目标并非实际的文件名： 只是显示请求时执行命令的名字；优势有以下两点：</p>\n<ul>\n<li><p>避免和同名文件冲突<br>如果编写一个规则，并不产生目标文件，则其命令在每次make该目标时都执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clean:</span><br><span class=\"line\">  rm *.o temp</span><br></pre></td></tr></table></figure>\n<p> 因为” rm “  并不生成” clean “文件，则每次执行” make clean “ 的时候，该命令都会执行；<br> 如果目录中出现了 “ clean “文件，则规则失效了：没有依赖文件，文件”clean”始终是最新的， 命令永远不会执行； 为了避免这个问题，可使用” .PHONY “指明该目标。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.PHONY: clean</span><br><span class=\"line\">clean:</span><br><span class=\"line\">  rm *.0 temp</span><br></pre></td></tr></table></figure>\n<p>这样执行” make clean “会无视” clean “文件存在与否；<br>已知phony 目标并非是由其它文件生成的实际文件，make 会跳过隐含规则搜索。这就是声明phony 目标会改善性能的原因，即使你并不担心实际文件存在与否。</p>\n</li>\n<li><p>改善性能<br>phony 目标可以有依赖关系。当一个目录中有多个程序，将其放在一个makefile 中会更方便。因为缺省目标是makefile 中的第一个目标，通常将这个phony 目标叫做”all”，其依赖文件为各个程序：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all : prog1 prog2 prog3</span><br><span class=\"line\">.PHONY : all</span><br><span class=\"line\">prog1 : prog1.o utils.o</span><br><span class=\"line\">  cc -o prog1 prog1.o utils.o</span><br><span class=\"line\">prog2 : prog2.o</span><br><span class=\"line\">  cc -o prog2 prog2.o</span><br><span class=\"line\">prog3 : prog3.o sort.o utils.o</span><br><span class=\"line\">  cc -o prog3 prog3.o sort.o utils.o</span><br></pre></td></tr></table></figure>\n<p>一个项目最后需要产生两个可执行文件。主要目标是产生两个可执行文件，但这两个文件是相互独立的——如果一个文件需要重建，并不影响另一个。使用“假象目的”来 达到这种效果。一个假象目的跟一个正常的目的几乎是一样的， 只是这个目的文件是不存在的。因此， make 总是会假设它需要 被生成，当把它的依赖文件更新后，就会执行它的规则里的命令行。</p>\n"},{"title":"solidity代码优化","_content":"```javascript\ncontract BadFailEarly {\n  uint constant DEFAULT_SALARY = 50000;\n  mapping(string => uint) nameToSalary;\n  function getSalary(string name) constant returns (uint) {\n      if (bytes(name).length != 0 && nameToSalary[name] != 0) {\n            return nameToSalary[name];\n          } else {\n                return DEFAULT_SALARY;\n              }\n    }\n}\n\ncontract GoodFailEarly {\n  mapping(string => uint) nameToSalary;\n\n  function getSalary(string name) constant returns (uint) {\n      if (bytes(name).length == 0) throw;\n      if (nameToSalary[name] == 0) throw;\n\n      return nameToSalary[name];\n    }\n}\n\ncontract BadPushPayments {\n  address highestBidder;\n  uint highestBid;\n\n  function bid() {\n      if (msg.value < highestBid) throw;\n      if (highestBidder != 0) {\n            // return bid to previous winner\n            if (!highestBidder.send(highestBid)) {\n                    throw;\n            }\n      }\n      highestBidder = msg.sender;\n      highestBid = msg.value;\n    }\n}\n\n/*when sending ether, favor pull over push payments. 发送以太坊，支付推动付款 */\ncontract GoodPullPayments {\n  address highestBidder;\n  uint highestBid;\nmapping(address => uint) refunds; //refund 退款\n\nfunction bid() external {\n    if (msg.value < highestBid) throw;\n\n    if (highestBidder != 0) {\n          refunds[highestBidder] += highestBid;\n        }\n\n    highestBidder = msg.sender;\n    highestBid = msg.value;\n  }\n\nfunction withdrawBid() external {\n    uint refund = refunds[msg.sender];\n    refunds[msg.sender] = 0;\n    if (!msg.sender.send(refund)) {\n          refunds[msg.sender] = refund;\n        }\n  }\n}\n\n/**\n*  顺序化代码\n   - condition, 条件\n   - actions,   动作\n   - interaction, 影响\n*\n*/\n\nfunction auctionEnd() {\n// 1. Conditions\nif (now <= auctionStart + biddingTime)\n  throw; // auction did not yet end\nif (ended)\n  throw; // this function has already been called\n\n// 2. Effects\nended = true;\nAuctionEnded(highestBidder, highestBid);\n\n// 3. Interaction\nif (!beneficiary.send(highestBid))\n  throw;\n}\n}\n\ncontract BadArrayUse {\naddress[] employees;\nmapping(address => uint) bonuses;\n\nfunction payBonus() {\n    //@ i : uint8(0~255)\n    for (var i = 0; i < employees.length; i++) {\n          address employee = employees[i];\n          uint bonus = calculateBonus(employee);\n          employee.send(bonus);\n        }\n  }\n\n  //循环中执行的函数，必须很清楚每个循环消耗多少gas，否则导致gas不足，进行回滚\n  function calculateBonus(address employee) returns (uint) {\n    // some expensive computation ...\n    bonuses[employee] = bonus;\n  }\n}\n\n\n// PullPayment.sol 在zeppelin包中\nimport './PullPayment.sol';\ncontract GoodArrayUse is PullPayment {\naddress[] employees;\nmapping(address => uint) bonuses;\n\nfunction payBonus() {\n    for (uint i = 0; i < employees.length; i++) {\n          address employee = employees[i];\n          uint bonus = bonuses[employee];\n          //******\n          asyncSend(employee, bonus);\n        }\n  }\nfunction calculateBonus(address employee) returns (uint) {\n    uint bonus = 0;\n    // some expensive computation...\n\n    bonuses[employee] = bonus;\n  }\n}\n\nimport './PullPayment.sol';\nimport './Token.sol';\ncontract Bounty is PullPayment {\nbool public claimed;\nmapping(address => address) public researchers;\n\nfunction() {\n    if (claimed) throw;\n  }\n\nfunction createTarget() returns(Token) {\n    Token target = new Token(0);\n    researchers[target] = msg.sender;\n    return target;\n  }\n\nfunction claim(Token target) {\n    address researcher = researchers[target];\n    if (researcher == 0) throw;\n\n    // check Token contract invariants\n    if (target.totalSupply() == target.balance) {\n          throw;\n        }\n    asyncSend(researcher, this.balance);\n    claimed = true;\n  }\n}\n\n//紧急停止合约\ncontract Stoppable{\n  address public curator;\n  bool public stopped;\n\n  modifier stopInEmergency {if (!stopped) _;}\n  modifier onlyInEmergency {if (stopped) _;}\n\n  function Stoppable(address _curator){\n      if(_curator == 0) throw;\n      curator = _curator;\n  }\n\n  function emergencyStop() external{\n      if(msg.sender != curator) throw;\n      stopped = true;\n  }\n}\n\nimport './PullPayment.sol';\nimport './Stoppable.sol';\ncontract StoppableBid is Stoppable, PullPayment {\naddress public highestBidder;\nuint public highestBid;\n\nfunction StoppableBid(address _curator)\n  Stoppable(_curator)\n  PullPayment() {}\n\nfunction bid() external stopInEmergency {\n    if (msg.value <= highestBid) throw;\n\n    if (highestBidder != 0) {\n          asyncSend(highestBidder, highestBid);\n    }\n\n    highestBidder = msg.sender;\n    highestBid = msg.value;\n}\n\nfunction withdraw() onlyInEmergency {\n    suicide(curator);\n  }\n}\n```\n","source":"_posts/sodility_optimal.md","raw":"---\n  title: solidity代码优化\n---\n```javascript\ncontract BadFailEarly {\n  uint constant DEFAULT_SALARY = 50000;\n  mapping(string => uint) nameToSalary;\n  function getSalary(string name) constant returns (uint) {\n      if (bytes(name).length != 0 && nameToSalary[name] != 0) {\n            return nameToSalary[name];\n          } else {\n                return DEFAULT_SALARY;\n              }\n    }\n}\n\ncontract GoodFailEarly {\n  mapping(string => uint) nameToSalary;\n\n  function getSalary(string name) constant returns (uint) {\n      if (bytes(name).length == 0) throw;\n      if (nameToSalary[name] == 0) throw;\n\n      return nameToSalary[name];\n    }\n}\n\ncontract BadPushPayments {\n  address highestBidder;\n  uint highestBid;\n\n  function bid() {\n      if (msg.value < highestBid) throw;\n      if (highestBidder != 0) {\n            // return bid to previous winner\n            if (!highestBidder.send(highestBid)) {\n                    throw;\n            }\n      }\n      highestBidder = msg.sender;\n      highestBid = msg.value;\n    }\n}\n\n/*when sending ether, favor pull over push payments. 发送以太坊，支付推动付款 */\ncontract GoodPullPayments {\n  address highestBidder;\n  uint highestBid;\nmapping(address => uint) refunds; //refund 退款\n\nfunction bid() external {\n    if (msg.value < highestBid) throw;\n\n    if (highestBidder != 0) {\n          refunds[highestBidder] += highestBid;\n        }\n\n    highestBidder = msg.sender;\n    highestBid = msg.value;\n  }\n\nfunction withdrawBid() external {\n    uint refund = refunds[msg.sender];\n    refunds[msg.sender] = 0;\n    if (!msg.sender.send(refund)) {\n          refunds[msg.sender] = refund;\n        }\n  }\n}\n\n/**\n*  顺序化代码\n   - condition, 条件\n   - actions,   动作\n   - interaction, 影响\n*\n*/\n\nfunction auctionEnd() {\n// 1. Conditions\nif (now <= auctionStart + biddingTime)\n  throw; // auction did not yet end\nif (ended)\n  throw; // this function has already been called\n\n// 2. Effects\nended = true;\nAuctionEnded(highestBidder, highestBid);\n\n// 3. Interaction\nif (!beneficiary.send(highestBid))\n  throw;\n}\n}\n\ncontract BadArrayUse {\naddress[] employees;\nmapping(address => uint) bonuses;\n\nfunction payBonus() {\n    //@ i : uint8(0~255)\n    for (var i = 0; i < employees.length; i++) {\n          address employee = employees[i];\n          uint bonus = calculateBonus(employee);\n          employee.send(bonus);\n        }\n  }\n\n  //循环中执行的函数，必须很清楚每个循环消耗多少gas，否则导致gas不足，进行回滚\n  function calculateBonus(address employee) returns (uint) {\n    // some expensive computation ...\n    bonuses[employee] = bonus;\n  }\n}\n\n\n// PullPayment.sol 在zeppelin包中\nimport './PullPayment.sol';\ncontract GoodArrayUse is PullPayment {\naddress[] employees;\nmapping(address => uint) bonuses;\n\nfunction payBonus() {\n    for (uint i = 0; i < employees.length; i++) {\n          address employee = employees[i];\n          uint bonus = bonuses[employee];\n          //******\n          asyncSend(employee, bonus);\n        }\n  }\nfunction calculateBonus(address employee) returns (uint) {\n    uint bonus = 0;\n    // some expensive computation...\n\n    bonuses[employee] = bonus;\n  }\n}\n\nimport './PullPayment.sol';\nimport './Token.sol';\ncontract Bounty is PullPayment {\nbool public claimed;\nmapping(address => address) public researchers;\n\nfunction() {\n    if (claimed) throw;\n  }\n\nfunction createTarget() returns(Token) {\n    Token target = new Token(0);\n    researchers[target] = msg.sender;\n    return target;\n  }\n\nfunction claim(Token target) {\n    address researcher = researchers[target];\n    if (researcher == 0) throw;\n\n    // check Token contract invariants\n    if (target.totalSupply() == target.balance) {\n          throw;\n        }\n    asyncSend(researcher, this.balance);\n    claimed = true;\n  }\n}\n\n//紧急停止合约\ncontract Stoppable{\n  address public curator;\n  bool public stopped;\n\n  modifier stopInEmergency {if (!stopped) _;}\n  modifier onlyInEmergency {if (stopped) _;}\n\n  function Stoppable(address _curator){\n      if(_curator == 0) throw;\n      curator = _curator;\n  }\n\n  function emergencyStop() external{\n      if(msg.sender != curator) throw;\n      stopped = true;\n  }\n}\n\nimport './PullPayment.sol';\nimport './Stoppable.sol';\ncontract StoppableBid is Stoppable, PullPayment {\naddress public highestBidder;\nuint public highestBid;\n\nfunction StoppableBid(address _curator)\n  Stoppable(_curator)\n  PullPayment() {}\n\nfunction bid() external stopInEmergency {\n    if (msg.value <= highestBid) throw;\n\n    if (highestBidder != 0) {\n          asyncSend(highestBidder, highestBid);\n    }\n\n    highestBidder = msg.sender;\n    highestBid = msg.value;\n}\n\nfunction withdraw() onlyInEmergency {\n    suicide(curator);\n  }\n}\n```\n","slug":"sodility_optimal","published":1,"date":"2018-07-17T07:57:11.050Z","updated":"2018-07-06T10:47:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjpeohpp000175hafj0lf6gz","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract BadFailEarly &#123;</span><br><span class=\"line\">  uint constant DEFAULT_SALARY = <span class=\"number\">50000</span>;</span><br><span class=\"line\">  mapping(<span class=\"function\"><span class=\"params\">string</span> =&gt;</span> uint) nameToSalary;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSalary</span>(<span class=\"params\">string name</span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (bytes(name).length != <span class=\"number\">0</span> &amp;&amp; nameToSalary[name] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nameToSalary[name];</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> DEFAULT_SALARY;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract GoodFailEarly &#123;</span><br><span class=\"line\">  mapping(<span class=\"function\"><span class=\"params\">string</span> =&gt;</span> uint) nameToSalary;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSalary</span>(<span class=\"params\">string name</span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (bytes(name).length == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nameToSalary[name] == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> nameToSalary[name];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract BadPushPayments &#123;</span><br><span class=\"line\">  address highestBidder;</span><br><span class=\"line\">  uint highestBid;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bid</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (msg.value &lt; highestBid) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (highestBidder != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// return bid to previous winner</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!highestBidder.send(highestBid)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      highestBidder = msg.sender;</span><br><span class=\"line\">      highestBid = msg.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*when sending ether, favor pull over push payments. 发送以太坊，支付推动付款 */</span></span><br><span class=\"line\">contract GoodPullPayments &#123;</span><br><span class=\"line\">  address highestBidder;</span><br><span class=\"line\">  uint highestBid;</span><br><span class=\"line\">mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint) refunds; <span class=\"comment\">//refund 退款</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bid</span>(<span class=\"params\"></span>) <span class=\"title\">external</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (msg.value &lt; highestBid) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (highestBidder != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          refunds[highestBidder] += highestBid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    highestBidder = msg.sender;</span><br><span class=\"line\">    highestBid = msg.value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">withdrawBid</span>(<span class=\"params\"></span>) <span class=\"title\">external</span> </span>&#123;</span><br><span class=\"line\">    uint refund = refunds[msg.sender];</span><br><span class=\"line\">    refunds[msg.sender] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!msg.sender.send(refund)) &#123;</span><br><span class=\"line\">          refunds[msg.sender] = refund;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*  顺序化代码</span></span><br><span class=\"line\"><span class=\"comment\">   - condition, 条件</span></span><br><span class=\"line\"><span class=\"comment\">   - actions,   动作</span></span><br><span class=\"line\"><span class=\"comment\">   - interaction, 影响</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">auctionEnd</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 1. Conditions</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (now &lt;= auctionStart + biddingTime)</span><br><span class=\"line\">  <span class=\"keyword\">throw</span>; <span class=\"comment\">// auction did not yet end</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ended)</span><br><span class=\"line\">  <span class=\"keyword\">throw</span>; <span class=\"comment\">// this function has already been called</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. Effects</span></span><br><span class=\"line\">ended = <span class=\"literal\">true</span>;</span><br><span class=\"line\">AuctionEnded(highestBidder, highestBid);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. Interaction</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!beneficiary.send(highestBid))</span><br><span class=\"line\">  <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract BadArrayUse &#123;</span><br><span class=\"line\">address[] employees;</span><br><span class=\"line\">mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint) bonuses;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">payBonus</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//@ i : uint8(0~255)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; employees.length; i++) &#123;</span><br><span class=\"line\">          address employee = employees[i];</span><br><span class=\"line\">          uint bonus = calculateBonus(employee);</span><br><span class=\"line\">          employee.send(bonus);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//循环中执行的函数，必须很清楚每个循环消耗多少gas，否则导致gas不足，进行回滚</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateBonus</span>(<span class=\"params\">address employee</span>) <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// some expensive computation ...</span></span><br><span class=\"line\">    bonuses[employee] = bonus;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PullPayment.sol 在zeppelin包中</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./PullPayment.sol'</span>;</span><br><span class=\"line\">contract GoodArrayUse is PullPayment &#123;</span><br><span class=\"line\">address[] employees;</span><br><span class=\"line\">mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint) bonuses;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">payBonus</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (uint i = <span class=\"number\">0</span>; i &lt; employees.length; i++) &#123;</span><br><span class=\"line\">          address employee = employees[i];</span><br><span class=\"line\">          uint bonus = bonuses[employee];</span><br><span class=\"line\">          <span class=\"comment\">//******</span></span><br><span class=\"line\">          asyncSend(employee, bonus);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateBonus</span>(<span class=\"params\">address employee</span>) <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;</span><br><span class=\"line\">    uint bonus = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// some expensive computation...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    bonuses[employee] = bonus;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./PullPayment.sol'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./Token.sol'</span>;</span><br><span class=\"line\">contract Bounty is PullPayment &#123;</span><br><span class=\"line\">bool public claimed;</span><br><span class=\"line\">mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> address) public researchers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (claimed) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createTarget</span>(<span class=\"params\"></span>) <span class=\"title\">returns</span>(<span class=\"params\">Token</span>) </span>&#123;</span><br><span class=\"line\">    Token target = <span class=\"keyword\">new</span> Token(<span class=\"number\">0</span>);</span><br><span class=\"line\">    researchers[target] = msg.sender;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">claim</span>(<span class=\"params\">Token target</span>) </span>&#123;</span><br><span class=\"line\">    address researcher = researchers[target];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (researcher == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// check Token contract invariants</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.totalSupply() == target.balance) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    asyncSend(researcher, <span class=\"keyword\">this</span>.balance);</span><br><span class=\"line\">    claimed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//紧急停止合约</span></span><br><span class=\"line\">contract Stoppable&#123;</span><br><span class=\"line\">  address public curator;</span><br><span class=\"line\">  bool public stopped;</span><br><span class=\"line\"></span><br><span class=\"line\">  modifier stopInEmergency &#123;<span class=\"keyword\">if</span> (!stopped) _;&#125;</span><br><span class=\"line\">  modifier onlyInEmergency &#123;<span class=\"keyword\">if</span> (stopped) _;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Stoppable</span>(<span class=\"params\">address _curator</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(_curator == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">      curator = _curator;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emergencyStop</span>(<span class=\"params\"></span>) <span class=\"title\">external</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(msg.sender != curator) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">      stopped = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./PullPayment.sol'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./Stoppable.sol'</span>;</span><br><span class=\"line\">contract StoppableBid is Stoppable, PullPayment &#123;</span><br><span class=\"line\">address public highestBidder;</span><br><span class=\"line\">uint public highestBid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">StoppableBid</span>(<span class=\"params\">address _curator</span>)</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">Stoppable</span>(<span class=\"params\">_curator</span>)</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">PullPayment</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bid</span>(<span class=\"params\"></span>) <span class=\"title\">external</span> <span class=\"title\">stopInEmergency</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (msg.value &lt;= highestBid) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (highestBidder != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          asyncSend(highestBidder, highestBid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    highestBidder = msg.sender;</span><br><span class=\"line\">    highestBid = msg.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">withdraw</span>(<span class=\"params\"></span>) <span class=\"title\">onlyInEmergency</span> </span>&#123;</span><br><span class=\"line\">    suicide(curator);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract BadFailEarly &#123;</span><br><span class=\"line\">  uint constant DEFAULT_SALARY = <span class=\"number\">50000</span>;</span><br><span class=\"line\">  mapping(<span class=\"function\"><span class=\"params\">string</span> =&gt;</span> uint) nameToSalary;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSalary</span>(<span class=\"params\">string name</span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (bytes(name).length != <span class=\"number\">0</span> &amp;&amp; nameToSalary[name] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nameToSalary[name];</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> DEFAULT_SALARY;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract GoodFailEarly &#123;</span><br><span class=\"line\">  mapping(<span class=\"function\"><span class=\"params\">string</span> =&gt;</span> uint) nameToSalary;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSalary</span>(<span class=\"params\">string name</span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (bytes(name).length == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nameToSalary[name] == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> nameToSalary[name];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract BadPushPayments &#123;</span><br><span class=\"line\">  address highestBidder;</span><br><span class=\"line\">  uint highestBid;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bid</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (msg.value &lt; highestBid) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (highestBidder != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// return bid to previous winner</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!highestBidder.send(highestBid)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      highestBidder = msg.sender;</span><br><span class=\"line\">      highestBid = msg.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*when sending ether, favor pull over push payments. 发送以太坊，支付推动付款 */</span></span><br><span class=\"line\">contract GoodPullPayments &#123;</span><br><span class=\"line\">  address highestBidder;</span><br><span class=\"line\">  uint highestBid;</span><br><span class=\"line\">mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint) refunds; <span class=\"comment\">//refund 退款</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bid</span>(<span class=\"params\"></span>) <span class=\"title\">external</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (msg.value &lt; highestBid) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (highestBidder != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          refunds[highestBidder] += highestBid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    highestBidder = msg.sender;</span><br><span class=\"line\">    highestBid = msg.value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">withdrawBid</span>(<span class=\"params\"></span>) <span class=\"title\">external</span> </span>&#123;</span><br><span class=\"line\">    uint refund = refunds[msg.sender];</span><br><span class=\"line\">    refunds[msg.sender] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!msg.sender.send(refund)) &#123;</span><br><span class=\"line\">          refunds[msg.sender] = refund;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*  顺序化代码</span></span><br><span class=\"line\"><span class=\"comment\">   - condition, 条件</span></span><br><span class=\"line\"><span class=\"comment\">   - actions,   动作</span></span><br><span class=\"line\"><span class=\"comment\">   - interaction, 影响</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">auctionEnd</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 1. Conditions</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (now &lt;= auctionStart + biddingTime)</span><br><span class=\"line\">  <span class=\"keyword\">throw</span>; <span class=\"comment\">// auction did not yet end</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ended)</span><br><span class=\"line\">  <span class=\"keyword\">throw</span>; <span class=\"comment\">// this function has already been called</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. Effects</span></span><br><span class=\"line\">ended = <span class=\"literal\">true</span>;</span><br><span class=\"line\">AuctionEnded(highestBidder, highestBid);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. Interaction</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!beneficiary.send(highestBid))</span><br><span class=\"line\">  <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract BadArrayUse &#123;</span><br><span class=\"line\">address[] employees;</span><br><span class=\"line\">mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint) bonuses;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">payBonus</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//@ i : uint8(0~255)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; employees.length; i++) &#123;</span><br><span class=\"line\">          address employee = employees[i];</span><br><span class=\"line\">          uint bonus = calculateBonus(employee);</span><br><span class=\"line\">          employee.send(bonus);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//循环中执行的函数，必须很清楚每个循环消耗多少gas，否则导致gas不足，进行回滚</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateBonus</span>(<span class=\"params\">address employee</span>) <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// some expensive computation ...</span></span><br><span class=\"line\">    bonuses[employee] = bonus;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PullPayment.sol 在zeppelin包中</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./PullPayment.sol'</span>;</span><br><span class=\"line\">contract GoodArrayUse is PullPayment &#123;</span><br><span class=\"line\">address[] employees;</span><br><span class=\"line\">mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint) bonuses;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">payBonus</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (uint i = <span class=\"number\">0</span>; i &lt; employees.length; i++) &#123;</span><br><span class=\"line\">          address employee = employees[i];</span><br><span class=\"line\">          uint bonus = bonuses[employee];</span><br><span class=\"line\">          <span class=\"comment\">//******</span></span><br><span class=\"line\">          asyncSend(employee, bonus);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateBonus</span>(<span class=\"params\">address employee</span>) <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;</span><br><span class=\"line\">    uint bonus = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// some expensive computation...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    bonuses[employee] = bonus;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./PullPayment.sol'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./Token.sol'</span>;</span><br><span class=\"line\">contract Bounty is PullPayment &#123;</span><br><span class=\"line\">bool public claimed;</span><br><span class=\"line\">mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> address) public researchers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (claimed) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createTarget</span>(<span class=\"params\"></span>) <span class=\"title\">returns</span>(<span class=\"params\">Token</span>) </span>&#123;</span><br><span class=\"line\">    Token target = <span class=\"keyword\">new</span> Token(<span class=\"number\">0</span>);</span><br><span class=\"line\">    researchers[target] = msg.sender;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">claim</span>(<span class=\"params\">Token target</span>) </span>&#123;</span><br><span class=\"line\">    address researcher = researchers[target];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (researcher == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// check Token contract invariants</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.totalSupply() == target.balance) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    asyncSend(researcher, <span class=\"keyword\">this</span>.balance);</span><br><span class=\"line\">    claimed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//紧急停止合约</span></span><br><span class=\"line\">contract Stoppable&#123;</span><br><span class=\"line\">  address public curator;</span><br><span class=\"line\">  bool public stopped;</span><br><span class=\"line\"></span><br><span class=\"line\">  modifier stopInEmergency &#123;<span class=\"keyword\">if</span> (!stopped) _;&#125;</span><br><span class=\"line\">  modifier onlyInEmergency &#123;<span class=\"keyword\">if</span> (stopped) _;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Stoppable</span>(<span class=\"params\">address _curator</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(_curator == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">      curator = _curator;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emergencyStop</span>(<span class=\"params\"></span>) <span class=\"title\">external</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(msg.sender != curator) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">      stopped = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./PullPayment.sol'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./Stoppable.sol'</span>;</span><br><span class=\"line\">contract StoppableBid is Stoppable, PullPayment &#123;</span><br><span class=\"line\">address public highestBidder;</span><br><span class=\"line\">uint public highestBid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">StoppableBid</span>(<span class=\"params\">address _curator</span>)</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">Stoppable</span>(<span class=\"params\">_curator</span>)</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">PullPayment</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bid</span>(<span class=\"params\"></span>) <span class=\"title\">external</span> <span class=\"title\">stopInEmergency</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (msg.value &lt;= highestBid) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (highestBidder != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          asyncSend(highestBidder, highestBid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    highestBidder = msg.sender;</span><br><span class=\"line\">    highestBid = msg.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">withdraw</span>(<span class=\"params\"></span>) <span class=\"title\">onlyInEmergency</span> </span>&#123;</span><br><span class=\"line\">    suicide(curator);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"solidity Library","_content":"\n在Solidity中，与合约有些不同，Library不能处理ether。你可以把它当作一个EVM中的单例，又或者是一个部署一次后不再部署，然后能被做任意其它合约调用的公共代码。\n\n这带来的一个显然好处是节省大量的gas（当然也可以减少重复代码对区块链带来的污染），因为代码不用一而再，再而三的部署，不同的合约可以依赖于同一个已部署的合约。\n\n库是一个特殊的合约，不允许payable的函数，不允许fallback函数（这些限制是在编译期间强制执行的，由此我们不能使用库来操作ether）。库通过关键字library定义，如library C{}，与合约定义类似contract A{}。\n\n调用库函数时，将使用一个特殊的指令（DELEGATECAL)，这会将调用时的上下文信息传入到library中，就好像代码在合约自身中执行一样。 “库可以被看作是使用它的合约中的一个隐式父类”\n\n```\n  library C{\n    function a() returns(address){\n      return address(this);\n    }\n  }\n\n  contract A{\n    function a() constant returns(address){\n      return C.a();\n    }\n  }\n```\n\n- using 结构体和方法\n\n尽管库并没有storage，他们可以使用关联合约的storage。当传递一个库调用，库所进行的修改，将会保存在合约中的storage中。这有点类似于向函数中传递了C语言一样的指针，只有通过这种方式，库才可能是一个已经被部署过的，或已经存在于区块链上了。\n\n使用using提供的语法糖，可以让这一切实现得简洁和好懂。\n```\nlibrary CounterLib {\n    struct Counter { uint i; }\n\n    function incremented(Counter storage self) returns (uint) {\n        return ++self.i;\n    }\n}\n\ncontract CounterContract {\n    using CounterLib for CounterLib.Counter;\n\n    CounterLib.Counter counter;\n\n    function increment() returns (uint) {\n        return counter.incremented();\n    }\n}\n```\nusing关键字，在CounterLib数据结构Counter上附着了CounterLib库中定义的方法。CounterLib.Counter的实例在使用时，就好像它自己有了incremented()，调用方法时，会直接把这个实例作为第一个参数传入了函数。\n\n- 事件和库\n\n  库中不止没有storage，也没有event。但他们类似storage这样，转发事件；\n  如之前所述，一个库可以被认为是被调用合约的隐式的基类。如果在基类合约中触发一个事件，它也会出现在主合约中事件日志中，同样的，库函数也是如此，当合约调用的库函数中的事件触发函数时，日志事件也会出现在合约的日志中。\n\n  当前的问题是，合约的ABI定义不能反映库中可能会触发的事件。这将导致客户端如web3，不知道如何解析事件，以及不知道如何解析参数。\n\n  这里有一个缓解的办法，是在合约和库中都定义同样的事件，这将让客户端认为合约触发对应的事件（而实际是库函数触发的）。\n\n  下面是一个简单的例子来说明这一切，尽管Emit事件由库触发，通过监听EventEmitterContract.Emit，我们可以监听事件。而相对来说，监听EventEmitterLib.Emit，反而不会得到什么事件。\n\n```\nlibrary EventEmitterLib {\n    function emit(string s) {\n        Emit(s);\n    }\n\n    event Emit(string s);\n}\n\ncontract EventEmitterContract {\n    using EventEmitterLib for string;\n\n    function emit(string s) {\n        s.emit();\n    }\n\n    event Emit(string s);\n}\n```\n","source":"_posts/solidity_library.md","raw":"---\n  title: solidity Library\n---\n\n在Solidity中，与合约有些不同，Library不能处理ether。你可以把它当作一个EVM中的单例，又或者是一个部署一次后不再部署，然后能被做任意其它合约调用的公共代码。\n\n这带来的一个显然好处是节省大量的gas（当然也可以减少重复代码对区块链带来的污染），因为代码不用一而再，再而三的部署，不同的合约可以依赖于同一个已部署的合约。\n\n库是一个特殊的合约，不允许payable的函数，不允许fallback函数（这些限制是在编译期间强制执行的，由此我们不能使用库来操作ether）。库通过关键字library定义，如library C{}，与合约定义类似contract A{}。\n\n调用库函数时，将使用一个特殊的指令（DELEGATECAL)，这会将调用时的上下文信息传入到library中，就好像代码在合约自身中执行一样。 “库可以被看作是使用它的合约中的一个隐式父类”\n\n```\n  library C{\n    function a() returns(address){\n      return address(this);\n    }\n  }\n\n  contract A{\n    function a() constant returns(address){\n      return C.a();\n    }\n  }\n```\n\n- using 结构体和方法\n\n尽管库并没有storage，他们可以使用关联合约的storage。当传递一个库调用，库所进行的修改，将会保存在合约中的storage中。这有点类似于向函数中传递了C语言一样的指针，只有通过这种方式，库才可能是一个已经被部署过的，或已经存在于区块链上了。\n\n使用using提供的语法糖，可以让这一切实现得简洁和好懂。\n```\nlibrary CounterLib {\n    struct Counter { uint i; }\n\n    function incremented(Counter storage self) returns (uint) {\n        return ++self.i;\n    }\n}\n\ncontract CounterContract {\n    using CounterLib for CounterLib.Counter;\n\n    CounterLib.Counter counter;\n\n    function increment() returns (uint) {\n        return counter.incremented();\n    }\n}\n```\nusing关键字，在CounterLib数据结构Counter上附着了CounterLib库中定义的方法。CounterLib.Counter的实例在使用时，就好像它自己有了incremented()，调用方法时，会直接把这个实例作为第一个参数传入了函数。\n\n- 事件和库\n\n  库中不止没有storage，也没有event。但他们类似storage这样，转发事件；\n  如之前所述，一个库可以被认为是被调用合约的隐式的基类。如果在基类合约中触发一个事件，它也会出现在主合约中事件日志中，同样的，库函数也是如此，当合约调用的库函数中的事件触发函数时，日志事件也会出现在合约的日志中。\n\n  当前的问题是，合约的ABI定义不能反映库中可能会触发的事件。这将导致客户端如web3，不知道如何解析事件，以及不知道如何解析参数。\n\n  这里有一个缓解的办法，是在合约和库中都定义同样的事件，这将让客户端认为合约触发对应的事件（而实际是库函数触发的）。\n\n  下面是一个简单的例子来说明这一切，尽管Emit事件由库触发，通过监听EventEmitterContract.Emit，我们可以监听事件。而相对来说，监听EventEmitterLib.Emit，反而不会得到什么事件。\n\n```\nlibrary EventEmitterLib {\n    function emit(string s) {\n        Emit(s);\n    }\n\n    event Emit(string s);\n}\n\ncontract EventEmitterContract {\n    using EventEmitterLib for string;\n\n    function emit(string s) {\n        s.emit();\n    }\n\n    event Emit(string s);\n}\n```\n","slug":"solidity_library","published":1,"date":"2018-07-17T07:57:22.554Z","updated":"2018-07-04T10:15:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjpeohpw000275hapaenldtm","content":"<p>在Solidity中，与合约有些不同，Library不能处理ether。你可以把它当作一个EVM中的单例，又或者是一个部署一次后不再部署，然后能被做任意其它合约调用的公共代码。</p>\n<p>这带来的一个显然好处是节省大量的gas（当然也可以减少重复代码对区块链带来的污染），因为代码不用一而再，再而三的部署，不同的合约可以依赖于同一个已部署的合约。</p>\n<p>库是一个特殊的合约，不允许payable的函数，不允许fallback函数（这些限制是在编译期间强制执行的，由此我们不能使用库来操作ether）。库通过关键字library定义，如library C{}，与合约定义类似contract A{}。</p>\n<p>调用库函数时，将使用一个特殊的指令（DELEGATECAL)，这会将调用时的上下文信息传入到library中，就好像代码在合约自身中执行一样。 “库可以被看作是使用它的合约中的一个隐式父类”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library C&#123;</span><br><span class=\"line\">  function a() returns(address)&#123;</span><br><span class=\"line\">    return address(this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract A&#123;</span><br><span class=\"line\">  function a() constant returns(address)&#123;</span><br><span class=\"line\">    return C.a();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>using 结构体和方法</li>\n</ul>\n<p>尽管库并没有storage，他们可以使用关联合约的storage。当传递一个库调用，库所进行的修改，将会保存在合约中的storage中。这有点类似于向函数中传递了C语言一样的指针，只有通过这种方式，库才可能是一个已经被部署过的，或已经存在于区块链上了。</p>\n<p>使用using提供的语法糖，可以让这一切实现得简洁和好懂。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library CounterLib &#123;</span><br><span class=\"line\">    struct Counter &#123; uint i; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function incremented(Counter storage self) returns (uint) &#123;</span><br><span class=\"line\">        return ++self.i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract CounterContract &#123;</span><br><span class=\"line\">    using CounterLib for CounterLib.Counter;</span><br><span class=\"line\"></span><br><span class=\"line\">    CounterLib.Counter counter;</span><br><span class=\"line\"></span><br><span class=\"line\">    function increment() returns (uint) &#123;</span><br><span class=\"line\">        return counter.incremented();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>using关键字，在CounterLib数据结构Counter上附着了CounterLib库中定义的方法。CounterLib.Counter的实例在使用时，就好像它自己有了incremented()，调用方法时，会直接把这个实例作为第一个参数传入了函数。</p>\n<ul>\n<li><p>事件和库</p>\n<p>库中不止没有storage，也没有event。但他们类似storage这样，转发事件；<br>如之前所述，一个库可以被认为是被调用合约的隐式的基类。如果在基类合约中触发一个事件，它也会出现在主合约中事件日志中，同样的，库函数也是如此，当合约调用的库函数中的事件触发函数时，日志事件也会出现在合约的日志中。</p>\n<p>当前的问题是，合约的ABI定义不能反映库中可能会触发的事件。这将导致客户端如web3，不知道如何解析事件，以及不知道如何解析参数。</p>\n<p>这里有一个缓解的办法，是在合约和库中都定义同样的事件，这将让客户端认为合约触发对应的事件（而实际是库函数触发的）。</p>\n<p>下面是一个简单的例子来说明这一切，尽管Emit事件由库触发，通过监听EventEmitterContract.Emit，我们可以监听事件。而相对来说，监听EventEmitterLib.Emit，反而不会得到什么事件。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library EventEmitterLib &#123;</span><br><span class=\"line\">    function emit(string s) &#123;</span><br><span class=\"line\">        Emit(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    event Emit(string s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract EventEmitterContract &#123;</span><br><span class=\"line\">    using EventEmitterLib for string;</span><br><span class=\"line\"></span><br><span class=\"line\">    function emit(string s) &#123;</span><br><span class=\"line\">        s.emit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    event Emit(string s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在Solidity中，与合约有些不同，Library不能处理ether。你可以把它当作一个EVM中的单例，又或者是一个部署一次后不再部署，然后能被做任意其它合约调用的公共代码。</p>\n<p>这带来的一个显然好处是节省大量的gas（当然也可以减少重复代码对区块链带来的污染），因为代码不用一而再，再而三的部署，不同的合约可以依赖于同一个已部署的合约。</p>\n<p>库是一个特殊的合约，不允许payable的函数，不允许fallback函数（这些限制是在编译期间强制执行的，由此我们不能使用库来操作ether）。库通过关键字library定义，如library C{}，与合约定义类似contract A{}。</p>\n<p>调用库函数时，将使用一个特殊的指令（DELEGATECAL)，这会将调用时的上下文信息传入到library中，就好像代码在合约自身中执行一样。 “库可以被看作是使用它的合约中的一个隐式父类”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library C&#123;</span><br><span class=\"line\">  function a() returns(address)&#123;</span><br><span class=\"line\">    return address(this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract A&#123;</span><br><span class=\"line\">  function a() constant returns(address)&#123;</span><br><span class=\"line\">    return C.a();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>using 结构体和方法</li>\n</ul>\n<p>尽管库并没有storage，他们可以使用关联合约的storage。当传递一个库调用，库所进行的修改，将会保存在合约中的storage中。这有点类似于向函数中传递了C语言一样的指针，只有通过这种方式，库才可能是一个已经被部署过的，或已经存在于区块链上了。</p>\n<p>使用using提供的语法糖，可以让这一切实现得简洁和好懂。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library CounterLib &#123;</span><br><span class=\"line\">    struct Counter &#123; uint i; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function incremented(Counter storage self) returns (uint) &#123;</span><br><span class=\"line\">        return ++self.i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract CounterContract &#123;</span><br><span class=\"line\">    using CounterLib for CounterLib.Counter;</span><br><span class=\"line\"></span><br><span class=\"line\">    CounterLib.Counter counter;</span><br><span class=\"line\"></span><br><span class=\"line\">    function increment() returns (uint) &#123;</span><br><span class=\"line\">        return counter.incremented();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>using关键字，在CounterLib数据结构Counter上附着了CounterLib库中定义的方法。CounterLib.Counter的实例在使用时，就好像它自己有了incremented()，调用方法时，会直接把这个实例作为第一个参数传入了函数。</p>\n<ul>\n<li><p>事件和库</p>\n<p>库中不止没有storage，也没有event。但他们类似storage这样，转发事件；<br>如之前所述，一个库可以被认为是被调用合约的隐式的基类。如果在基类合约中触发一个事件，它也会出现在主合约中事件日志中，同样的，库函数也是如此，当合约调用的库函数中的事件触发函数时，日志事件也会出现在合约的日志中。</p>\n<p>当前的问题是，合约的ABI定义不能反映库中可能会触发的事件。这将导致客户端如web3，不知道如何解析事件，以及不知道如何解析参数。</p>\n<p>这里有一个缓解的办法，是在合约和库中都定义同样的事件，这将让客户端认为合约触发对应的事件（而实际是库函数触发的）。</p>\n<p>下面是一个简单的例子来说明这一切，尽管Emit事件由库触发，通过监听EventEmitterContract.Emit，我们可以监听事件。而相对来说，监听EventEmitterLib.Emit，反而不会得到什么事件。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library EventEmitterLib &#123;</span><br><span class=\"line\">    function emit(string s) &#123;</span><br><span class=\"line\">        Emit(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    event Emit(string s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract EventEmitterContract &#123;</span><br><span class=\"line\">    using EventEmitterLib for string;</span><br><span class=\"line\"></span><br><span class=\"line\">    function emit(string s) &#123;</span><br><span class=\"line\">        s.emit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    event Emit(string s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"solidity合约之间的调用","_content":"\n### solidity合约相互调用\n\n```javascript\npragma solidity ^0.4.18;\n\ncontract Deployed{\n    function setA(uint) public returns (uint) {}\n    function a() public pure returns(uint) {}\n}\n\ncontract Existing{\n    Deployed dc;\n    function Existing(address _t) public{\n        dc = Deployed(_t);\n    }\n\n    function getA() public view returns(uint result){\n        return dc.a();\n    }\n\n    function setA(uint _val) public returns(uint result){\n        dc.setA(_val);\n        return _val;\n    }\n}\n\n/**\n* We do not need the full implementation of the “Deployed” contract\n* but rather just the function signatures as required by the ABI.\n* Since we have the address of the \"Deployed\" contract,\n* we could initialised the “Existing” contract with  the address\n* and interact with the \"Deployed\" contract using the existing setA and getA functions accordingly\n* 简单的说：没有被调用合约的地址，我们无法初始化生成该合约(无法执行构造函数)\n*/\n\n//或者这样，也是可以的\n\ncontract ExistingWithoutABI{\n    address dc;\n    function ExistingWithoutABI(address _t) public{\n        dc = _t;\n    }\n\n    /*\n    * 因为调用(delegatecall)方法只是将值传递给合约的地址，不会获得任何返回值\n    * 我们不知道调用是否成功了,除非我们调用底层的合约\n    */\nfunction setA_Signature(uint _val) public returns(bool success){\n    //固定格式进行调用, 参数传递\n    require(dc.call(bytes4(keccak256(\"setA(uint256)\")), _val));\n    return true;\n}\n}\n\n/*\n*  那我们有没有办法来获取函数的返回值呢，很不幸;\n*  我们需要使用solidity汇编才能做到这一点\n*/\n\ncontract ExistingWithOutABIRt{\naddress dc;\nfunction ExistingWithOutABIRt(address _t) public{\n    dc = _t;\n}\n\nfunction setA_ASM(uint _val) public returns(uint answer){\n   bytes4 sig = bytes4(keccak256(\"setA(uint256)\"));\n\n   //汇编代码\n   assembly{\n        // move pointer to free memory spot\n        // 可用内存为64个字节；也就是(0x40)\n        // 移动内存指针到这里\n        let ptr := mload(0x40)\n        // put function sig at memory spot\n        // 将函数签名载入到这里\n        mstore(ptr,sig)\n        // append argument after function sig\n        mstore(add(ptr,0x04), _val)\n\n        // 函数签名为4字节(0x04), 参数是32字节(0x20)\n        // 所以总共为36字节(0x24)\n        //输出为32字节(0x20)\n        let result := call(\n          15000, // gas limit\n          sload(dc_slot),  // to addr. append var to _slot to access storage variable\n          0, // not transfer any ether\n          ptr, // Inputs are stored at location ptr\n          0x24, // Inputs are 36 bytes long\n          ptr,  //Store output over input\n          0x20) //Outputs are 32 bytes long\n\n        //执行失败，则进行回滚操作\n        if eq(result, 0) {\n            revert(0, 0)\n        }\n\n        // 赋值返回给answer\n        answer := mload(ptr) // Assign output to answer var\n        mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n   }\n}\n}\n```\n","source":"_posts/solidity_inter_call.md","raw":"---\n  title: solidity合约之间的调用\n---\n\n### solidity合约相互调用\n\n```javascript\npragma solidity ^0.4.18;\n\ncontract Deployed{\n    function setA(uint) public returns (uint) {}\n    function a() public pure returns(uint) {}\n}\n\ncontract Existing{\n    Deployed dc;\n    function Existing(address _t) public{\n        dc = Deployed(_t);\n    }\n\n    function getA() public view returns(uint result){\n        return dc.a();\n    }\n\n    function setA(uint _val) public returns(uint result){\n        dc.setA(_val);\n        return _val;\n    }\n}\n\n/**\n* We do not need the full implementation of the “Deployed” contract\n* but rather just the function signatures as required by the ABI.\n* Since we have the address of the \"Deployed\" contract,\n* we could initialised the “Existing” contract with  the address\n* and interact with the \"Deployed\" contract using the existing setA and getA functions accordingly\n* 简单的说：没有被调用合约的地址，我们无法初始化生成该合约(无法执行构造函数)\n*/\n\n//或者这样，也是可以的\n\ncontract ExistingWithoutABI{\n    address dc;\n    function ExistingWithoutABI(address _t) public{\n        dc = _t;\n    }\n\n    /*\n    * 因为调用(delegatecall)方法只是将值传递给合约的地址，不会获得任何返回值\n    * 我们不知道调用是否成功了,除非我们调用底层的合约\n    */\nfunction setA_Signature(uint _val) public returns(bool success){\n    //固定格式进行调用, 参数传递\n    require(dc.call(bytes4(keccak256(\"setA(uint256)\")), _val));\n    return true;\n}\n}\n\n/*\n*  那我们有没有办法来获取函数的返回值呢，很不幸;\n*  我们需要使用solidity汇编才能做到这一点\n*/\n\ncontract ExistingWithOutABIRt{\naddress dc;\nfunction ExistingWithOutABIRt(address _t) public{\n    dc = _t;\n}\n\nfunction setA_ASM(uint _val) public returns(uint answer){\n   bytes4 sig = bytes4(keccak256(\"setA(uint256)\"));\n\n   //汇编代码\n   assembly{\n        // move pointer to free memory spot\n        // 可用内存为64个字节；也就是(0x40)\n        // 移动内存指针到这里\n        let ptr := mload(0x40)\n        // put function sig at memory spot\n        // 将函数签名载入到这里\n        mstore(ptr,sig)\n        // append argument after function sig\n        mstore(add(ptr,0x04), _val)\n\n        // 函数签名为4字节(0x04), 参数是32字节(0x20)\n        // 所以总共为36字节(0x24)\n        //输出为32字节(0x20)\n        let result := call(\n          15000, // gas limit\n          sload(dc_slot),  // to addr. append var to _slot to access storage variable\n          0, // not transfer any ether\n          ptr, // Inputs are stored at location ptr\n          0x24, // Inputs are 36 bytes long\n          ptr,  //Store output over input\n          0x20) //Outputs are 32 bytes long\n\n        //执行失败，则进行回滚操作\n        if eq(result, 0) {\n            revert(0, 0)\n        }\n\n        // 赋值返回给answer\n        answer := mload(ptr) // Assign output to answer var\n        mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n   }\n}\n}\n```\n","slug":"solidity_inter_call","published":1,"date":"2018-07-17T07:59:37.775Z","updated":"2018-07-17T07:59:37.774Z","_id":"cjjpeohq0000375hahauxo32r","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"solidity合约相互调用\"><a href=\"#solidity合约相互调用\" class=\"headerlink\" title=\"solidity合约相互调用\"></a>solidity合约相互调用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.4</span><span class=\"number\">.18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Deployed&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setA</span>(<span class=\"params\">uint</span>) <span class=\"title\">public</span> <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) <span class=\"title\">public</span> <span class=\"title\">pure</span> <span class=\"title\">returns</span>(<span class=\"params\">uint</span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Existing&#123;</span><br><span class=\"line\">    Deployed dc;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Existing</span>(<span class=\"params\">address _t</span>) <span class=\"title\">public</span></span>&#123;</span><br><span class=\"line\">        dc = Deployed(_t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getA</span>(<span class=\"params\"></span>) <span class=\"title\">public</span> <span class=\"title\">view</span> <span class=\"title\">returns</span>(<span class=\"params\">uint result</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dc.a();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setA</span>(<span class=\"params\">uint _val</span>) <span class=\"title\">public</span> <span class=\"title\">returns</span>(<span class=\"params\">uint result</span>)</span>&#123;</span><br><span class=\"line\">        dc.setA(_val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* We do not need the full implementation of the “Deployed” contract</span></span><br><span class=\"line\"><span class=\"comment\">* but rather just the function signatures as required by the ABI.</span></span><br><span class=\"line\"><span class=\"comment\">* Since we have the address of the \"Deployed\" contract,</span></span><br><span class=\"line\"><span class=\"comment\">* we could initialised the “Existing” contract with  the address</span></span><br><span class=\"line\"><span class=\"comment\">* and interact with the \"Deployed\" contract using the existing setA and getA functions accordingly</span></span><br><span class=\"line\"><span class=\"comment\">* 简单的说：没有被调用合约的地址，我们无法初始化生成该合约(无法执行构造函数)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者这样，也是可以的</span></span><br><span class=\"line\"></span><br><span class=\"line\">contract ExistingWithoutABI&#123;</span><br><span class=\"line\">    address dc;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ExistingWithoutABI</span>(<span class=\"params\">address _t</span>) <span class=\"title\">public</span></span>&#123;</span><br><span class=\"line\">        dc = _t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * 因为调用(delegatecall)方法只是将值传递给合约的地址，不会获得任何返回值</span></span><br><span class=\"line\"><span class=\"comment\">    * 我们不知道调用是否成功了,除非我们调用底层的合约</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setA_Signature</span>(<span class=\"params\">uint _val</span>) <span class=\"title\">public</span> <span class=\"title\">returns</span>(<span class=\"params\">bool success</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//固定格式进行调用, 参数传递</span></span><br><span class=\"line\">    <span class=\"built_in\">require</span>(dc.call(bytes4(keccak256(<span class=\"string\">\"setA(uint256)\"</span>)), _val));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*  那我们有没有办法来获取函数的返回值呢，很不幸;</span></span><br><span class=\"line\"><span class=\"comment\">*  我们需要使用solidity汇编才能做到这一点</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">contract ExistingWithOutABIRt&#123;</span><br><span class=\"line\">address dc;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ExistingWithOutABIRt</span>(<span class=\"params\">address _t</span>) <span class=\"title\">public</span></span>&#123;</span><br><span class=\"line\">    dc = _t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setA_ASM</span>(<span class=\"params\">uint _val</span>) <span class=\"title\">public</span> <span class=\"title\">returns</span>(<span class=\"params\">uint answer</span>)</span>&#123;</span><br><span class=\"line\">   bytes4 sig = bytes4(keccak256(<span class=\"string\">\"setA(uint256)\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//汇编代码</span></span><br><span class=\"line\">   assembly&#123;</span><br><span class=\"line\">        <span class=\"comment\">// move pointer to free memory spot</span></span><br><span class=\"line\">        <span class=\"comment\">// 可用内存为64个字节；也就是(0x40)</span></span><br><span class=\"line\">        <span class=\"comment\">// 移动内存指针到这里</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> ptr := mload(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">        <span class=\"comment\">// put function sig at memory spot</span></span><br><span class=\"line\">        <span class=\"comment\">// 将函数签名载入到这里</span></span><br><span class=\"line\">        mstore(ptr,sig)</span><br><span class=\"line\">        <span class=\"comment\">// append argument after function sig</span></span><br><span class=\"line\">        mstore(add(ptr,<span class=\"number\">0x04</span>), _val)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 函数签名为4字节(0x04), 参数是32字节(0x20)</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以总共为36字节(0x24)</span></span><br><span class=\"line\">        <span class=\"comment\">//输出为32字节(0x20)</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> result := call(</span><br><span class=\"line\">          <span class=\"number\">15000</span>, <span class=\"comment\">// gas limit</span></span><br><span class=\"line\">          sload(dc_slot),  <span class=\"comment\">// to addr. append var to _slot to access storage variable</span></span><br><span class=\"line\">          <span class=\"number\">0</span>, <span class=\"comment\">// not transfer any ether</span></span><br><span class=\"line\">          ptr, <span class=\"comment\">// Inputs are stored at location ptr</span></span><br><span class=\"line\">          <span class=\"number\">0x24</span>, <span class=\"comment\">// Inputs are 36 bytes long</span></span><br><span class=\"line\">          ptr,  <span class=\"comment\">//Store output over input</span></span><br><span class=\"line\">          <span class=\"number\">0x20</span>) <span class=\"comment\">//Outputs are 32 bytes long</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//执行失败，则进行回滚操作</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> eq(result, <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            revert(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 赋值返回给answer</span></span><br><span class=\"line\">        answer := mload(ptr) <span class=\"comment\">// Assign output to answer var</span></span><br><span class=\"line\">        mstore(<span class=\"number\">0x40</span>,add(ptr,<span class=\"number\">0x24</span>)) <span class=\"comment\">// Set storage pointer to new space</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"solidity合约相互调用\"><a href=\"#solidity合约相互调用\" class=\"headerlink\" title=\"solidity合约相互调用\"></a>solidity合约相互调用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.4</span><span class=\"number\">.18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Deployed&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setA</span>(<span class=\"params\">uint</span>) <span class=\"title\">public</span> <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) <span class=\"title\">public</span> <span class=\"title\">pure</span> <span class=\"title\">returns</span>(<span class=\"params\">uint</span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Existing&#123;</span><br><span class=\"line\">    Deployed dc;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Existing</span>(<span class=\"params\">address _t</span>) <span class=\"title\">public</span></span>&#123;</span><br><span class=\"line\">        dc = Deployed(_t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getA</span>(<span class=\"params\"></span>) <span class=\"title\">public</span> <span class=\"title\">view</span> <span class=\"title\">returns</span>(<span class=\"params\">uint result</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dc.a();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setA</span>(<span class=\"params\">uint _val</span>) <span class=\"title\">public</span> <span class=\"title\">returns</span>(<span class=\"params\">uint result</span>)</span>&#123;</span><br><span class=\"line\">        dc.setA(_val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* We do not need the full implementation of the “Deployed” contract</span></span><br><span class=\"line\"><span class=\"comment\">* but rather just the function signatures as required by the ABI.</span></span><br><span class=\"line\"><span class=\"comment\">* Since we have the address of the \"Deployed\" contract,</span></span><br><span class=\"line\"><span class=\"comment\">* we could initialised the “Existing” contract with  the address</span></span><br><span class=\"line\"><span class=\"comment\">* and interact with the \"Deployed\" contract using the existing setA and getA functions accordingly</span></span><br><span class=\"line\"><span class=\"comment\">* 简单的说：没有被调用合约的地址，我们无法初始化生成该合约(无法执行构造函数)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者这样，也是可以的</span></span><br><span class=\"line\"></span><br><span class=\"line\">contract ExistingWithoutABI&#123;</span><br><span class=\"line\">    address dc;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ExistingWithoutABI</span>(<span class=\"params\">address _t</span>) <span class=\"title\">public</span></span>&#123;</span><br><span class=\"line\">        dc = _t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * 因为调用(delegatecall)方法只是将值传递给合约的地址，不会获得任何返回值</span></span><br><span class=\"line\"><span class=\"comment\">    * 我们不知道调用是否成功了,除非我们调用底层的合约</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setA_Signature</span>(<span class=\"params\">uint _val</span>) <span class=\"title\">public</span> <span class=\"title\">returns</span>(<span class=\"params\">bool success</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//固定格式进行调用, 参数传递</span></span><br><span class=\"line\">    <span class=\"built_in\">require</span>(dc.call(bytes4(keccak256(<span class=\"string\">\"setA(uint256)\"</span>)), _val));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*  那我们有没有办法来获取函数的返回值呢，很不幸;</span></span><br><span class=\"line\"><span class=\"comment\">*  我们需要使用solidity汇编才能做到这一点</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">contract ExistingWithOutABIRt&#123;</span><br><span class=\"line\">address dc;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ExistingWithOutABIRt</span>(<span class=\"params\">address _t</span>) <span class=\"title\">public</span></span>&#123;</span><br><span class=\"line\">    dc = _t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setA_ASM</span>(<span class=\"params\">uint _val</span>) <span class=\"title\">public</span> <span class=\"title\">returns</span>(<span class=\"params\">uint answer</span>)</span>&#123;</span><br><span class=\"line\">   bytes4 sig = bytes4(keccak256(<span class=\"string\">\"setA(uint256)\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//汇编代码</span></span><br><span class=\"line\">   assembly&#123;</span><br><span class=\"line\">        <span class=\"comment\">// move pointer to free memory spot</span></span><br><span class=\"line\">        <span class=\"comment\">// 可用内存为64个字节；也就是(0x40)</span></span><br><span class=\"line\">        <span class=\"comment\">// 移动内存指针到这里</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> ptr := mload(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">        <span class=\"comment\">// put function sig at memory spot</span></span><br><span class=\"line\">        <span class=\"comment\">// 将函数签名载入到这里</span></span><br><span class=\"line\">        mstore(ptr,sig)</span><br><span class=\"line\">        <span class=\"comment\">// append argument after function sig</span></span><br><span class=\"line\">        mstore(add(ptr,<span class=\"number\">0x04</span>), _val)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 函数签名为4字节(0x04), 参数是32字节(0x20)</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以总共为36字节(0x24)</span></span><br><span class=\"line\">        <span class=\"comment\">//输出为32字节(0x20)</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> result := call(</span><br><span class=\"line\">          <span class=\"number\">15000</span>, <span class=\"comment\">// gas limit</span></span><br><span class=\"line\">          sload(dc_slot),  <span class=\"comment\">// to addr. append var to _slot to access storage variable</span></span><br><span class=\"line\">          <span class=\"number\">0</span>, <span class=\"comment\">// not transfer any ether</span></span><br><span class=\"line\">          ptr, <span class=\"comment\">// Inputs are stored at location ptr</span></span><br><span class=\"line\">          <span class=\"number\">0x24</span>, <span class=\"comment\">// Inputs are 36 bytes long</span></span><br><span class=\"line\">          ptr,  <span class=\"comment\">//Store output over input</span></span><br><span class=\"line\">          <span class=\"number\">0x20</span>) <span class=\"comment\">//Outputs are 32 bytes long</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//执行失败，则进行回滚操作</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> eq(result, <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            revert(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 赋值返回给answer</span></span><br><span class=\"line\">        answer := mload(ptr) <span class=\"comment\">// Assign output to answer var</span></span><br><span class=\"line\">        mstore(<span class=\"number\">0x40</span>,add(ptr,<span class=\"number\">0x24</span>)) <span class=\"comment\">// Set storage pointer to new space</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"pg","_content":"\n### pg概述\n\n- ReplicatedPG::do_request\n  |- ReplicatedPG::do_op  //仅仅分析请求类型为\"CEPH_MSG_OSD_OP\"\n        |- ReplicatedPG::find_object_context\n              |-ReplicatedPG::execute_ctx    |- ReplicatedPG::get_object_context\n                    |- ReplicatedPG::prepare_transaction\n                          |- ReplicatedPG::complete_read_ctx\n                          |- ReplicatedPG::start_async_reads\n                          |- ReplicatedPG::calc_trim_to\n                          |- ReplicatedPG::issue_repop  //向副本发送同步请求op\n                          |- ReplicatedPG::eval_repop   //检查发向各个副本的同步操作是否reply成功\n  ReplicatedPG::issue_repop\n    |-ReplicatedBackend::submit_transaction\n      |- ReplicatedBackend::issue_op               |- ReplicatedBackend::parent_transactions\n         |- OSDService::send_message_osd_cluster          |- ReplicatedPG::queue_transactions\n                                                              |- FileStore\n\n\n- acting set\n  pg对应副本所在的OSD列表，列表是有序的，第一个osd 为 primary. 在通常情况下，up set和acting set 相同\n\n- up set\n  假设:acting set [0, 1, 2], 此时osd.0故障，导致monitor重新分配pg的acting set为[3, 1, 2], 此时osd.3不能承载pg的读io，所以向monitor申请一个临时的pg的osd.1 为主osd来承载读写，此时acting set为[3, 1, 2], up set [1, 3, 2]; acting set 与 up set不一致;\n  当osd.3 backfill完成之后, up set, acting set 均为[3, 1, 2]\n \n- current interval && past_interval \n   在序列(interval)之内，pg的acting set 和 up set不会变化; current是当前的序列，past则是上一个阶段的序列；\n\n- last_epoch_started:  pg peering完成之后的epoch\n- last_epoch_clean:  pg recovery完成，处于clean状态的epoch\n\n### PGBackend\nPGBackend定义了逻辑上处理IO和副本\n\n- 处理client 操作\n- 处理对象恢复\n- 处理对象访问\n- 处理scrub, deep-scrub, repair\n\n ```c++\n// osd/PGBackend.h\nclass PGBackend{\nprotected:\n  ObjectStore *store;\n  const coll_t coll;\n  ObjectStore::CollectionHandle &ch;\n\n//PGBackend 回调接口\npublic:\n  class Listener{\n  public:\n      // Recovery\n  ......\n    struct RecoveryHandle{\n        .....\n    }\n  }\n}\n\nstruct PG_SendMessageOnConn: public Context{\n  PGBackend::Listener *pg;\n  ...\n}\n\nstruct PG_RecoveryQueueAsync : public Context{\n  PGBackend::Listener *pg;\n  ...\n}\n ```\n\n### ReplicatedBackend(多副本后端)\n\n ```c++\n// osd/ReplicatedBackend.h\nclass ReplicatedBackend : public PGBackend{\n  // RPGHandle: replicated PG handle\n  struct RPGHandle : public PGBackend::RecoveryHandle{\n    map<pg_shard_t, vector<PushOp> pushes;\n    map<pg_shard_t, vector<PullOp> pulls;\n  }\n\n  class RPCReadPred : public IsPGReadablePredicate{\n\n  }\n\n  class RPCReadPred : public IsPGReadablePredicate{\n\n  }\n\nprivate:\n  struct PushInfo {\n    ......\n  };\n  map<hobject_t, map<pg_shard_t, PushInfo>, hobject_t::BitwiseComparator> pushing;\n\n  struct PullInfo{\n    ......\n  };\n\n  map<hobject_t, PullInfo, hobject_t::BitwiseComparator> pulling;\n\n}\n```\n\n```c++\n// osd/ReplicatedPG.h\n\nclass ReplicatedPG : public PG, public PGBackend::Listener{\n  friend class OSD;\n  .......\n\n\n}\n\n```c++\n//monitor向OSD端推送OSDMAP更新信息：\nOSD::_dispatch()\n  |- OSD::handle_osd_map()\n      |- OSD::consume_map()\n  |- PG::queue_null()\n      |- PG::queue_peering_event()\n          |- peering_queue.push_back(evt)   //CephPeeringEvtRef evt; 加入peering队列\n          |- osd->queue_for_peering(this)   //osd进行peering处理流程\n                  |- OSDService::queue_for_peering(PG *pg)\n                      |- peering_wq.queue(pg)     //ThreadPool::BatchWorkQueue<PG> &peering_wq;\n\n  OSD::_dispatch()函数是消息处理的路由函数，根据消息类型调用具体的处理函数。对于处理Monitor节点发送过来的OSDMap消息，则由handle_osd_map()函数进行处理。在handle_osd_map()函数中首先对OSDMap消息进行解析且得到OSDMap且保存，之后调用consume_map()做进一步处理。在consume_map()函数中遍历该OSD节点上已有的PGs且统计出primary/replicas/stray的数量，其次唤醒等待OSDMap的PGs，最后遍历当前OSD节点上所有PGs且调用PG::queue_null()函数将OSD节点上所有PGs添加到peering队列中。\n\n//线程池工作队列开始工作, 入口\nvoid PG::handle_peering_event(CephPeeringEvtRef evt, RecoveryCtx *rctx){\n  ...\n  recovery_state.handle_event(evt, rctx);\n}\n\nvoid handle_event(const boost::statechart::event_base &evt, RecoveryCtx *rctx)\n{\n  start_handle(rctx);\n  machine.process_event(evt);\n  end_handle();\n}\n\nvoid PG::RecoveryState::start_handle(RecoveryCtx *new_ctx){\n  ...\n}\n\nclass RecoveryState{\n  void start_handle(RecoveryCtx *new_ctx);\n  void end_handle();\n\nprivate:\n  class RecoveryMachine : public boost::statechart::state_machine<RecoveryMachine, Inital> {\n    RecoveryState *state;\n    ...\n  }\n}\n```\n\n\n```c++\nstruct C_OnMapCommit : public Context{\n  OSD *osd;\n  epoch_t first, last;\n  MOSDMap *msg;\n  C_OnMapCommit(OSD *o, epoch_t f, epoch_t l, MOSDMap *m)\n    : osd(o), first(f), last(l), msg(m) { }\n  void finish(int r){\n    osd -> _committed_osd_maps(first, last, msg) ;\n  }\n}\n\n/*\n * Context - abstract callback class\n */\n class Context{\n   Context(const Context& other);\n   const Context& operator=(const Context& other);\n  protected:\n    virtual void finish(int r) = 0;\n  public:\n    Context() {}\n    virtual ~Context() {}\n    virtual void complete(int r){\n      finish(r);\n      delete this;\n    }\n };\n```\n\nObjectStore\n","source":"_posts/ceph_pg.md","raw":"---\n  title: pg\n---\n\n### pg概述\n\n- ReplicatedPG::do_request\n  |- ReplicatedPG::do_op  //仅仅分析请求类型为\"CEPH_MSG_OSD_OP\"\n        |- ReplicatedPG::find_object_context\n              |-ReplicatedPG::execute_ctx    |- ReplicatedPG::get_object_context\n                    |- ReplicatedPG::prepare_transaction\n                          |- ReplicatedPG::complete_read_ctx\n                          |- ReplicatedPG::start_async_reads\n                          |- ReplicatedPG::calc_trim_to\n                          |- ReplicatedPG::issue_repop  //向副本发送同步请求op\n                          |- ReplicatedPG::eval_repop   //检查发向各个副本的同步操作是否reply成功\n  ReplicatedPG::issue_repop\n    |-ReplicatedBackend::submit_transaction\n      |- ReplicatedBackend::issue_op               |- ReplicatedBackend::parent_transactions\n         |- OSDService::send_message_osd_cluster          |- ReplicatedPG::queue_transactions\n                                                              |- FileStore\n\n\n- acting set\n  pg对应副本所在的OSD列表，列表是有序的，第一个osd 为 primary. 在通常情况下，up set和acting set 相同\n\n- up set\n  假设:acting set [0, 1, 2], 此时osd.0故障，导致monitor重新分配pg的acting set为[3, 1, 2], 此时osd.3不能承载pg的读io，所以向monitor申请一个临时的pg的osd.1 为主osd来承载读写，此时acting set为[3, 1, 2], up set [1, 3, 2]; acting set 与 up set不一致;\n  当osd.3 backfill完成之后, up set, acting set 均为[3, 1, 2]\n \n- current interval && past_interval \n   在序列(interval)之内，pg的acting set 和 up set不会变化; current是当前的序列，past则是上一个阶段的序列；\n\n- last_epoch_started:  pg peering完成之后的epoch\n- last_epoch_clean:  pg recovery完成，处于clean状态的epoch\n\n### PGBackend\nPGBackend定义了逻辑上处理IO和副本\n\n- 处理client 操作\n- 处理对象恢复\n- 处理对象访问\n- 处理scrub, deep-scrub, repair\n\n ```c++\n// osd/PGBackend.h\nclass PGBackend{\nprotected:\n  ObjectStore *store;\n  const coll_t coll;\n  ObjectStore::CollectionHandle &ch;\n\n//PGBackend 回调接口\npublic:\n  class Listener{\n  public:\n      // Recovery\n  ......\n    struct RecoveryHandle{\n        .....\n    }\n  }\n}\n\nstruct PG_SendMessageOnConn: public Context{\n  PGBackend::Listener *pg;\n  ...\n}\n\nstruct PG_RecoveryQueueAsync : public Context{\n  PGBackend::Listener *pg;\n  ...\n}\n ```\n\n### ReplicatedBackend(多副本后端)\n\n ```c++\n// osd/ReplicatedBackend.h\nclass ReplicatedBackend : public PGBackend{\n  // RPGHandle: replicated PG handle\n  struct RPGHandle : public PGBackend::RecoveryHandle{\n    map<pg_shard_t, vector<PushOp> pushes;\n    map<pg_shard_t, vector<PullOp> pulls;\n  }\n\n  class RPCReadPred : public IsPGReadablePredicate{\n\n  }\n\n  class RPCReadPred : public IsPGReadablePredicate{\n\n  }\n\nprivate:\n  struct PushInfo {\n    ......\n  };\n  map<hobject_t, map<pg_shard_t, PushInfo>, hobject_t::BitwiseComparator> pushing;\n\n  struct PullInfo{\n    ......\n  };\n\n  map<hobject_t, PullInfo, hobject_t::BitwiseComparator> pulling;\n\n}\n```\n\n```c++\n// osd/ReplicatedPG.h\n\nclass ReplicatedPG : public PG, public PGBackend::Listener{\n  friend class OSD;\n  .......\n\n\n}\n\n```c++\n//monitor向OSD端推送OSDMAP更新信息：\nOSD::_dispatch()\n  |- OSD::handle_osd_map()\n      |- OSD::consume_map()\n  |- PG::queue_null()\n      |- PG::queue_peering_event()\n          |- peering_queue.push_back(evt)   //CephPeeringEvtRef evt; 加入peering队列\n          |- osd->queue_for_peering(this)   //osd进行peering处理流程\n                  |- OSDService::queue_for_peering(PG *pg)\n                      |- peering_wq.queue(pg)     //ThreadPool::BatchWorkQueue<PG> &peering_wq;\n\n  OSD::_dispatch()函数是消息处理的路由函数，根据消息类型调用具体的处理函数。对于处理Monitor节点发送过来的OSDMap消息，则由handle_osd_map()函数进行处理。在handle_osd_map()函数中首先对OSDMap消息进行解析且得到OSDMap且保存，之后调用consume_map()做进一步处理。在consume_map()函数中遍历该OSD节点上已有的PGs且统计出primary/replicas/stray的数量，其次唤醒等待OSDMap的PGs，最后遍历当前OSD节点上所有PGs且调用PG::queue_null()函数将OSD节点上所有PGs添加到peering队列中。\n\n//线程池工作队列开始工作, 入口\nvoid PG::handle_peering_event(CephPeeringEvtRef evt, RecoveryCtx *rctx){\n  ...\n  recovery_state.handle_event(evt, rctx);\n}\n\nvoid handle_event(const boost::statechart::event_base &evt, RecoveryCtx *rctx)\n{\n  start_handle(rctx);\n  machine.process_event(evt);\n  end_handle();\n}\n\nvoid PG::RecoveryState::start_handle(RecoveryCtx *new_ctx){\n  ...\n}\n\nclass RecoveryState{\n  void start_handle(RecoveryCtx *new_ctx);\n  void end_handle();\n\nprivate:\n  class RecoveryMachine : public boost::statechart::state_machine<RecoveryMachine, Inital> {\n    RecoveryState *state;\n    ...\n  }\n}\n```\n\n\n```c++\nstruct C_OnMapCommit : public Context{\n  OSD *osd;\n  epoch_t first, last;\n  MOSDMap *msg;\n  C_OnMapCommit(OSD *o, epoch_t f, epoch_t l, MOSDMap *m)\n    : osd(o), first(f), last(l), msg(m) { }\n  void finish(int r){\n    osd -> _committed_osd_maps(first, last, msg) ;\n  }\n}\n\n/*\n * Context - abstract callback class\n */\n class Context{\n   Context(const Context& other);\n   const Context& operator=(const Context& other);\n  protected:\n    virtual void finish(int r) = 0;\n  public:\n    Context() {}\n    virtual ~Context() {}\n    virtual void complete(int r){\n      finish(r);\n      delete this;\n    }\n };\n```\n\nObjectStore\n","slug":"ceph_pg","published":1,"date":"2018-09-21T07:16:42.223Z","updated":"2018-10-11T07:04:08.506Z","_id":"cjl25n9ql000014ha1u2c0bgx","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"pg概述\"><a href=\"#pg概述\" class=\"headerlink\" title=\"pg概述\"></a>pg概述</h3><ul>\n<li>ReplicatedPG::do_request<br>|- ReplicatedPG::do_op  //仅仅分析请求类型为”CEPH_MSG_OSD_OP”<pre><code>|- ReplicatedPG::find_object_context\n      |-ReplicatedPG::execute_ctx    |- ReplicatedPG::get_object_context\n            |- ReplicatedPG::prepare_transaction\n                  |- ReplicatedPG::complete_read_ctx\n                  |- ReplicatedPG::start_async_reads\n                  |- ReplicatedPG::calc_trim_to\n                  |- ReplicatedPG::issue_repop  //向副本发送同步请求op\n                  |- ReplicatedPG::eval_repop   //检查发向各个副本的同步操作是否reply成功\n</code></pre>ReplicatedPG::issue_repop<br>  |-ReplicatedBackend::submit_transaction<pre><code>|- ReplicatedBackend::issue_op               |- ReplicatedBackend::parent_transactions\n   |- OSDService::send_message_osd_cluster          |- ReplicatedPG::queue_transactions\n                                                        |- FileStore\n</code></pre></li>\n</ul>\n<ul>\n<li><p>acting set<br>pg对应副本所在的OSD列表，列表是有序的，第一个osd 为 primary. 在通常情况下，up set和acting set 相同</p>\n</li>\n<li><p>up set<br>假设:acting set [0, 1, 2], 此时osd.0故障，导致monitor重新分配pg的acting set为[3, 1, 2], 此时osd.3不能承载pg的读io，所以向monitor申请一个临时的pg的osd.1 为主osd来承载读写，此时acting set为[3, 1, 2], up set [1, 3, 2]; acting set 与 up set不一致;<br>当osd.3 backfill完成之后, up set, acting set 均为[3, 1, 2]</p>\n</li>\n<li><p>current interval &amp;&amp; past_interval<br> 在序列(interval)之内，pg的acting set 和 up set不会变化; current是当前的序列，past则是上一个阶段的序列；</p>\n</li>\n<li><p>last_epoch_started:  pg peering完成之后的epoch</p>\n</li>\n<li>last_epoch_clean:  pg recovery完成，处于clean状态的epoch</li>\n</ul>\n<h3 id=\"PGBackend\"><a href=\"#PGBackend\" class=\"headerlink\" title=\"PGBackend\"></a>PGBackend</h3><p>PGBackend定义了逻辑上处理IO和副本</p>\n<ul>\n<li>处理client 操作</li>\n<li>处理对象恢复</li>\n<li>处理对象访问</li>\n<li><p>处理scrub, deep-scrub, repair</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// osd/PGBackend.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PGBackend</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">  ObjectStore *store;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">coll_t</span> coll;</span><br><span class=\"line\">  ObjectStore::CollectionHandle &amp;ch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//PGBackend 回调接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Listener</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      <span class=\"comment\">// Recovery</span></span><br><span class=\"line\">  ......</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">RecoveryHandle</span>&#123;</span></span><br><span class=\"line\">        .....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PG_SendMessageOnConn</span>:</span> <span class=\"keyword\">public</span> Context&#123;</span><br><span class=\"line\">  PGBackend::Listener *pg;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PG_RecoveryQueueAsync</span> :</span> <span class=\"keyword\">public</span> Context&#123;</span><br><span class=\"line\">  PGBackend::Listener *pg;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"ReplicatedBackend-多副本后端\"><a href=\"#ReplicatedBackend-多副本后端\" class=\"headerlink\" title=\"ReplicatedBackend(多副本后端)\"></a>ReplicatedBackend(多副本后端)</h3> <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// osd/ReplicatedBackend.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReplicatedBackend</span> :</span> <span class=\"keyword\">public</span> PGBackend&#123;</span><br><span class=\"line\">  <span class=\"comment\">// RPGHandle: replicated PG handle</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">RPGHandle</span> :</span> <span class=\"keyword\">public</span> PGBackend::RecoveryHandle&#123;</span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">pg_shard_t</span>, <span class=\"built_in\">vector</span>&lt;PushOp&gt; pushes;</span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">pg_shard_t</span>, <span class=\"built_in\">vector</span>&lt;PullOp&gt; pulls;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  class RPCReadPred : <span class=\"keyword\">public</span> IsPGReadablePredicate&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  class RPCReadPred : <span class=\"keyword\">public</span> IsPGReadablePredicate&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  struct PushInfo &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">hobject_t</span>, <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">pg_shard_t</span>, PushInfo&gt;, <span class=\"keyword\">hobject_t</span>::BitwiseComparator&gt; pushing;</span><br><span class=\"line\"></span><br><span class=\"line\">  struct PullInfo&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">hobject_t</span>, PullInfo, <span class=\"keyword\">hobject_t</span>::BitwiseComparator&gt; pulling;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// osd/ReplicatedPG.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReplicatedPG</span> :</span> <span class=\"keyword\">public</span> PG, <span class=\"keyword\">public</span> PGBackend::Listener&#123;</span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OSD</span>;</span></span><br><span class=\"line\">  .......</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">```c++</span><br><span class=\"line\"><span class=\"comment\">//monitor向OSD端推送OSDMAP更新信息：</span></span><br><span class=\"line\">OSD::_dispatch()</span><br><span class=\"line\">  |- OSD::handle_osd_map()</span><br><span class=\"line\">      |- OSD::consume_map()</span><br><span class=\"line\">  |- PG::queue_null()</span><br><span class=\"line\">      |- PG::queue_peering_event()</span><br><span class=\"line\">          |- peering_queue.push_back(evt)   <span class=\"comment\">//CephPeeringEvtRef evt; 加入peering队列</span></span><br><span class=\"line\">          |- osd-&gt;queue_for_peering(<span class=\"keyword\">this</span>)   <span class=\"comment\">//osd进行peering处理流程</span></span><br><span class=\"line\">                  |- OSDService::queue_for_peering(PG *pg)</span><br><span class=\"line\">                      |- peering_wq.<span class=\"built_in\">queue</span>(pg)     <span class=\"comment\">//ThreadPool::BatchWorkQueue&lt;PG&gt; &amp;peering_wq;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  OSD::_dispatch()函数是消息处理的路由函数，根据消息类型调用具体的处理函数。对于处理Monitor节点发送过来的OSDMap消息，则由handle_osd_map()函数进行处理。在handle_osd_map()函数中首先对OSDMap消息进行解析且得到OSDMap且保存，之后调用consume_map()做进一步处理。在consume_map()函数中遍历该OSD节点上已有的PGs且统计出primary/replicas/stray的数量，其次唤醒等待OSDMap的PGs，最后遍历当前OSD节点上所有PGs且调用PG::queue_null()函数将OSD节点上所有PGs添加到peering队列中。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//线程池工作队列开始工作, 入口</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> PG::handle_peering_event(CephPeeringEvtRef evt, RecoveryCtx *rctx)&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  recovery_state.handle_event(evt, rctx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handle_event</span><span class=\"params\">(<span class=\"keyword\">const</span> boost::statechart::event_base &amp;evt, RecoveryCtx *rctx)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  start_handle(rctx);</span><br><span class=\"line\">  machine.process_event(evt);</span><br><span class=\"line\">  end_handle();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> PG::RecoveryState::start_handle(RecoveryCtx *new_ctx)&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecoveryState</span>&#123;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">start_handle</span><span class=\"params\">(RecoveryCtx *new_ctx)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">end_handle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecoveryMachine</span> :</span> <span class=\"keyword\">public</span> boost::statechart::state_machine&lt;RecoveryMachine, Inital&gt; &#123;</span><br><span class=\"line\">    RecoveryState *state;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">C_OnMapCommit</span> :</span> <span class=\"keyword\">public</span> Context&#123;</span><br><span class=\"line\">  OSD *osd;</span><br><span class=\"line\">  <span class=\"keyword\">epoch_t</span> first, last;</span><br><span class=\"line\">  MOSDMap *msg;</span><br><span class=\"line\">  C_OnMapCommit(OSD *o, <span class=\"keyword\">epoch_t</span> f, <span class=\"keyword\">epoch_t</span> l, MOSDMap *m)</span><br><span class=\"line\">    : osd(o), first(f), last(l), msg(m) &#123; &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">finish</span><span class=\"params\">(<span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    osd -&gt; _committed_osd_maps(first, last, msg) ;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Context - abstract callback class</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span>&#123;</span></span><br><span class=\"line\">   Context(<span class=\"keyword\">const</span> Context&amp; other);</span><br><span class=\"line\">   <span class=\"keyword\">const</span> Context&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Context&amp; other);</span><br><span class=\"line\">  <span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">finish</span><span class=\"params\">(<span class=\"keyword\">int</span> r)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Context() &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~Context() &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">complete</span><span class=\"params\">(<span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">      finish(r);</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>ObjectStore</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"pg概述\"><a href=\"#pg概述\" class=\"headerlink\" title=\"pg概述\"></a>pg概述</h3><ul>\n<li>ReplicatedPG::do_request<br>|- ReplicatedPG::do_op  //仅仅分析请求类型为”CEPH_MSG_OSD_OP”<pre><code>|- ReplicatedPG::find_object_context\n      |-ReplicatedPG::execute_ctx    |- ReplicatedPG::get_object_context\n            |- ReplicatedPG::prepare_transaction\n                  |- ReplicatedPG::complete_read_ctx\n                  |- ReplicatedPG::start_async_reads\n                  |- ReplicatedPG::calc_trim_to\n                  |- ReplicatedPG::issue_repop  //向副本发送同步请求op\n                  |- ReplicatedPG::eval_repop   //检查发向各个副本的同步操作是否reply成功\n</code></pre>ReplicatedPG::issue_repop<br>  |-ReplicatedBackend::submit_transaction<pre><code>|- ReplicatedBackend::issue_op               |- ReplicatedBackend::parent_transactions\n   |- OSDService::send_message_osd_cluster          |- ReplicatedPG::queue_transactions\n                                                        |- FileStore\n</code></pre></li>\n</ul>\n<ul>\n<li><p>acting set<br>pg对应副本所在的OSD列表，列表是有序的，第一个osd 为 primary. 在通常情况下，up set和acting set 相同</p>\n</li>\n<li><p>up set<br>假设:acting set [0, 1, 2], 此时osd.0故障，导致monitor重新分配pg的acting set为[3, 1, 2], 此时osd.3不能承载pg的读io，所以向monitor申请一个临时的pg的osd.1 为主osd来承载读写，此时acting set为[3, 1, 2], up set [1, 3, 2]; acting set 与 up set不一致;<br>当osd.3 backfill完成之后, up set, acting set 均为[3, 1, 2]</p>\n</li>\n<li><p>current interval &amp;&amp; past_interval<br> 在序列(interval)之内，pg的acting set 和 up set不会变化; current是当前的序列，past则是上一个阶段的序列；</p>\n</li>\n<li><p>last_epoch_started:  pg peering完成之后的epoch</p>\n</li>\n<li>last_epoch_clean:  pg recovery完成，处于clean状态的epoch</li>\n</ul>\n<h3 id=\"PGBackend\"><a href=\"#PGBackend\" class=\"headerlink\" title=\"PGBackend\"></a>PGBackend</h3><p>PGBackend定义了逻辑上处理IO和副本</p>\n<ul>\n<li>处理client 操作</li>\n<li>处理对象恢复</li>\n<li>处理对象访问</li>\n<li><p>处理scrub, deep-scrub, repair</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// osd/PGBackend.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PGBackend</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">  ObjectStore *store;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">coll_t</span> coll;</span><br><span class=\"line\">  ObjectStore::CollectionHandle &amp;ch;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//PGBackend 回调接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Listener</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      <span class=\"comment\">// Recovery</span></span><br><span class=\"line\">  ......</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">RecoveryHandle</span>&#123;</span></span><br><span class=\"line\">        .....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PG_SendMessageOnConn</span>:</span> <span class=\"keyword\">public</span> Context&#123;</span><br><span class=\"line\">  PGBackend::Listener *pg;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PG_RecoveryQueueAsync</span> :</span> <span class=\"keyword\">public</span> Context&#123;</span><br><span class=\"line\">  PGBackend::Listener *pg;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"ReplicatedBackend-多副本后端\"><a href=\"#ReplicatedBackend-多副本后端\" class=\"headerlink\" title=\"ReplicatedBackend(多副本后端)\"></a>ReplicatedBackend(多副本后端)</h3> <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// osd/ReplicatedBackend.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReplicatedBackend</span> :</span> <span class=\"keyword\">public</span> PGBackend&#123;</span><br><span class=\"line\">  <span class=\"comment\">// RPGHandle: replicated PG handle</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">RPGHandle</span> :</span> <span class=\"keyword\">public</span> PGBackend::RecoveryHandle&#123;</span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">pg_shard_t</span>, <span class=\"built_in\">vector</span>&lt;PushOp&gt; pushes;</span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">pg_shard_t</span>, <span class=\"built_in\">vector</span>&lt;PullOp&gt; pulls;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  class RPCReadPred : <span class=\"keyword\">public</span> IsPGReadablePredicate&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  class RPCReadPred : <span class=\"keyword\">public</span> IsPGReadablePredicate&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  struct PushInfo &#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">hobject_t</span>, <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">pg_shard_t</span>, PushInfo&gt;, <span class=\"keyword\">hobject_t</span>::BitwiseComparator&gt; pushing;</span><br><span class=\"line\"></span><br><span class=\"line\">  struct PullInfo&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">hobject_t</span>, PullInfo, <span class=\"keyword\">hobject_t</span>::BitwiseComparator&gt; pulling;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// osd/ReplicatedPG.h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReplicatedPG</span> :</span> <span class=\"keyword\">public</span> PG, <span class=\"keyword\">public</span> PGBackend::Listener&#123;</span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OSD</span>;</span></span><br><span class=\"line\">  .......</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">```c++</span><br><span class=\"line\"><span class=\"comment\">//monitor向OSD端推送OSDMAP更新信息：</span></span><br><span class=\"line\">OSD::_dispatch()</span><br><span class=\"line\">  |- OSD::handle_osd_map()</span><br><span class=\"line\">      |- OSD::consume_map()</span><br><span class=\"line\">  |- PG::queue_null()</span><br><span class=\"line\">      |- PG::queue_peering_event()</span><br><span class=\"line\">          |- peering_queue.push_back(evt)   <span class=\"comment\">//CephPeeringEvtRef evt; 加入peering队列</span></span><br><span class=\"line\">          |- osd-&gt;queue_for_peering(<span class=\"keyword\">this</span>)   <span class=\"comment\">//osd进行peering处理流程</span></span><br><span class=\"line\">                  |- OSDService::queue_for_peering(PG *pg)</span><br><span class=\"line\">                      |- peering_wq.<span class=\"built_in\">queue</span>(pg)     <span class=\"comment\">//ThreadPool::BatchWorkQueue&lt;PG&gt; &amp;peering_wq;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  OSD::_dispatch()函数是消息处理的路由函数，根据消息类型调用具体的处理函数。对于处理Monitor节点发送过来的OSDMap消息，则由handle_osd_map()函数进行处理。在handle_osd_map()函数中首先对OSDMap消息进行解析且得到OSDMap且保存，之后调用consume_map()做进一步处理。在consume_map()函数中遍历该OSD节点上已有的PGs且统计出primary/replicas/stray的数量，其次唤醒等待OSDMap的PGs，最后遍历当前OSD节点上所有PGs且调用PG::queue_null()函数将OSD节点上所有PGs添加到peering队列中。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//线程池工作队列开始工作, 入口</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> PG::handle_peering_event(CephPeeringEvtRef evt, RecoveryCtx *rctx)&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  recovery_state.handle_event(evt, rctx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handle_event</span><span class=\"params\">(<span class=\"keyword\">const</span> boost::statechart::event_base &amp;evt, RecoveryCtx *rctx)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  start_handle(rctx);</span><br><span class=\"line\">  machine.process_event(evt);</span><br><span class=\"line\">  end_handle();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> PG::RecoveryState::start_handle(RecoveryCtx *new_ctx)&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecoveryState</span>&#123;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">start_handle</span><span class=\"params\">(RecoveryCtx *new_ctx)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">end_handle</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecoveryMachine</span> :</span> <span class=\"keyword\">public</span> boost::statechart::state_machine&lt;RecoveryMachine, Inital&gt; &#123;</span><br><span class=\"line\">    RecoveryState *state;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">C_OnMapCommit</span> :</span> <span class=\"keyword\">public</span> Context&#123;</span><br><span class=\"line\">  OSD *osd;</span><br><span class=\"line\">  <span class=\"keyword\">epoch_t</span> first, last;</span><br><span class=\"line\">  MOSDMap *msg;</span><br><span class=\"line\">  C_OnMapCommit(OSD *o, <span class=\"keyword\">epoch_t</span> f, <span class=\"keyword\">epoch_t</span> l, MOSDMap *m)</span><br><span class=\"line\">    : osd(o), first(f), last(l), msg(m) &#123; &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">finish</span><span class=\"params\">(<span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">    osd -&gt; _committed_osd_maps(first, last, msg) ;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Context - abstract callback class</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span>&#123;</span></span><br><span class=\"line\">   Context(<span class=\"keyword\">const</span> Context&amp; other);</span><br><span class=\"line\">   <span class=\"keyword\">const</span> Context&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> Context&amp; other);</span><br><span class=\"line\">  <span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">finish</span><span class=\"params\">(<span class=\"keyword\">int</span> r)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Context() &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~Context() &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">complete</span><span class=\"params\">(<span class=\"keyword\">int</span> r)</span></span>&#123;</span><br><span class=\"line\">      finish(r);</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure>\n<p>ObjectStore</p>\n"},{"title":"ceph_rbd_snap","_content":"\n对克隆块的写操作流程：//从这里明白多重克隆降低性能\n\n- 客户端（librbd）向对应的OSD发送正常的写请求；\n- OSD返回客户端(librbd)应答，表明该OSD上对应的对象不存在；\n- 客户端(librbd)发送读请求给克隆块的父块，读取对应snap1上的数据返回给客户端；\n- 客户端(librbd)把该快照数据写入克隆image中；\n- 客户端(librbd)把克隆image发送写操作，写入实际数据；\n\n由以上过程可知，克隆的拷贝操作由客户端控制完成，OSD 端是无感知的；\n\n### snap核心数据结构：\n\n- head object：对象的原始对象，可读、可写\n- snap object: 对某个对象做快照后，通过cow机制copy出来的快照对象只能读，不能写；\n- snap_seq: 快照序号，每次做快照，系统分配一个相应快照序号，主要是应用于写操作；\n- sanpdir object：当head对象被删除后，仍然有 snap 和 clone 对象，系统自动创建一个snapdir对象来保存SnapSet信息。head对象和snapdir对象只能存在一个，其属性保存了快照的相关信息；\n\n\n```c++\n//common/snap_types.h\n  struct SnapContext{\n    snapid_t seq;   //最新的快照序号\n    vector<snapid_t> snaps; //当前存在的快照序号，降序排列\n    ...\n  }\n```\nSnapContext在客户端(librbd)保存了snap相关信息, 该结构 持久化存储在RBD的元数据中；\n而用户写操作必须自己提供SnapContext信息；\n\n```c++\nstruct librados::IoCtxImpl{\n  ...\n  snapid_t snap_seq;\n  ::SnapContext snapc;\n  ...\n}\n```\n在librados::IoCtxImpl里，当打开一个image时候，需要读取块的元数据去构建该结构（初始化一下），\n如果打开的是卷的快照，那么snap_seq的值就是该snap对应的快照序号，\n否则snap_seq就为CEPH_NOSNAP(-2),表示操作的不是快照，而是卷本身；\n\nSnapSet用于保存Server端（OSD）与快照相关的信息：\n```c++\nstruct SnapSet{\n  snapid_t seq;     //最新的快照序号\n  bool head_exists;\n  vector<snapid_t> snaps;   //所有的快照序号列表（降序排列）\n  vector<snapid_t> clones;  //所有的clone对象序号列表 （升序排列）\n  map<snapid_t, interval_set<uint64_t> > clone_overlap;\n  map<snapid_t, uint64> clone_size;\n}\n```\n\nclone_overlap: 保存本次clone对象和上次clone对象（有可能是head对象）的overlap（重叠）的部分。\nclone操作后，每次写操作，都要维护这个信息； 这个信息用于数据恢复阶段对象恢复的优化；\n\n在Head对象的xattr中保存key为snapset， value为SnapSet结构序列化后的值；\n在Sanp对象的xattr中保存key为user.cephos.seq的snap_seq值；\n\n### RBD快照创建\n\n- 向Monitor发送请求，获取一个最新的快照序号snap_seq的值；\n- 把该次快照的snap_name和snap_seq的值保存到RBD的元数据中；\n在RBD的元数据里保存了所有快照的名字和对应的snap_seq号，并不会触发OSD端的数据操作，所以很快；\n\n\n### 快照的写操作\n\n  客户端的每次写操作，消息中必须带数据结构SnapContext信息，包含了客户端认为的最新快照序列号seq, 以及该对象的所有序号snaps的列表。\n在OSD端，对象的Snap相关信息则在SnapSet数据结构中，当有写操作时，处理过程按照如下规则进行：\n\n- 情景一： librbd(SnapContext)的seq < OSD(SnapSet)的seq：</br>\n  直接返回-EOLDSNAP错误;   <br>\n  一般而言，客户端（librbd）始终保持最新的快照序号；如果客户端不是最新的快照序号，则可能是：\n\n    - 多个客户端情况下，其他客户端创建了快照，本客户端没有获取到最新的快照序号\n  原理：Ceph rbd有一套Watcher回调通知机制来实现快照序号的更新，如果其他客户端对一个卷作了快照，会产生了一个最新的快照序号。OSD端接收到最新快照序号变化后，通知相应的连接客户端更新最新的快照序号。如果客户端没有及时更新，也没有太大问题，OSD端会返回客户端-EOLDSNAP，客户端会主动更新为最新的快照序号，重新发起写操作；\n\n- 情景二：如果head对象不存在，创建该对象并写入数据，用SnapContext相应的信息更新SnapSet的信息；\n- 情景三：如果librbd的seq = OSD的seq：做正常的读写\n- 情景四：librbd的seq > OSD的seq：<br>\n    - 对当前head对象做copy操作，clone出一个新的快照对象，该快照对象的snap序号为最新的序号，并把clone操作记录在clones列表里；也就是把最新的快照序号加入到clones列表里；\n    - 用SnapContext的 seq 和 snaps 值更新SnapSet的seq 和 snaps值；\n    - 写入最新的数据到head对象中；\n\n```c++\n//注释：捕获与正在进行的读写相关联的所有对象状态。\n// osd/ReplicatedPG.h\nstruct OpContext{\n  OpRequestRef op;\n  osd_reqid_t reqid;\n  vector<OSDOp> &ops;\n\n  const ObjectState *obs;   //old ObjectState\n  const SnapSet *snapset;   //old snapset, OSD端保存的快照信息\n\n  SnapContext snapc;           // writer snap context， 写操作自带的，也就是librbd的SnapContext信息；\n  ObjectState new_obs;  //resulting ObjectState 新的SnapSet\n  SnapSet     new_snapset;  //resulting SnapSet(in case of a write)\n  object_stat_sum_t delta_stats;\n\n  bool modify;          // (force) modification (even if op_t is empty)\n  bool user_modify;     // user-visible modification\n  bool undirty;         // user explicitly un-dirtying this object\n  bool cache_evict;     ///< true if this is a cache eviction\n  bool ignore_cache;    ///< true if IGNORE_CACHE flag is set\n  bool ignore_log_op_stats;  // don't log op stats\n\n  // side effects\n  list<pair<watch_info_t,bool> > watch_connects; ///< new watch + will_ping flag\n  list<watch_disconnect_t> watch_disconnects; ///< old watch + send_discon\n  list<notify_info_t> notifies;\n  struct NotifyAck {\n    boost::optional<uint64_t> watch_cookie;\n    uint64_t notify_id;\n    bufferlist reply_bl;\n    explicit NotifyAck(uint64_t notify_id) : notify_id(notify_id) {}\n    NotifyAck(uint64_t notify_id, uint64_t cookie, bufferlist& rbl)\n  : watch_cookie(cookie), notify_id(notify_id) {\n  reply_bl.claim(rbl);\n    }\n  };\n  list<NotifyAck> notify_acks;\n\n  uint64_t bytes_written, bytes_read;\n\n  utime_t mtime;\n\n  eversion_t at_version;       // pg's current version pointer\n  version_t user_at_version;   // pg's current user version pointer\n\n  int current_osd_subop_num;\n\n  PGBackend::PGTransactionUPtr op_t;\n  vector<pg_log_entry_t> log;\n  boost::optional<pg_hit_set_history_t> updated_hset_history;\n\n  interval_set<uint64_t> modified_ranges;\n  ObjectContextRef obc;\n  map<hobject_t,ObjectContextRef, hobject_t::BitwiseComparator> src_obc;\n  ObjectContextRef clone_obc;    // if we created a clone\n  ObjectContextRef snapset_obc;  // if we created/deleted a snapdir\n\n  int data_off;        // FIXME: we may want to kill this msgr hint off at some point!\n\n  MOSDOpReply *reply;\n  utime_t readable_stamp;  // when applied on all replicas\n  ReplicatedPG *pg;\n\n  int num_read;    ///< count read ops\n  int num_write;   ///< count update ops\n\n  vector<pair<osd_reqid_t, version_t> > extra_reqids;\n\n  CopyFromCallback *copy_cb;\n\n  hobject_t new_temp_oid, discard_temp_oid;  ///< temp objects we should start/stop tracking\n\n  // pending xattr updates\n  map<ObjectContextRef,\n  map<string, boost::optional<bufferlist> > > pending_attrs;\n\n  list<std::function<void()>> on_applied;\n  list<std::function<void()>> on_committed;\n  list<std::function<void()>> on_finish;\n  list<std::function<void()>> on_success;\n  bool sent_ack;\n  bool sent_disk;\n  ......\n}\n```\n- OSD端的写操作流程中， ReplicatedPG::execute_ctx中，把客户端消息中的SnapContext信息保存在OpContext的snapc中：\n\n```c++\nctx->snapc.seq = m->get_snap_seq();\nctx->snapc.snaps = m->get_snaps();\n```\n- 在ReplicatedPG::prepare_transaction里调用了函数ReplicatedPG::make_writeable来完成快照相关的操作：\n\n### 快照的读操作\n\n快照读取数据时，输入参数为RBd的名字和快照的名字，RBD客户端通过访问RBD的元数据，来获取快照对应的snap_id,也就是快照对应的snap_seq值；\n在OSD端，获取head对象保存的SnapSet数据结构，然后根据SnapSet中的snaps和clones值来计算快照所对应的正确的快照对象的ObjectContext；\n\n- clinet(librbd)对象快照oid.snap > osd 端快照序号 ssc->snapset.seq, 获取head对象就是该快照对应的时间数据对象。\n- 计算oid.snap首次大于ssc->snapset。clones列表中的克隆对象，就是oid对应的克隆对象；\n","source":"_posts/ceph_rbd_snap.md","raw":"---\n  title: ceph_rbd_snap\n---\n\n对克隆块的写操作流程：//从这里明白多重克隆降低性能\n\n- 客户端（librbd）向对应的OSD发送正常的写请求；\n- OSD返回客户端(librbd)应答，表明该OSD上对应的对象不存在；\n- 客户端(librbd)发送读请求给克隆块的父块，读取对应snap1上的数据返回给客户端；\n- 客户端(librbd)把该快照数据写入克隆image中；\n- 客户端(librbd)把克隆image发送写操作，写入实际数据；\n\n由以上过程可知，克隆的拷贝操作由客户端控制完成，OSD 端是无感知的；\n\n### snap核心数据结构：\n\n- head object：对象的原始对象，可读、可写\n- snap object: 对某个对象做快照后，通过cow机制copy出来的快照对象只能读，不能写；\n- snap_seq: 快照序号，每次做快照，系统分配一个相应快照序号，主要是应用于写操作；\n- sanpdir object：当head对象被删除后，仍然有 snap 和 clone 对象，系统自动创建一个snapdir对象来保存SnapSet信息。head对象和snapdir对象只能存在一个，其属性保存了快照的相关信息；\n\n\n```c++\n//common/snap_types.h\n  struct SnapContext{\n    snapid_t seq;   //最新的快照序号\n    vector<snapid_t> snaps; //当前存在的快照序号，降序排列\n    ...\n  }\n```\nSnapContext在客户端(librbd)保存了snap相关信息, 该结构 持久化存储在RBD的元数据中；\n而用户写操作必须自己提供SnapContext信息；\n\n```c++\nstruct librados::IoCtxImpl{\n  ...\n  snapid_t snap_seq;\n  ::SnapContext snapc;\n  ...\n}\n```\n在librados::IoCtxImpl里，当打开一个image时候，需要读取块的元数据去构建该结构（初始化一下），\n如果打开的是卷的快照，那么snap_seq的值就是该snap对应的快照序号，\n否则snap_seq就为CEPH_NOSNAP(-2),表示操作的不是快照，而是卷本身；\n\nSnapSet用于保存Server端（OSD）与快照相关的信息：\n```c++\nstruct SnapSet{\n  snapid_t seq;     //最新的快照序号\n  bool head_exists;\n  vector<snapid_t> snaps;   //所有的快照序号列表（降序排列）\n  vector<snapid_t> clones;  //所有的clone对象序号列表 （升序排列）\n  map<snapid_t, interval_set<uint64_t> > clone_overlap;\n  map<snapid_t, uint64> clone_size;\n}\n```\n\nclone_overlap: 保存本次clone对象和上次clone对象（有可能是head对象）的overlap（重叠）的部分。\nclone操作后，每次写操作，都要维护这个信息； 这个信息用于数据恢复阶段对象恢复的优化；\n\n在Head对象的xattr中保存key为snapset， value为SnapSet结构序列化后的值；\n在Sanp对象的xattr中保存key为user.cephos.seq的snap_seq值；\n\n### RBD快照创建\n\n- 向Monitor发送请求，获取一个最新的快照序号snap_seq的值；\n- 把该次快照的snap_name和snap_seq的值保存到RBD的元数据中；\n在RBD的元数据里保存了所有快照的名字和对应的snap_seq号，并不会触发OSD端的数据操作，所以很快；\n\n\n### 快照的写操作\n\n  客户端的每次写操作，消息中必须带数据结构SnapContext信息，包含了客户端认为的最新快照序列号seq, 以及该对象的所有序号snaps的列表。\n在OSD端，对象的Snap相关信息则在SnapSet数据结构中，当有写操作时，处理过程按照如下规则进行：\n\n- 情景一： librbd(SnapContext)的seq < OSD(SnapSet)的seq：</br>\n  直接返回-EOLDSNAP错误;   <br>\n  一般而言，客户端（librbd）始终保持最新的快照序号；如果客户端不是最新的快照序号，则可能是：\n\n    - 多个客户端情况下，其他客户端创建了快照，本客户端没有获取到最新的快照序号\n  原理：Ceph rbd有一套Watcher回调通知机制来实现快照序号的更新，如果其他客户端对一个卷作了快照，会产生了一个最新的快照序号。OSD端接收到最新快照序号变化后，通知相应的连接客户端更新最新的快照序号。如果客户端没有及时更新，也没有太大问题，OSD端会返回客户端-EOLDSNAP，客户端会主动更新为最新的快照序号，重新发起写操作；\n\n- 情景二：如果head对象不存在，创建该对象并写入数据，用SnapContext相应的信息更新SnapSet的信息；\n- 情景三：如果librbd的seq = OSD的seq：做正常的读写\n- 情景四：librbd的seq > OSD的seq：<br>\n    - 对当前head对象做copy操作，clone出一个新的快照对象，该快照对象的snap序号为最新的序号，并把clone操作记录在clones列表里；也就是把最新的快照序号加入到clones列表里；\n    - 用SnapContext的 seq 和 snaps 值更新SnapSet的seq 和 snaps值；\n    - 写入最新的数据到head对象中；\n\n```c++\n//注释：捕获与正在进行的读写相关联的所有对象状态。\n// osd/ReplicatedPG.h\nstruct OpContext{\n  OpRequestRef op;\n  osd_reqid_t reqid;\n  vector<OSDOp> &ops;\n\n  const ObjectState *obs;   //old ObjectState\n  const SnapSet *snapset;   //old snapset, OSD端保存的快照信息\n\n  SnapContext snapc;           // writer snap context， 写操作自带的，也就是librbd的SnapContext信息；\n  ObjectState new_obs;  //resulting ObjectState 新的SnapSet\n  SnapSet     new_snapset;  //resulting SnapSet(in case of a write)\n  object_stat_sum_t delta_stats;\n\n  bool modify;          // (force) modification (even if op_t is empty)\n  bool user_modify;     // user-visible modification\n  bool undirty;         // user explicitly un-dirtying this object\n  bool cache_evict;     ///< true if this is a cache eviction\n  bool ignore_cache;    ///< true if IGNORE_CACHE flag is set\n  bool ignore_log_op_stats;  // don't log op stats\n\n  // side effects\n  list<pair<watch_info_t,bool> > watch_connects; ///< new watch + will_ping flag\n  list<watch_disconnect_t> watch_disconnects; ///< old watch + send_discon\n  list<notify_info_t> notifies;\n  struct NotifyAck {\n    boost::optional<uint64_t> watch_cookie;\n    uint64_t notify_id;\n    bufferlist reply_bl;\n    explicit NotifyAck(uint64_t notify_id) : notify_id(notify_id) {}\n    NotifyAck(uint64_t notify_id, uint64_t cookie, bufferlist& rbl)\n  : watch_cookie(cookie), notify_id(notify_id) {\n  reply_bl.claim(rbl);\n    }\n  };\n  list<NotifyAck> notify_acks;\n\n  uint64_t bytes_written, bytes_read;\n\n  utime_t mtime;\n\n  eversion_t at_version;       // pg's current version pointer\n  version_t user_at_version;   // pg's current user version pointer\n\n  int current_osd_subop_num;\n\n  PGBackend::PGTransactionUPtr op_t;\n  vector<pg_log_entry_t> log;\n  boost::optional<pg_hit_set_history_t> updated_hset_history;\n\n  interval_set<uint64_t> modified_ranges;\n  ObjectContextRef obc;\n  map<hobject_t,ObjectContextRef, hobject_t::BitwiseComparator> src_obc;\n  ObjectContextRef clone_obc;    // if we created a clone\n  ObjectContextRef snapset_obc;  // if we created/deleted a snapdir\n\n  int data_off;        // FIXME: we may want to kill this msgr hint off at some point!\n\n  MOSDOpReply *reply;\n  utime_t readable_stamp;  // when applied on all replicas\n  ReplicatedPG *pg;\n\n  int num_read;    ///< count read ops\n  int num_write;   ///< count update ops\n\n  vector<pair<osd_reqid_t, version_t> > extra_reqids;\n\n  CopyFromCallback *copy_cb;\n\n  hobject_t new_temp_oid, discard_temp_oid;  ///< temp objects we should start/stop tracking\n\n  // pending xattr updates\n  map<ObjectContextRef,\n  map<string, boost::optional<bufferlist> > > pending_attrs;\n\n  list<std::function<void()>> on_applied;\n  list<std::function<void()>> on_committed;\n  list<std::function<void()>> on_finish;\n  list<std::function<void()>> on_success;\n  bool sent_ack;\n  bool sent_disk;\n  ......\n}\n```\n- OSD端的写操作流程中， ReplicatedPG::execute_ctx中，把客户端消息中的SnapContext信息保存在OpContext的snapc中：\n\n```c++\nctx->snapc.seq = m->get_snap_seq();\nctx->snapc.snaps = m->get_snaps();\n```\n- 在ReplicatedPG::prepare_transaction里调用了函数ReplicatedPG::make_writeable来完成快照相关的操作：\n\n### 快照的读操作\n\n快照读取数据时，输入参数为RBd的名字和快照的名字，RBD客户端通过访问RBD的元数据，来获取快照对应的snap_id,也就是快照对应的snap_seq值；\n在OSD端，获取head对象保存的SnapSet数据结构，然后根据SnapSet中的snaps和clones值来计算快照所对应的正确的快照对象的ObjectContext；\n\n- clinet(librbd)对象快照oid.snap > osd 端快照序号 ssc->snapset.seq, 获取head对象就是该快照对应的时间数据对象。\n- 计算oid.snap首次大于ssc->snapset。clones列表中的克隆对象，就是oid对应的克隆对象；\n","slug":"ceph_rbd_snap","published":1,"date":"2018-09-21T07:16:42.231Z","updated":"2018-09-21T07:16:42.237Z","_id":"cjl25n9qt000114havn5krktm","comments":1,"layout":"post","photos":[],"link":"","content":"<p>对克隆块的写操作流程：//从这里明白多重克隆降低性能</p>\n<ul>\n<li>客户端（librbd）向对应的OSD发送正常的写请求；</li>\n<li>OSD返回客户端(librbd)应答，表明该OSD上对应的对象不存在；</li>\n<li>客户端(librbd)发送读请求给克隆块的父块，读取对应snap1上的数据返回给客户端；</li>\n<li>客户端(librbd)把该快照数据写入克隆image中；</li>\n<li>客户端(librbd)把克隆image发送写操作，写入实际数据；</li>\n</ul>\n<p>由以上过程可知，克隆的拷贝操作由客户端控制完成，OSD 端是无感知的；</p>\n<h3 id=\"snap核心数据结构：\"><a href=\"#snap核心数据结构：\" class=\"headerlink\" title=\"snap核心数据结构：\"></a>snap核心数据结构：</h3><ul>\n<li>head object：对象的原始对象，可读、可写</li>\n<li>snap object: 对某个对象做快照后，通过cow机制copy出来的快照对象只能读，不能写；</li>\n<li>snap_seq: 快照序号，每次做快照，系统分配一个相应快照序号，主要是应用于写操作；</li>\n<li>sanpdir object：当head对象被删除后，仍然有 snap 和 clone 对象，系统自动创建一个snapdir对象来保存SnapSet信息。head对象和snapdir对象只能存在一个，其属性保存了快照的相关信息；</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//common/snap_types.h</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SnapContext</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">snapid_t</span> seq;   <span class=\"comment\">//最新的快照序号</span></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">snapid_t</span>&gt; snaps; <span class=\"comment\">//当前存在的快照序号，降序排列</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>SnapContext在客户端(librbd)保存了snap相关信息, 该结构 持久化存储在RBD的元数据中；<br>而用户写操作必须自己提供SnapContext信息；</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">librados</span>:</span>:IoCtxImpl&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">snapid_t</span> snap_seq;</span><br><span class=\"line\">  ::SnapContext snapc;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在librados::IoCtxImpl里，当打开一个image时候，需要读取块的元数据去构建该结构（初始化一下），<br>如果打开的是卷的快照，那么snap_seq的值就是该snap对应的快照序号，<br>否则snap_seq就为CEPH_NOSNAP(-2),表示操作的不是快照，而是卷本身；</p>\n<p>SnapSet用于保存Server端（OSD）与快照相关的信息：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SnapSet</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">snapid_t</span> seq;     <span class=\"comment\">//最新的快照序号</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> head_exists;</span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">snapid_t</span>&gt; snaps;   <span class=\"comment\">//所有的快照序号列表（降序排列）</span></span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">snapid_t</span>&gt; clones;  <span class=\"comment\">//所有的clone对象序号列表 （升序排列）</span></span><br><span class=\"line\">  <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">snapid_t</span>, interval_set&lt;<span class=\"keyword\">uint64_t</span>&gt; &gt; clone_overlap;</span><br><span class=\"line\">  <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">snapid_t</span>, uint64&gt; clone_size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>clone_overlap: 保存本次clone对象和上次clone对象（有可能是head对象）的overlap（重叠）的部分。<br>clone操作后，每次写操作，都要维护这个信息； 这个信息用于数据恢复阶段对象恢复的优化；</p>\n<p>在Head对象的xattr中保存key为snapset， value为SnapSet结构序列化后的值；<br>在Sanp对象的xattr中保存key为user.cephos.seq的snap_seq值；</p>\n<h3 id=\"RBD快照创建\"><a href=\"#RBD快照创建\" class=\"headerlink\" title=\"RBD快照创建\"></a>RBD快照创建</h3><ul>\n<li>向Monitor发送请求，获取一个最新的快照序号snap_seq的值；</li>\n<li>把该次快照的snap_name和snap_seq的值保存到RBD的元数据中；<br>在RBD的元数据里保存了所有快照的名字和对应的snap_seq号，并不会触发OSD端的数据操作，所以很快；</li>\n</ul>\n<h3 id=\"快照的写操作\"><a href=\"#快照的写操作\" class=\"headerlink\" title=\"快照的写操作\"></a>快照的写操作</h3><p>  客户端的每次写操作，消息中必须带数据结构SnapContext信息，包含了客户端认为的最新快照序列号seq, 以及该对象的所有序号snaps的列表。<br>在OSD端，对象的Snap相关信息则在SnapSet数据结构中，当有写操作时，处理过程按照如下规则进行：</p>\n<ul>\n<li><p>情景一： librbd(SnapContext)的seq &lt; OSD(SnapSet)的seq：<br><br>直接返回-EOLDSNAP错误;   <br><br>一般而言，客户端（librbd）始终保持最新的快照序号；如果客户端不是最新的快照序号，则可能是：</p>\n<ul>\n<li>多个客户端情况下，其他客户端创建了快照，本客户端没有获取到最新的快照序号<br>原理：Ceph rbd有一套Watcher回调通知机制来实现快照序号的更新，如果其他客户端对一个卷作了快照，会产生了一个最新的快照序号。OSD端接收到最新快照序号变化后，通知相应的连接客户端更新最新的快照序号。如果客户端没有及时更新，也没有太大问题，OSD端会返回客户端-EOLDSNAP，客户端会主动更新为最新的快照序号，重新发起写操作；</li>\n</ul>\n</li>\n<li><p>情景二：如果head对象不存在，创建该对象并写入数据，用SnapContext相应的信息更新SnapSet的信息；</p>\n</li>\n<li>情景三：如果librbd的seq = OSD的seq：做正常的读写</li>\n<li>情景四：librbd的seq &gt; OSD的seq：<br><ul>\n<li>对当前head对象做copy操作，clone出一个新的快照对象，该快照对象的snap序号为最新的序号，并把clone操作记录在clones列表里；也就是把最新的快照序号加入到clones列表里；</li>\n<li>用SnapContext的 seq 和 snaps 值更新SnapSet的seq 和 snaps值；</li>\n<li>写入最新的数据到head对象中；</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注释：捕获与正在进行的读写相关联的所有对象状态。</span></span><br><span class=\"line\"><span class=\"comment\">// osd/ReplicatedPG.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">OpContext</span>&#123;</span></span><br><span class=\"line\">  OpRequestRef op;</span><br><span class=\"line\">  <span class=\"keyword\">osd_reqid_t</span> reqid;</span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;OSDOp&gt; &amp;ops;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ObjectState *obs;   <span class=\"comment\">//old ObjectState</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> SnapSet *snapset;   <span class=\"comment\">//old snapset, OSD端保存的快照信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">  SnapContext snapc;           <span class=\"comment\">// writer snap context， 写操作自带的，也就是librbd的SnapContext信息；</span></span><br><span class=\"line\">  ObjectState new_obs;  <span class=\"comment\">//resulting ObjectState 新的SnapSet</span></span><br><span class=\"line\">  SnapSet     new_snapset;  <span class=\"comment\">//resulting SnapSet(in case of a write)</span></span><br><span class=\"line\">  <span class=\"keyword\">object_stat_sum_t</span> delta_stats;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> modify;          <span class=\"comment\">// (force) modification (even if op_t is empty)</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> user_modify;     <span class=\"comment\">// user-visible modification</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> undirty;         <span class=\"comment\">// user explicitly un-dirtying this object</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> cache_evict;     <span class=\"comment\">///&lt; true if this is a cache eviction</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> ignore_cache;    <span class=\"comment\">///&lt; true if IGNORE_CACHE flag is set</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> ignore_log_op_stats;  <span class=\"comment\">// don't log op stats</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// side effects</span></span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;pair&lt;<span class=\"keyword\">watch_info_t</span>,<span class=\"keyword\">bool</span>&gt; &gt; watch_connects; <span class=\"comment\">///&lt; new watch + will_ping flag</span></span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">watch_disconnect_t</span>&gt; watch_disconnects; <span class=\"comment\">///&lt; old watch + send_discon</span></span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">notify_info_t</span>&gt; notifies;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NotifyAck</span> &#123;</span></span><br><span class=\"line\">    boost::optional&lt;<span class=\"keyword\">uint64_t</span>&gt; watch_cookie;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> notify_id;</span><br><span class=\"line\">    bufferlist reply_bl;</span><br><span class=\"line\">    explicit NotifyAck(uint64_t notify_id) : notify_id(notify_id) &#123;&#125;</span><br><span class=\"line\">    NotifyAck(<span class=\"keyword\">uint64_t</span> notify_id, <span class=\"keyword\">uint64_t</span> cookie, bufferlist&amp; rbl)</span><br><span class=\"line\">  : watch_cookie(cookie), notify_id(notify_id) &#123;</span><br><span class=\"line\">  reply_bl.claim(rbl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;NotifyAck&gt; notify_acks;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint64_t</span> bytes_written, bytes_read;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">utime_t</span> mtime;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">eversion_t</span> at_version;       <span class=\"comment\">// pg's current version pointer</span></span><br><span class=\"line\">  <span class=\"keyword\">version_t</span> user_at_version;   <span class=\"comment\">// pg's current user version pointer</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> current_osd_subop_num;</span><br><span class=\"line\"></span><br><span class=\"line\">  PGBackend::PGTransactionUPtr <span class=\"keyword\">op_t</span>;</span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">pg_log_entry_t</span>&gt; <span class=\"built_in\">log</span>;</span><br><span class=\"line\">  boost::optional&lt;<span class=\"keyword\">pg_hit_set_history_t</span>&gt; updated_hset_history;</span><br><span class=\"line\"></span><br><span class=\"line\">  interval_set&lt;<span class=\"keyword\">uint64_t</span>&gt; modified_ranges;</span><br><span class=\"line\">  ObjectContextRef obc;</span><br><span class=\"line\">  <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">hobject_t</span>,ObjectContextRef, <span class=\"keyword\">hobject_t</span>::BitwiseComparator&gt; src_obc;</span><br><span class=\"line\">  ObjectContextRef clone_obc;    <span class=\"comment\">// if we created a clone</span></span><br><span class=\"line\">  ObjectContextRef snapset_obc;  <span class=\"comment\">// if we created/deleted a snapdir</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> data_off;        <span class=\"comment\">// <span class=\"doctag\">FIXME:</span> we may want to kill this msgr hint off at some point!</span></span><br><span class=\"line\"></span><br><span class=\"line\">  MOSDOpReply *reply;</span><br><span class=\"line\">  <span class=\"keyword\">utime_t</span> readable_stamp;  <span class=\"comment\">// when applied on all replicas</span></span><br><span class=\"line\">  ReplicatedPG *pg;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> num_read;    <span class=\"comment\">///&lt; count read ops</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> num_write;   <span class=\"comment\">///&lt; count update ops</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;pair&lt;<span class=\"keyword\">osd_reqid_t</span>, <span class=\"keyword\">version_t</span>&gt; &gt; extra_reqids;</span><br><span class=\"line\"></span><br><span class=\"line\">  CopyFromCallback *copy_cb;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">hobject_t</span> new_temp_oid, discard_temp_oid;  <span class=\"comment\">///&lt; temp objects we should start/stop tracking</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// pending xattr updates</span></span><br><span class=\"line\">  <span class=\"built_in\">map</span>&lt;ObjectContextRef,</span><br><span class=\"line\">  <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, boost::optional&lt;bufferlist&gt; &gt; &gt; pending_attrs;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;<span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">void</span>()&gt;&gt; on_applied;</span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;<span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">void</span>()&gt;&gt; on_committed;</span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;<span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">void</span>()&gt;&gt; on_finish;</span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;<span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">void</span>()&gt;&gt; on_success;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> sent_ack;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> sent_disk;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>OSD端的写操作流程中， ReplicatedPG::execute_ctx中，把客户端消息中的SnapContext信息保存在OpContext的snapc中：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx-&gt;snapc.seq = m-&gt;get_snap_seq();</span><br><span class=\"line\">ctx-&gt;snapc.snaps = m-&gt;get_snaps();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在ReplicatedPG::prepare_transaction里调用了函数ReplicatedPG::make_writeable来完成快照相关的操作：</li>\n</ul>\n<h3 id=\"快照的读操作\"><a href=\"#快照的读操作\" class=\"headerlink\" title=\"快照的读操作\"></a>快照的读操作</h3><p>快照读取数据时，输入参数为RBd的名字和快照的名字，RBD客户端通过访问RBD的元数据，来获取快照对应的snap_id,也就是快照对应的snap_seq值；<br>在OSD端，获取head对象保存的SnapSet数据结构，然后根据SnapSet中的snaps和clones值来计算快照所对应的正确的快照对象的ObjectContext；</p>\n<ul>\n<li>clinet(librbd)对象快照oid.snap &gt; osd 端快照序号 ssc-&gt;snapset.seq, 获取head对象就是该快照对应的时间数据对象。</li>\n<li>计算oid.snap首次大于ssc-&gt;snapset。clones列表中的克隆对象，就是oid对应的克隆对象；</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>对克隆块的写操作流程：//从这里明白多重克隆降低性能</p>\n<ul>\n<li>客户端（librbd）向对应的OSD发送正常的写请求；</li>\n<li>OSD返回客户端(librbd)应答，表明该OSD上对应的对象不存在；</li>\n<li>客户端(librbd)发送读请求给克隆块的父块，读取对应snap1上的数据返回给客户端；</li>\n<li>客户端(librbd)把该快照数据写入克隆image中；</li>\n<li>客户端(librbd)把克隆image发送写操作，写入实际数据；</li>\n</ul>\n<p>由以上过程可知，克隆的拷贝操作由客户端控制完成，OSD 端是无感知的；</p>\n<h3 id=\"snap核心数据结构：\"><a href=\"#snap核心数据结构：\" class=\"headerlink\" title=\"snap核心数据结构：\"></a>snap核心数据结构：</h3><ul>\n<li>head object：对象的原始对象，可读、可写</li>\n<li>snap object: 对某个对象做快照后，通过cow机制copy出来的快照对象只能读，不能写；</li>\n<li>snap_seq: 快照序号，每次做快照，系统分配一个相应快照序号，主要是应用于写操作；</li>\n<li>sanpdir object：当head对象被删除后，仍然有 snap 和 clone 对象，系统自动创建一个snapdir对象来保存SnapSet信息。head对象和snapdir对象只能存在一个，其属性保存了快照的相关信息；</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//common/snap_types.h</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SnapContext</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">snapid_t</span> seq;   <span class=\"comment\">//最新的快照序号</span></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">snapid_t</span>&gt; snaps; <span class=\"comment\">//当前存在的快照序号，降序排列</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>SnapContext在客户端(librbd)保存了snap相关信息, 该结构 持久化存储在RBD的元数据中；<br>而用户写操作必须自己提供SnapContext信息；</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">librados</span>:</span>:IoCtxImpl&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">snapid_t</span> snap_seq;</span><br><span class=\"line\">  ::SnapContext snapc;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在librados::IoCtxImpl里，当打开一个image时候，需要读取块的元数据去构建该结构（初始化一下），<br>如果打开的是卷的快照，那么snap_seq的值就是该snap对应的快照序号，<br>否则snap_seq就为CEPH_NOSNAP(-2),表示操作的不是快照，而是卷本身；</p>\n<p>SnapSet用于保存Server端（OSD）与快照相关的信息：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SnapSet</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">snapid_t</span> seq;     <span class=\"comment\">//最新的快照序号</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> head_exists;</span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">snapid_t</span>&gt; snaps;   <span class=\"comment\">//所有的快照序号列表（降序排列）</span></span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">snapid_t</span>&gt; clones;  <span class=\"comment\">//所有的clone对象序号列表 （升序排列）</span></span><br><span class=\"line\">  <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">snapid_t</span>, interval_set&lt;<span class=\"keyword\">uint64_t</span>&gt; &gt; clone_overlap;</span><br><span class=\"line\">  <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">snapid_t</span>, uint64&gt; clone_size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>clone_overlap: 保存本次clone对象和上次clone对象（有可能是head对象）的overlap（重叠）的部分。<br>clone操作后，每次写操作，都要维护这个信息； 这个信息用于数据恢复阶段对象恢复的优化；</p>\n<p>在Head对象的xattr中保存key为snapset， value为SnapSet结构序列化后的值；<br>在Sanp对象的xattr中保存key为user.cephos.seq的snap_seq值；</p>\n<h3 id=\"RBD快照创建\"><a href=\"#RBD快照创建\" class=\"headerlink\" title=\"RBD快照创建\"></a>RBD快照创建</h3><ul>\n<li>向Monitor发送请求，获取一个最新的快照序号snap_seq的值；</li>\n<li>把该次快照的snap_name和snap_seq的值保存到RBD的元数据中；<br>在RBD的元数据里保存了所有快照的名字和对应的snap_seq号，并不会触发OSD端的数据操作，所以很快；</li>\n</ul>\n<h3 id=\"快照的写操作\"><a href=\"#快照的写操作\" class=\"headerlink\" title=\"快照的写操作\"></a>快照的写操作</h3><p>  客户端的每次写操作，消息中必须带数据结构SnapContext信息，包含了客户端认为的最新快照序列号seq, 以及该对象的所有序号snaps的列表。<br>在OSD端，对象的Snap相关信息则在SnapSet数据结构中，当有写操作时，处理过程按照如下规则进行：</p>\n<ul>\n<li><p>情景一： librbd(SnapContext)的seq &lt; OSD(SnapSet)的seq：<br><br>直接返回-EOLDSNAP错误;   <br><br>一般而言，客户端（librbd）始终保持最新的快照序号；如果客户端不是最新的快照序号，则可能是：</p>\n<ul>\n<li>多个客户端情况下，其他客户端创建了快照，本客户端没有获取到最新的快照序号<br>原理：Ceph rbd有一套Watcher回调通知机制来实现快照序号的更新，如果其他客户端对一个卷作了快照，会产生了一个最新的快照序号。OSD端接收到最新快照序号变化后，通知相应的连接客户端更新最新的快照序号。如果客户端没有及时更新，也没有太大问题，OSD端会返回客户端-EOLDSNAP，客户端会主动更新为最新的快照序号，重新发起写操作；</li>\n</ul>\n</li>\n<li><p>情景二：如果head对象不存在，创建该对象并写入数据，用SnapContext相应的信息更新SnapSet的信息；</p>\n</li>\n<li>情景三：如果librbd的seq = OSD的seq：做正常的读写</li>\n<li>情景四：librbd的seq &gt; OSD的seq：<br><ul>\n<li>对当前head对象做copy操作，clone出一个新的快照对象，该快照对象的snap序号为最新的序号，并把clone操作记录在clones列表里；也就是把最新的快照序号加入到clones列表里；</li>\n<li>用SnapContext的 seq 和 snaps 值更新SnapSet的seq 和 snaps值；</li>\n<li>写入最新的数据到head对象中；</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注释：捕获与正在进行的读写相关联的所有对象状态。</span></span><br><span class=\"line\"><span class=\"comment\">// osd/ReplicatedPG.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">OpContext</span>&#123;</span></span><br><span class=\"line\">  OpRequestRef op;</span><br><span class=\"line\">  <span class=\"keyword\">osd_reqid_t</span> reqid;</span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;OSDOp&gt; &amp;ops;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ObjectState *obs;   <span class=\"comment\">//old ObjectState</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> SnapSet *snapset;   <span class=\"comment\">//old snapset, OSD端保存的快照信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">  SnapContext snapc;           <span class=\"comment\">// writer snap context， 写操作自带的，也就是librbd的SnapContext信息；</span></span><br><span class=\"line\">  ObjectState new_obs;  <span class=\"comment\">//resulting ObjectState 新的SnapSet</span></span><br><span class=\"line\">  SnapSet     new_snapset;  <span class=\"comment\">//resulting SnapSet(in case of a write)</span></span><br><span class=\"line\">  <span class=\"keyword\">object_stat_sum_t</span> delta_stats;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> modify;          <span class=\"comment\">// (force) modification (even if op_t is empty)</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> user_modify;     <span class=\"comment\">// user-visible modification</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> undirty;         <span class=\"comment\">// user explicitly un-dirtying this object</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> cache_evict;     <span class=\"comment\">///&lt; true if this is a cache eviction</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> ignore_cache;    <span class=\"comment\">///&lt; true if IGNORE_CACHE flag is set</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> ignore_log_op_stats;  <span class=\"comment\">// don't log op stats</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// side effects</span></span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;pair&lt;<span class=\"keyword\">watch_info_t</span>,<span class=\"keyword\">bool</span>&gt; &gt; watch_connects; <span class=\"comment\">///&lt; new watch + will_ping flag</span></span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">watch_disconnect_t</span>&gt; watch_disconnects; <span class=\"comment\">///&lt; old watch + send_discon</span></span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;<span class=\"keyword\">notify_info_t</span>&gt; notifies;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">NotifyAck</span> &#123;</span></span><br><span class=\"line\">    boost::optional&lt;<span class=\"keyword\">uint64_t</span>&gt; watch_cookie;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> notify_id;</span><br><span class=\"line\">    bufferlist reply_bl;</span><br><span class=\"line\">    explicit NotifyAck(uint64_t notify_id) : notify_id(notify_id) &#123;&#125;</span><br><span class=\"line\">    NotifyAck(<span class=\"keyword\">uint64_t</span> notify_id, <span class=\"keyword\">uint64_t</span> cookie, bufferlist&amp; rbl)</span><br><span class=\"line\">  : watch_cookie(cookie), notify_id(notify_id) &#123;</span><br><span class=\"line\">  reply_bl.claim(rbl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;NotifyAck&gt; notify_acks;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint64_t</span> bytes_written, bytes_read;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">utime_t</span> mtime;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">eversion_t</span> at_version;       <span class=\"comment\">// pg's current version pointer</span></span><br><span class=\"line\">  <span class=\"keyword\">version_t</span> user_at_version;   <span class=\"comment\">// pg's current user version pointer</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> current_osd_subop_num;</span><br><span class=\"line\"></span><br><span class=\"line\">  PGBackend::PGTransactionUPtr <span class=\"keyword\">op_t</span>;</span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">pg_log_entry_t</span>&gt; <span class=\"built_in\">log</span>;</span><br><span class=\"line\">  boost::optional&lt;<span class=\"keyword\">pg_hit_set_history_t</span>&gt; updated_hset_history;</span><br><span class=\"line\"></span><br><span class=\"line\">  interval_set&lt;<span class=\"keyword\">uint64_t</span>&gt; modified_ranges;</span><br><span class=\"line\">  ObjectContextRef obc;</span><br><span class=\"line\">  <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">hobject_t</span>,ObjectContextRef, <span class=\"keyword\">hobject_t</span>::BitwiseComparator&gt; src_obc;</span><br><span class=\"line\">  ObjectContextRef clone_obc;    <span class=\"comment\">// if we created a clone</span></span><br><span class=\"line\">  ObjectContextRef snapset_obc;  <span class=\"comment\">// if we created/deleted a snapdir</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> data_off;        <span class=\"comment\">// <span class=\"doctag\">FIXME:</span> we may want to kill this msgr hint off at some point!</span></span><br><span class=\"line\"></span><br><span class=\"line\">  MOSDOpReply *reply;</span><br><span class=\"line\">  <span class=\"keyword\">utime_t</span> readable_stamp;  <span class=\"comment\">// when applied on all replicas</span></span><br><span class=\"line\">  ReplicatedPG *pg;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> num_read;    <span class=\"comment\">///&lt; count read ops</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> num_write;   <span class=\"comment\">///&lt; count update ops</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;pair&lt;<span class=\"keyword\">osd_reqid_t</span>, <span class=\"keyword\">version_t</span>&gt; &gt; extra_reqids;</span><br><span class=\"line\"></span><br><span class=\"line\">  CopyFromCallback *copy_cb;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">hobject_t</span> new_temp_oid, discard_temp_oid;  <span class=\"comment\">///&lt; temp objects we should start/stop tracking</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// pending xattr updates</span></span><br><span class=\"line\">  <span class=\"built_in\">map</span>&lt;ObjectContextRef,</span><br><span class=\"line\">  <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, boost::optional&lt;bufferlist&gt; &gt; &gt; pending_attrs;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;<span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">void</span>()&gt;&gt; on_applied;</span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;<span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">void</span>()&gt;&gt; on_committed;</span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;<span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">void</span>()&gt;&gt; on_finish;</span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;<span class=\"built_in\">std</span>::function&lt;<span class=\"keyword\">void</span>()&gt;&gt; on_success;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> sent_ack;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> sent_disk;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>OSD端的写操作流程中， ReplicatedPG::execute_ctx中，把客户端消息中的SnapContext信息保存在OpContext的snapc中：</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx-&gt;snapc.seq = m-&gt;get_snap_seq();</span><br><span class=\"line\">ctx-&gt;snapc.snaps = m-&gt;get_snaps();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在ReplicatedPG::prepare_transaction里调用了函数ReplicatedPG::make_writeable来完成快照相关的操作：</li>\n</ul>\n<h3 id=\"快照的读操作\"><a href=\"#快照的读操作\" class=\"headerlink\" title=\"快照的读操作\"></a>快照的读操作</h3><p>快照读取数据时，输入参数为RBd的名字和快照的名字，RBD客户端通过访问RBD的元数据，来获取快照对应的snap_id,也就是快照对应的snap_seq值；<br>在OSD端，获取head对象保存的SnapSet数据结构，然后根据SnapSet中的snaps和clones值来计算快照所对应的正确的快照对象的ObjectContext；</p>\n<ul>\n<li>clinet(librbd)对象快照oid.snap &gt; osd 端快照序号 ssc-&gt;snapset.seq, 获取head对象就是该快照对应的时间数据对象。</li>\n<li>计算oid.snap首次大于ssc-&gt;snapset。clones列表中的克隆对象，就是oid对应的克隆对象；</li>\n</ul>\n"},{"title":"ceph messager 分析","_content":"\n### Messenger\n```cpp\n// file: msg/Messenger.h\nclass Messenger{\nprivate:\n  list<Dispatcher*> dispatchers;\n  list<Dispatcher*> fast_dispatchers;\n\nprotected:\n  entity_inst_t my_inst;\n  int default_send_priority;  //默认发送优先级\n  ///  set to true once the Messenger has started, and set to false on shutdown\n  bool started;\n  uint32_t magic;\n  int socket_priority;\n\npublic:\n  CephContext *cct;\n}\n\n```\n","source":"_posts/ceph_messenger.md","raw":"---\n  title: ceph messager 分析\n---\n\n### Messenger\n```cpp\n// file: msg/Messenger.h\nclass Messenger{\nprivate:\n  list<Dispatcher*> dispatchers;\n  list<Dispatcher*> fast_dispatchers;\n\nprotected:\n  entity_inst_t my_inst;\n  int default_send_priority;  //默认发送优先级\n  ///  set to true once the Messenger has started, and set to false on shutdown\n  bool started;\n  uint32_t magic;\n  int socket_priority;\n\npublic:\n  CephContext *cct;\n}\n\n```\n","slug":"ceph_messenger","published":1,"date":"2018-08-10T09:49:26.769Z","updated":"2018-08-15T07:40:09.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl25n9qy000214hansbfqtxy","content":"<h3 id=\"Messenger\"><a href=\"#Messenger\" class=\"headerlink\" title=\"Messenger\"></a>Messenger</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: msg/Messenger.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Messenger</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;Dispatcher*&gt; dispatchers;</span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;Dispatcher*&gt; fast_dispatchers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">  <span class=\"keyword\">entity_inst_t</span> my_inst;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> default_send_priority;  <span class=\"comment\">//默认发送优先级</span></span><br><span class=\"line\">  <span class=\"comment\">///  set to true once the Messenger has started, and set to false on shutdown</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> started;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> magic;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> socket_priority;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  CephContext *cct;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Messenger\"><a href=\"#Messenger\" class=\"headerlink\" title=\"Messenger\"></a>Messenger</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: msg/Messenger.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Messenger</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;Dispatcher*&gt; dispatchers;</span><br><span class=\"line\">  <span class=\"built_in\">list</span>&lt;Dispatcher*&gt; fast_dispatchers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">  <span class=\"keyword\">entity_inst_t</span> my_inst;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> default_send_priority;  <span class=\"comment\">//默认发送优先级</span></span><br><span class=\"line\">  <span class=\"comment\">///  set to true once the Messenger has started, and set to false on shutdown</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> started;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> magic;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> socket_priority;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  CephContext *cct;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"ERC20标准说明","_content":"### 概述\n原文说明：https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n\n### 函数说明\n所有的ERC20代币都是按照下面这些方法来定义的。\n- name\n```javascript\nfunction name() constant returns (string name)\n```\n返回string类型的ERC20代币的名字，例如：StatusNetwork\n\n- symbol\n```javascript\nfunction symbol() constant returns (string symbol)\n```\n返回string类型的ERC20代币的符号，也就是代币的简称，例如：SNT。\n\n- decimals\n``` javascript\nfunction decimals() constant returns (uint8 decimals)\n```\n支持几位小数点后几位。如果设置为3。也就是支持0.001表示。\n\n- totalSupply\n```javascript\nfunction totalSupply() constant returns (uint256 totalSupply)\n```\n发行代币的总量，可以通过这个函数来获取。所有智能合约发行的代币总量是一定的，totalSupply必须设置初始值。如果不设置初始值，这个代币发行就说明有问题。\n\n- balanceOf\n```javascript\nfunction balanceOf(address _owner) constant returns (uint256 balance)\n```\n输入地址，可以获取该地址代币的余额。\n\n- transfer\n```javascript\nfunction transfer(address _to, uint256 _value) returns (bool success)\n```\n调用transfer函数将自己的token转账给_to地址，_value为转账个数\n\n- approve\n```javascript\nfunction approve(address _spender, uint256 _value) returns (bool success)\n```\n批准_spender账户从自己的账户转移_value个token。可以分多次转移。\n\n- transferFrom\n```javascript\nfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success)\n```\n与approve搭配使用，approve批准之后，调用transferFrom函数来转移token。\n\n- allowance\n```javascript\nfunction allowance(address _owner, address _spender) constant returns (uint256 remaining)\n```\n返回_spender还能提取token的个数。\n\n- approve、transferFrom及allowance解释：\n账户A有1000个ETH，想允许B账户随意调用100个ETH。A账户按照以下形式调用approve函数approve(B,100)。当B账户想用这100个ETH中的10个ETH给C账户时，则调用transferFrom(A, C, 10)。这时调用allowance(A, B)可以查看B账户还能够调用A账户多少个token。\n\n### 事件\n```javascript\nTransfer\nevent Transfer(address indexed _from, address indexed _to, uint256 _value)\n```\n当成功转移token时，一定要触发Transfer事件\n\n```javascript\nApproval\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value)\n```\n当调用approval函数成功时，一定要触发Approval事件\n","source":"_posts/ERC20标准.md","raw":"---\n  title: ERC20标准说明\n---\n### 概述\n原文说明：https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n\n### 函数说明\n所有的ERC20代币都是按照下面这些方法来定义的。\n- name\n```javascript\nfunction name() constant returns (string name)\n```\n返回string类型的ERC20代币的名字，例如：StatusNetwork\n\n- symbol\n```javascript\nfunction symbol() constant returns (string symbol)\n```\n返回string类型的ERC20代币的符号，也就是代币的简称，例如：SNT。\n\n- decimals\n``` javascript\nfunction decimals() constant returns (uint8 decimals)\n```\n支持几位小数点后几位。如果设置为3。也就是支持0.001表示。\n\n- totalSupply\n```javascript\nfunction totalSupply() constant returns (uint256 totalSupply)\n```\n发行代币的总量，可以通过这个函数来获取。所有智能合约发行的代币总量是一定的，totalSupply必须设置初始值。如果不设置初始值，这个代币发行就说明有问题。\n\n- balanceOf\n```javascript\nfunction balanceOf(address _owner) constant returns (uint256 balance)\n```\n输入地址，可以获取该地址代币的余额。\n\n- transfer\n```javascript\nfunction transfer(address _to, uint256 _value) returns (bool success)\n```\n调用transfer函数将自己的token转账给_to地址，_value为转账个数\n\n- approve\n```javascript\nfunction approve(address _spender, uint256 _value) returns (bool success)\n```\n批准_spender账户从自己的账户转移_value个token。可以分多次转移。\n\n- transferFrom\n```javascript\nfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success)\n```\n与approve搭配使用，approve批准之后，调用transferFrom函数来转移token。\n\n- allowance\n```javascript\nfunction allowance(address _owner, address _spender) constant returns (uint256 remaining)\n```\n返回_spender还能提取token的个数。\n\n- approve、transferFrom及allowance解释：\n账户A有1000个ETH，想允许B账户随意调用100个ETH。A账户按照以下形式调用approve函数approve(B,100)。当B账户想用这100个ETH中的10个ETH给C账户时，则调用transferFrom(A, C, 10)。这时调用allowance(A, B)可以查看B账户还能够调用A账户多少个token。\n\n### 事件\n```javascript\nTransfer\nevent Transfer(address indexed _from, address indexed _to, uint256 _value)\n```\n当成功转移token时，一定要触发Transfer事件\n\n```javascript\nApproval\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value)\n```\n当调用approval函数成功时，一定要触发Approval事件\n","slug":"ERC20标准","published":1,"date":"2018-07-27T03:36:03.547Z","updated":"2018-07-27T03:43:20.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl25n9r1000314halytoq3ni","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>原文说明：<a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\" target=\"_blank\" rel=\"noopener\">https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md</a></p>\n<h3 id=\"函数说明\"><a href=\"#函数说明\" class=\"headerlink\" title=\"函数说明\"></a>函数说明</h3><p>所有的ERC20代币都是按照下面这些方法来定义的。</p>\n<ul>\n<li>name<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">string name</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>返回string类型的ERC20代币的名字，例如：StatusNetwork</p>\n<ul>\n<li>symbol<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">symbol</span>(<span class=\"params\"></span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">string symbol</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>返回string类型的ERC20代币的符号，也就是代币的简称，例如：SNT。</p>\n<ul>\n<li>decimals<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decimals</span>(<span class=\"params\"></span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">uint8 decimals</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>支持几位小数点后几位。如果设置为3。也就是支持0.001表示。</p>\n<ul>\n<li>totalSupply<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">totalSupply</span>(<span class=\"params\"></span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">uint256 totalSupply</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>发行代币的总量，可以通过这个函数来获取。所有智能合约发行的代币总量是一定的，totalSupply必须设置初始值。如果不设置初始值，这个代币发行就说明有问题。</p>\n<ul>\n<li>balanceOf<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">balanceOf</span>(<span class=\"params\">address _owner</span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">uint256 balance</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>输入地址，可以获取该地址代币的余额。</p>\n<ul>\n<li>transfer<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transfer</span>(<span class=\"params\">address _to, uint256 _value</span>) <span class=\"title\">returns</span> (<span class=\"params\">bool success</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>调用transfer函数将自己的token转账给_to地址，_value为转账个数</p>\n<ul>\n<li>approve<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">approve</span>(<span class=\"params\">address _spender, uint256 _value</span>) <span class=\"title\">returns</span> (<span class=\"params\">bool success</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>批准_spender账户从自己的账户转移_value个token。可以分多次转移。</p>\n<ul>\n<li>transferFrom<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transferFrom</span>(<span class=\"params\">address _from, address _to, uint256 _value</span>) <span class=\"title\">returns</span> (<span class=\"params\">bool success</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>与approve搭配使用，approve批准之后，调用transferFrom函数来转移token。</p>\n<ul>\n<li>allowance<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">allowance</span>(<span class=\"params\">address _owner, address _spender</span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">uint256 remaining</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>返回_spender还能提取token的个数。</p>\n<ul>\n<li>approve、transferFrom及allowance解释：<br>账户A有1000个ETH，想允许B账户随意调用100个ETH。A账户按照以下形式调用approve函数approve(B,100)。当B账户想用这100个ETH中的10个ETH给C账户时，则调用transferFrom(A, C, 10)。这时调用allowance(A, B)可以查看B账户还能够调用A账户多少个token。</li>\n</ul>\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transfer</span><br><span class=\"line\">event Transfer(address indexed _from, address indexed _to, uint256 _value)</span><br></pre></td></tr></table></figure>\n<p>当成功转移token时，一定要触发Transfer事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Approval</span><br><span class=\"line\">event Approval(address indexed _owner, address indexed _spender, uint256 _value)</span><br></pre></td></tr></table></figure>\n<p>当调用approval函数成功时，一定要触发Approval事件</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>原文说明：<a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\" target=\"_blank\" rel=\"noopener\">https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md</a></p>\n<h3 id=\"函数说明\"><a href=\"#函数说明\" class=\"headerlink\" title=\"函数说明\"></a>函数说明</h3><p>所有的ERC20代币都是按照下面这些方法来定义的。</p>\n<ul>\n<li>name<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">string name</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>返回string类型的ERC20代币的名字，例如：StatusNetwork</p>\n<ul>\n<li>symbol<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">symbol</span>(<span class=\"params\"></span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">string symbol</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>返回string类型的ERC20代币的符号，也就是代币的简称，例如：SNT。</p>\n<ul>\n<li>decimals<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decimals</span>(<span class=\"params\"></span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">uint8 decimals</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>支持几位小数点后几位。如果设置为3。也就是支持0.001表示。</p>\n<ul>\n<li>totalSupply<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">totalSupply</span>(<span class=\"params\"></span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">uint256 totalSupply</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>发行代币的总量，可以通过这个函数来获取。所有智能合约发行的代币总量是一定的，totalSupply必须设置初始值。如果不设置初始值，这个代币发行就说明有问题。</p>\n<ul>\n<li>balanceOf<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">balanceOf</span>(<span class=\"params\">address _owner</span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">uint256 balance</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>输入地址，可以获取该地址代币的余额。</p>\n<ul>\n<li>transfer<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transfer</span>(<span class=\"params\">address _to, uint256 _value</span>) <span class=\"title\">returns</span> (<span class=\"params\">bool success</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>调用transfer函数将自己的token转账给_to地址，_value为转账个数</p>\n<ul>\n<li>approve<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">approve</span>(<span class=\"params\">address _spender, uint256 _value</span>) <span class=\"title\">returns</span> (<span class=\"params\">bool success</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>批准_spender账户从自己的账户转移_value个token。可以分多次转移。</p>\n<ul>\n<li>transferFrom<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transferFrom</span>(<span class=\"params\">address _from, address _to, uint256 _value</span>) <span class=\"title\">returns</span> (<span class=\"params\">bool success</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>与approve搭配使用，approve批准之后，调用transferFrom函数来转移token。</p>\n<ul>\n<li>allowance<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">allowance</span>(<span class=\"params\">address _owner, address _spender</span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">uint256 remaining</span>)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>返回_spender还能提取token的个数。</p>\n<ul>\n<li>approve、transferFrom及allowance解释：<br>账户A有1000个ETH，想允许B账户随意调用100个ETH。A账户按照以下形式调用approve函数approve(B,100)。当B账户想用这100个ETH中的10个ETH给C账户时，则调用transferFrom(A, C, 10)。这时调用allowance(A, B)可以查看B账户还能够调用A账户多少个token。</li>\n</ul>\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Transfer</span><br><span class=\"line\">event Transfer(address indexed _from, address indexed _to, uint256 _value)</span><br></pre></td></tr></table></figure>\n<p>当成功转移token时，一定要触发Transfer事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Approval</span><br><span class=\"line\">event Approval(address indexed _owner, address indexed _spender, uint256 _value)</span><br></pre></td></tr></table></figure>\n<p>当调用approval函数成功时，一定要触发Approval事件</p>\n"},{"title":"solidity truffle","_content":"\n### solidity语法：\n\n写Solidity最大的不同在于，我们要随时计算好我们的gas消耗，方法的复杂度，变量类型的存储位置（memory，storage等等）都会决定gas的消耗量。\n\n以上编写合约在vim，编译在Remix，运行端在geth console。过程十分繁复，不适合大规模工程开发，需要通过Truffle来整合以上操作；\n\n一、环境配置：\n\n​\ttruffle依赖于nodejs，可能存在版本之间的兼容性问题，首先删除自带的nodejs和npm，再进行全安装；\n\n```\nsudo apt-get remove nodejs\nsudo apt-get remove npm\nsudo apt-get update\nwhich node\nwget https://nodejs.org/dist/v8.8.0/node-v8.8.0-linux-x64.tar.gz\nsudo tar -xf node-v8.8.0-linux-x64.tar.gz --directory /usr/local --strip-components 1\nnode --version\nnpm --version\nsudo npm install -g truffle\n```\n\n二、\n\n```\n1. block.blockhash(uint blockNumber) returns (bytes32): 返回参数区块编号的hash值。（范围仅限于最近256块，还不包含当然块）\n2. block.coinbase (address): 当前区块矿工地址\n3. block.difficulty (uint): 当前区块难度\n4. block.gaslimit (uint): 当前区块的gaslimit\n5. block.number (uint): 当前区块编号\n6. block.timestamp (uint): 当前区块的timestamp，使用UNIX时间秒\n7. msg.data (bytes): 完整的calldata\n8. msg.gas (uint): 剩余的gas\n9. msg.sender (address): 信息的发送方 (当前调用)\n10. msg.sig (bytes4): calldata的前四个字节 (i.e. 函数标识符)\n11. msg.value (uint): 消息发送的wei的数量\n12. now (uint): 当前区块的timestamp (block.timestamp别名)\n13. tx.gasprice (uint): 交易的gas单价\n14. tx.origin (address): 交易发送方地址(完全的链调用)\n```\n\n### 三、发币\n\n使用truffle init 来初始化项目；但truffle推出Boxes功能之后，我们可以直接套用react-box的样板，节省时间；\n\n```\nroot@keke:~/truffle-project/coin# truffle  unbox react-box\nDownloading...\nUnpacking...\nSetting up...\nUnbox successful. Sweet!\n\nCommands:\n\n  Compile:              truffle compile\n  Migrate:              truffle migrate\n  Test contracts:       truffle test\n  Test dapp:            npm test\n  Run dev server:       npm run start\n  Build for production: npm run build\n```\n\n编译自带的智能合约：\n\n```\nroot@keke:~/truffle-project/coin# truffle  compile\nCompiling ./contracts/Migrations.sol...\nCompiling ./contracts/SimpleStorage.sol...\n\nCompilation warnings encountered:\n\n/root/truffle-project/coin/contracts/Migrations.sol:11:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n  function Migrations() public {\n  ^ (Relevant source part starts here and spans across multiple lines).\n\nWriting artifacts to ./build/contracts\n\n```\n\n3、安装OpenZeppelin来简化加密钱包开发过程；\n\n`OpenZeppelin`是一套能够给我们方便提供编写加密合约的函数库，同时里面也提供了兼容`ERC20`的智能合约。\n\n```\nnpm install zeppelin-solidity\n```\n\n4、创建代币合约\n\n```\npragma solidity ^0.4.0;\n\nimport \"../node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\";\n\ncontract NewCoin is StandardToken{\n    string public name = \"NewCoin\";\n    string public symbol = \"NC\";\n    uint8 public decimals = 8;\n    uint256 public INITIAL_SUPPLY = 21000000;\n\n    function NewCoin(){\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n    }\n}\n```\n\n5、编译、部署和验证\n\n在`migrations/`目录下建立一个`3_deploy_contracts.js`文件，内容如下：\n\n```\nvar NenmoCoin = artifacts.require(\"./NenmoCoin.sol\");\n\nmodule.exports = function(deployer) {\n  deployer.deploy(NenmoCoin);\n};\n```\n\n部署：\n\n```\ntruffle develop\t\t\t//进入开发环境\ncompile\t\t\t\t    //编译\nmigrate\t\t\t\t\t//部署在truffle环境上\n```\n\n测试：\n\n```\ntruffle(develop)> var c\nundefined\ntruffle(develop)> c = NenmoCoin.deployed().then(instance => contract = instance)\nTruffleContract {\n  constructor:\n......\n  allEvents: [Function: bound ],\n  address: '0x8f0483125fcb9aaaefa9209d8e9d7b9c8b9fb90f',\n  transactionHash: null }\n\ntruffle(develop)> contract.balanceOf(web3.eth.coinbase)\nBigNumber { s: 1, e: 7, c: [ 21000000 ] }\ntruffle(develop)> contract.balanceOf(web3.eth.accounts[1])\nBigNumber { s: 1, e: 0, c: [ 0 ] }\ntruffle(develop)> contract.transfer(web3.eth.accounts[1], 100)\n{ tx: '0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc',\n  receipt:\n   { transactionHash: '0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc',\n     transactionIndex: 0,\n     blockHash: '0xeb9546c74c6a897e05ecfe223238cfa80b3db4f37a567f02b5c1d20ffec7b6c3',\n     blockNumber: 7,\n     gasUsed: 51569,\n     cumulativeGasUsed: 51569,\n     contractAddress: null,\n     logs: [ [Object] ],\n     status: '0x01',\n     logsBloom: '0x},\n  logs:\n   [ { logIndex: 0,\n       transactionIndex: 0,\n       transactionHash: '0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc',\n       blockHash: '0xeb9546c74c6a897e05ecfe223238cfa80b3db4f37a567f02b5c1d20ffec7b6c3',\n       blockNumber: 7,\n       address: '0x8f0483125fcb9aaaefa9209d8e9d7b9c8b9fb90f',\n       type: 'mined',\n       event: 'Transfer',\n       args: [Object] } ] }\ntruffle(develop)> contract.balanceOf(web3.eth.coinbase)\nBigNumber { s: 1, e: 7, c: [ 20999900 ] }\ntruffle(develop)> contract.balanceOf(web3.eth.accounts[1])\nBigNumber { s: 1, e: 2, c: [ 100 ] }\ntruffle(develop)> contract.name.call()\n'NenmoCoin'\ntruffle(develop)> contract.symbol.call()\n'NMB'\n```\n\n### 部署到geth私链：\n\n attach 进入console：\n\n```\ngeth  attach ipc:/root/goproject/private-chain/geth.ipc\n```\n\n查看帐户：\n\n```\n>personal\n>personal.newAccount(\"some-key\")\n>personal\n//此时我们应该看到两个帐户，我们使用帐户进行部署合约\n>miner.start()\n>eth.sendTransaction({from:eth.coinbase, to:eth.accounts[1], value: web3.toWei(10000, \"ether\")})\n>personal.unlockAccount(eth.accounts[1])  //部署合约之前，必须把帐户进行解锁\n```\n\n查看truffle.js：\n\n```\nmodule.exports = {\n     networks: {\n         development: {\n               host: \"192.168.116.56\",\n               port: 8989,\n               network_id: \"123\",\n               from: \"0x528abd58142fbf77d4e648cd43458625297fa059\",  //此处为解锁的帐户\n               gas: 3000000,\n               gasPrice: 100,\n             }\n      }\n};\n```\n\ntruffle migrate //部署到geth\n\n【truffle migrate】问题汇总：\n\n- Error: exceeds block gas limit undefined\n\n当前合约所需的gas超过了区块的最大gas。这可能是由于创世区块的配置文件`genesis.json`中的参数`gasLimit`设置过小有关，\n\n解决方案：\n    重置truffle.js中gas参数的大小；\n\n```\n//再次进入ipc\ngeth  attach ipc:/root/goproject/private-chain/geth.ipc\n```\n\n### 在geth中查找已部署的合约\n\n从truffle 项目目录下，build/contracts/NewCoin.json获取abi；并由[http://www.bejson.com](http://www.bejson.com/jsonviewernew/) 转成字符串；\n\n```\nvar abi = JSON.parse($abi)\nvar address = \"0x8d014d58bfdc56408b2af6ef8e7b09eba1c8b940\"; //truffle migrate 生成的address\nvar newcoin = web3.eth.contract(abi).at(address)\n```\n\n### 调用合约中的方法：\n\n- call() 直接返回结果，不会写入区块链\n- sendTransaction() 发送一笔交易，会写入区块链中，返回值是交易的哈希值。\n\n### ERC20 Token\nERC20是以太坊定义的一个代币标准。是一种发行代币合约必须要遵守的协议，该协议规定了几个参数：\n- 发行货币的名称\n- 简称\n- 发行量\n- 支持的函数\n\n只有支持了该协议才会被以太坊所认同；\n\nerc20 标准\n\n```go\n  // https://github.com/ethereum/EIPs/issues/20\n  contract ERC20 {\n      function totalSupply() constant returns (uint totalSupply);\n      function balanceOf(address _owner) constant returns (uint balance);\n      function transfer(address _to, uint _value) returns (bool success);\n      function transferFrom(address _from, address _to, uint _value) returns (bool success);\n      function approve(address _spender, uint _value) returns (bool success);\n      function allowance(address _owner, address _spender) constant returns (uint remaining);\n      event Transfer(address indexed _from, address indexed _to, uint _value);\n      event Approval(address indexed _owner, address indexed _spender, uint _value);\n    }\n```\n\nsolidity：\n- address\n - 属性：balances\n - 函数: send(), call(), delegatecall(), callcode()\n\nsolidity 语法\n```\nhttps://www.jianshu.com/p/e8113bfa7694\n```\n\n对tx.data进行Keccak256（）编码；\n\n以太坊交易的类型：\n\n- 转账的交易\n- 创建合约的交易\n- 执行合约的交易\n\n参数是一个对象，在发送交易的时候指定不同的字段，区块链及链根据参数识别出对应类型的交易；\n\n转账交易：\n转账是最简单的一种交易，从一个帐户向另一个帐户发送以太币\n```\n  web3.eth.sendTransaction({\n      from: \"0x....\",\n      to:   \"0x....\",\n      value: 100000\n  })\n```\n\n创建合约的交易：\n将合约部署到区块链节点上，通过发送交易来实现。\n\n```\n  web3.eth.sendTransaction({\n      from: \"交易的发送者也是合约的创建者\",\n      data: \"指定合约的abi\"\n  })\n```\nto字段留空不填\n\n执行合约的交易：调用合约中的方法，需要将交易的to字段指定为调用的合约的地址， 通过data字段指定要调用的方法以及向该方法传递的参数\n```\n  web3.eth.sendTransaction({\n      from: \"sender's address\",\n      to: \" contract address\",\n      data: \"目标方法和传递的参数\"\n  })\n```\ndata字段需要特殊的编码规则，一般使用SDK(web3.js)\n\n### web3.eth\n包含以太坊区块链相关的方法\n - web3.eth.gasprice  //gas当前单价\n - web3.eth.accounts  //当前节点的帐户列表\n - web3.eth.getBalance()\n - web3.eth.getTransaction()\n 创建帐户\n\ngas limit: 这个交易的执行最都被允许使用的计算步骤\ngas price: 交易发送者愿意支付的gas费用，一个单位的gas表示了执行一个基本指令；\n","source":"_posts/ solidity_truffle.md","raw":"---\n  title: solidity truffle\n---\n\n### solidity语法：\n\n写Solidity最大的不同在于，我们要随时计算好我们的gas消耗，方法的复杂度，变量类型的存储位置（memory，storage等等）都会决定gas的消耗量。\n\n以上编写合约在vim，编译在Remix，运行端在geth console。过程十分繁复，不适合大规模工程开发，需要通过Truffle来整合以上操作；\n\n一、环境配置：\n\n​\ttruffle依赖于nodejs，可能存在版本之间的兼容性问题，首先删除自带的nodejs和npm，再进行全安装；\n\n```\nsudo apt-get remove nodejs\nsudo apt-get remove npm\nsudo apt-get update\nwhich node\nwget https://nodejs.org/dist/v8.8.0/node-v8.8.0-linux-x64.tar.gz\nsudo tar -xf node-v8.8.0-linux-x64.tar.gz --directory /usr/local --strip-components 1\nnode --version\nnpm --version\nsudo npm install -g truffle\n```\n\n二、\n\n```\n1. block.blockhash(uint blockNumber) returns (bytes32): 返回参数区块编号的hash值。（范围仅限于最近256块，还不包含当然块）\n2. block.coinbase (address): 当前区块矿工地址\n3. block.difficulty (uint): 当前区块难度\n4. block.gaslimit (uint): 当前区块的gaslimit\n5. block.number (uint): 当前区块编号\n6. block.timestamp (uint): 当前区块的timestamp，使用UNIX时间秒\n7. msg.data (bytes): 完整的calldata\n8. msg.gas (uint): 剩余的gas\n9. msg.sender (address): 信息的发送方 (当前调用)\n10. msg.sig (bytes4): calldata的前四个字节 (i.e. 函数标识符)\n11. msg.value (uint): 消息发送的wei的数量\n12. now (uint): 当前区块的timestamp (block.timestamp别名)\n13. tx.gasprice (uint): 交易的gas单价\n14. tx.origin (address): 交易发送方地址(完全的链调用)\n```\n\n### 三、发币\n\n使用truffle init 来初始化项目；但truffle推出Boxes功能之后，我们可以直接套用react-box的样板，节省时间；\n\n```\nroot@keke:~/truffle-project/coin# truffle  unbox react-box\nDownloading...\nUnpacking...\nSetting up...\nUnbox successful. Sweet!\n\nCommands:\n\n  Compile:              truffle compile\n  Migrate:              truffle migrate\n  Test contracts:       truffle test\n  Test dapp:            npm test\n  Run dev server:       npm run start\n  Build for production: npm run build\n```\n\n编译自带的智能合约：\n\n```\nroot@keke:~/truffle-project/coin# truffle  compile\nCompiling ./contracts/Migrations.sol...\nCompiling ./contracts/SimpleStorage.sol...\n\nCompilation warnings encountered:\n\n/root/truffle-project/coin/contracts/Migrations.sol:11:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n  function Migrations() public {\n  ^ (Relevant source part starts here and spans across multiple lines).\n\nWriting artifacts to ./build/contracts\n\n```\n\n3、安装OpenZeppelin来简化加密钱包开发过程；\n\n`OpenZeppelin`是一套能够给我们方便提供编写加密合约的函数库，同时里面也提供了兼容`ERC20`的智能合约。\n\n```\nnpm install zeppelin-solidity\n```\n\n4、创建代币合约\n\n```\npragma solidity ^0.4.0;\n\nimport \"../node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\";\n\ncontract NewCoin is StandardToken{\n    string public name = \"NewCoin\";\n    string public symbol = \"NC\";\n    uint8 public decimals = 8;\n    uint256 public INITIAL_SUPPLY = 21000000;\n\n    function NewCoin(){\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n    }\n}\n```\n\n5、编译、部署和验证\n\n在`migrations/`目录下建立一个`3_deploy_contracts.js`文件，内容如下：\n\n```\nvar NenmoCoin = artifacts.require(\"./NenmoCoin.sol\");\n\nmodule.exports = function(deployer) {\n  deployer.deploy(NenmoCoin);\n};\n```\n\n部署：\n\n```\ntruffle develop\t\t\t//进入开发环境\ncompile\t\t\t\t    //编译\nmigrate\t\t\t\t\t//部署在truffle环境上\n```\n\n测试：\n\n```\ntruffle(develop)> var c\nundefined\ntruffle(develop)> c = NenmoCoin.deployed().then(instance => contract = instance)\nTruffleContract {\n  constructor:\n......\n  allEvents: [Function: bound ],\n  address: '0x8f0483125fcb9aaaefa9209d8e9d7b9c8b9fb90f',\n  transactionHash: null }\n\ntruffle(develop)> contract.balanceOf(web3.eth.coinbase)\nBigNumber { s: 1, e: 7, c: [ 21000000 ] }\ntruffle(develop)> contract.balanceOf(web3.eth.accounts[1])\nBigNumber { s: 1, e: 0, c: [ 0 ] }\ntruffle(develop)> contract.transfer(web3.eth.accounts[1], 100)\n{ tx: '0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc',\n  receipt:\n   { transactionHash: '0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc',\n     transactionIndex: 0,\n     blockHash: '0xeb9546c74c6a897e05ecfe223238cfa80b3db4f37a567f02b5c1d20ffec7b6c3',\n     blockNumber: 7,\n     gasUsed: 51569,\n     cumulativeGasUsed: 51569,\n     contractAddress: null,\n     logs: [ [Object] ],\n     status: '0x01',\n     logsBloom: '0x},\n  logs:\n   [ { logIndex: 0,\n       transactionIndex: 0,\n       transactionHash: '0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc',\n       blockHash: '0xeb9546c74c6a897e05ecfe223238cfa80b3db4f37a567f02b5c1d20ffec7b6c3',\n       blockNumber: 7,\n       address: '0x8f0483125fcb9aaaefa9209d8e9d7b9c8b9fb90f',\n       type: 'mined',\n       event: 'Transfer',\n       args: [Object] } ] }\ntruffle(develop)> contract.balanceOf(web3.eth.coinbase)\nBigNumber { s: 1, e: 7, c: [ 20999900 ] }\ntruffle(develop)> contract.balanceOf(web3.eth.accounts[1])\nBigNumber { s: 1, e: 2, c: [ 100 ] }\ntruffle(develop)> contract.name.call()\n'NenmoCoin'\ntruffle(develop)> contract.symbol.call()\n'NMB'\n```\n\n### 部署到geth私链：\n\n attach 进入console：\n\n```\ngeth  attach ipc:/root/goproject/private-chain/geth.ipc\n```\n\n查看帐户：\n\n```\n>personal\n>personal.newAccount(\"some-key\")\n>personal\n//此时我们应该看到两个帐户，我们使用帐户进行部署合约\n>miner.start()\n>eth.sendTransaction({from:eth.coinbase, to:eth.accounts[1], value: web3.toWei(10000, \"ether\")})\n>personal.unlockAccount(eth.accounts[1])  //部署合约之前，必须把帐户进行解锁\n```\n\n查看truffle.js：\n\n```\nmodule.exports = {\n     networks: {\n         development: {\n               host: \"192.168.116.56\",\n               port: 8989,\n               network_id: \"123\",\n               from: \"0x528abd58142fbf77d4e648cd43458625297fa059\",  //此处为解锁的帐户\n               gas: 3000000,\n               gasPrice: 100,\n             }\n      }\n};\n```\n\ntruffle migrate //部署到geth\n\n【truffle migrate】问题汇总：\n\n- Error: exceeds block gas limit undefined\n\n当前合约所需的gas超过了区块的最大gas。这可能是由于创世区块的配置文件`genesis.json`中的参数`gasLimit`设置过小有关，\n\n解决方案：\n    重置truffle.js中gas参数的大小；\n\n```\n//再次进入ipc\ngeth  attach ipc:/root/goproject/private-chain/geth.ipc\n```\n\n### 在geth中查找已部署的合约\n\n从truffle 项目目录下，build/contracts/NewCoin.json获取abi；并由[http://www.bejson.com](http://www.bejson.com/jsonviewernew/) 转成字符串；\n\n```\nvar abi = JSON.parse($abi)\nvar address = \"0x8d014d58bfdc56408b2af6ef8e7b09eba1c8b940\"; //truffle migrate 生成的address\nvar newcoin = web3.eth.contract(abi).at(address)\n```\n\n### 调用合约中的方法：\n\n- call() 直接返回结果，不会写入区块链\n- sendTransaction() 发送一笔交易，会写入区块链中，返回值是交易的哈希值。\n\n### ERC20 Token\nERC20是以太坊定义的一个代币标准。是一种发行代币合约必须要遵守的协议，该协议规定了几个参数：\n- 发行货币的名称\n- 简称\n- 发行量\n- 支持的函数\n\n只有支持了该协议才会被以太坊所认同；\n\nerc20 标准\n\n```go\n  // https://github.com/ethereum/EIPs/issues/20\n  contract ERC20 {\n      function totalSupply() constant returns (uint totalSupply);\n      function balanceOf(address _owner) constant returns (uint balance);\n      function transfer(address _to, uint _value) returns (bool success);\n      function transferFrom(address _from, address _to, uint _value) returns (bool success);\n      function approve(address _spender, uint _value) returns (bool success);\n      function allowance(address _owner, address _spender) constant returns (uint remaining);\n      event Transfer(address indexed _from, address indexed _to, uint _value);\n      event Approval(address indexed _owner, address indexed _spender, uint _value);\n    }\n```\n\nsolidity：\n- address\n - 属性：balances\n - 函数: send(), call(), delegatecall(), callcode()\n\nsolidity 语法\n```\nhttps://www.jianshu.com/p/e8113bfa7694\n```\n\n对tx.data进行Keccak256（）编码；\n\n以太坊交易的类型：\n\n- 转账的交易\n- 创建合约的交易\n- 执行合约的交易\n\n参数是一个对象，在发送交易的时候指定不同的字段，区块链及链根据参数识别出对应类型的交易；\n\n转账交易：\n转账是最简单的一种交易，从一个帐户向另一个帐户发送以太币\n```\n  web3.eth.sendTransaction({\n      from: \"0x....\",\n      to:   \"0x....\",\n      value: 100000\n  })\n```\n\n创建合约的交易：\n将合约部署到区块链节点上，通过发送交易来实现。\n\n```\n  web3.eth.sendTransaction({\n      from: \"交易的发送者也是合约的创建者\",\n      data: \"指定合约的abi\"\n  })\n```\nto字段留空不填\n\n执行合约的交易：调用合约中的方法，需要将交易的to字段指定为调用的合约的地址， 通过data字段指定要调用的方法以及向该方法传递的参数\n```\n  web3.eth.sendTransaction({\n      from: \"sender's address\",\n      to: \" contract address\",\n      data: \"目标方法和传递的参数\"\n  })\n```\ndata字段需要特殊的编码规则，一般使用SDK(web3.js)\n\n### web3.eth\n包含以太坊区块链相关的方法\n - web3.eth.gasprice  //gas当前单价\n - web3.eth.accounts  //当前节点的帐户列表\n - web3.eth.getBalance()\n - web3.eth.getTransaction()\n 创建帐户\n\ngas limit: 这个交易的执行最都被允许使用的计算步骤\ngas price: 交易发送者愿意支付的gas费用，一个单位的gas表示了执行一个基本指令；\n","slug":" solidity_truffle","published":1,"date":"2018-08-02T03:49:08.175Z","updated":"2018-09-04T07:42:56.049Z","_id":"cjl25n9r2000414hau49pm2ik","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"solidity语法：\"><a href=\"#solidity语法：\" class=\"headerlink\" title=\"solidity语法：\"></a>solidity语法：</h3><p>写Solidity最大的不同在于，我们要随时计算好我们的gas消耗，方法的复杂度，变量类型的存储位置（memory，storage等等）都会决定gas的消耗量。</p>\n<p>以上编写合约在vim，编译在Remix，运行端在geth console。过程十分繁复，不适合大规模工程开发，需要通过Truffle来整合以上操作；</p>\n<p>一、环境配置：</p>\n<p>​    truffle依赖于nodejs，可能存在版本之间的兼容性问题，首先删除自带的nodejs和npm，再进行全安装；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove nodejs</span><br><span class=\"line\">sudo apt-get remove npm</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">which node</span><br><span class=\"line\">wget https://nodejs.org/dist/v8.8.0/node-v8.8.0-linux-x64.tar.gz</span><br><span class=\"line\">sudo tar -xf node-v8.8.0-linux-x64.tar.gz --directory /usr/local --strip-components 1</span><br><span class=\"line\">node --version</span><br><span class=\"line\">npm --version</span><br><span class=\"line\">sudo npm install -g truffle</span><br></pre></td></tr></table></figure>\n<p>二、</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. block.blockhash(uint blockNumber) returns (bytes32): 返回参数区块编号的hash值。（范围仅限于最近256块，还不包含当然块）</span><br><span class=\"line\">2. block.coinbase (address): 当前区块矿工地址</span><br><span class=\"line\">3. block.difficulty (uint): 当前区块难度</span><br><span class=\"line\">4. block.gaslimit (uint): 当前区块的gaslimit</span><br><span class=\"line\">5. block.number (uint): 当前区块编号</span><br><span class=\"line\">6. block.timestamp (uint): 当前区块的timestamp，使用UNIX时间秒</span><br><span class=\"line\">7. msg.data (bytes): 完整的calldata</span><br><span class=\"line\">8. msg.gas (uint): 剩余的gas</span><br><span class=\"line\">9. msg.sender (address): 信息的发送方 (当前调用)</span><br><span class=\"line\">10. msg.sig (bytes4): calldata的前四个字节 (i.e. 函数标识符)</span><br><span class=\"line\">11. msg.value (uint): 消息发送的wei的数量</span><br><span class=\"line\">12. now (uint): 当前区块的timestamp (block.timestamp别名)</span><br><span class=\"line\">13. tx.gasprice (uint): 交易的gas单价</span><br><span class=\"line\">14. tx.origin (address): 交易发送方地址(完全的链调用)</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、发币\"><a href=\"#三、发币\" class=\"headerlink\" title=\"三、发币\"></a>三、发币</h3><p>使用truffle init 来初始化项目；但truffle推出Boxes功能之后，我们可以直接套用react-box的样板，节省时间；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@keke:~/truffle-project/coin# truffle  unbox react-box</span><br><span class=\"line\">Downloading...</span><br><span class=\"line\">Unpacking...</span><br><span class=\"line\">Setting up...</span><br><span class=\"line\">Unbox successful. Sweet!</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\"></span><br><span class=\"line\">  Compile:              truffle compile</span><br><span class=\"line\">  Migrate:              truffle migrate</span><br><span class=\"line\">  Test contracts:       truffle test</span><br><span class=\"line\">  Test dapp:            npm test</span><br><span class=\"line\">  Run dev server:       npm run start</span><br><span class=\"line\">  Build for production: npm run build</span><br></pre></td></tr></table></figure>\n<p>编译自带的智能合约：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@keke:~/truffle-project/coin# truffle  compile</span><br><span class=\"line\">Compiling ./contracts/Migrations.sol...</span><br><span class=\"line\">Compiling ./contracts/SimpleStorage.sol...</span><br><span class=\"line\"></span><br><span class=\"line\">Compilation warnings encountered:</span><br><span class=\"line\"></span><br><span class=\"line\">/root/truffle-project/coin/contracts/Migrations.sol:11:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use &quot;constructor(...) &#123; ... &#125;&quot; instead.</span><br><span class=\"line\">  function Migrations() public &#123;</span><br><span class=\"line\">  ^ (Relevant source part starts here and spans across multiple lines).</span><br><span class=\"line\"></span><br><span class=\"line\">Writing artifacts to ./build/contracts</span><br></pre></td></tr></table></figure>\n<p>3、安装OpenZeppelin来简化加密钱包开发过程；</p>\n<p><code>OpenZeppelin</code>是一套能够给我们方便提供编写加密合约的函数库，同时里面也提供了兼容<code>ERC20</code>的智能合约。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install zeppelin-solidity</span><br></pre></td></tr></table></figure>\n<p>4、创建代币合约</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;../node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">contract NewCoin is StandardToken&#123;</span><br><span class=\"line\">    string public name = &quot;NewCoin&quot;;</span><br><span class=\"line\">    string public symbol = &quot;NC&quot;;</span><br><span class=\"line\">    uint8 public decimals = 8;</span><br><span class=\"line\">    uint256 public INITIAL_SUPPLY = 21000000;</span><br><span class=\"line\"></span><br><span class=\"line\">    function NewCoin()&#123;</span><br><span class=\"line\">        totalSupply_ = INITIAL_SUPPLY;</span><br><span class=\"line\">        balances[msg.sender] = INITIAL_SUPPLY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5、编译、部署和验证</p>\n<p>在<code>migrations/</code>目录下建立一个<code>3_deploy_contracts.js</code>文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var NenmoCoin = artifacts.require(&quot;./NenmoCoin.sol&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function(deployer) &#123;</span><br><span class=\"line\">  deployer.deploy(NenmoCoin);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>部署：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">truffle develop\t\t\t//进入开发环境</span><br><span class=\"line\">compile\t\t\t\t    //编译</span><br><span class=\"line\">migrate\t\t\t\t\t//部署在truffle环境上</span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">truffle(develop)&gt; var c</span><br><span class=\"line\">undefined</span><br><span class=\"line\">truffle(develop)&gt; c = NenmoCoin.deployed().then(instance =&gt; contract = instance)</span><br><span class=\"line\">TruffleContract &#123;</span><br><span class=\"line\">  constructor:</span><br><span class=\"line\">......</span><br><span class=\"line\">  allEvents: [Function: bound ],</span><br><span class=\"line\">  address: &apos;0x8f0483125fcb9aaaefa9209d8e9d7b9c8b9fb90f&apos;,</span><br><span class=\"line\">  transactionHash: null &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">truffle(develop)&gt; contract.balanceOf(web3.eth.coinbase)</span><br><span class=\"line\">BigNumber &#123; s: 1, e: 7, c: [ 21000000 ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.balanceOf(web3.eth.accounts[1])</span><br><span class=\"line\">BigNumber &#123; s: 1, e: 0, c: [ 0 ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.transfer(web3.eth.accounts[1], 100)</span><br><span class=\"line\">&#123; tx: &apos;0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc&apos;,</span><br><span class=\"line\">  receipt:</span><br><span class=\"line\">   &#123; transactionHash: &apos;0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc&apos;,</span><br><span class=\"line\">     transactionIndex: 0,</span><br><span class=\"line\">     blockHash: &apos;0xeb9546c74c6a897e05ecfe223238cfa80b3db4f37a567f02b5c1d20ffec7b6c3&apos;,</span><br><span class=\"line\">     blockNumber: 7,</span><br><span class=\"line\">     gasUsed: 51569,</span><br><span class=\"line\">     cumulativeGasUsed: 51569,</span><br><span class=\"line\">     contractAddress: null,</span><br><span class=\"line\">     logs: [ [Object] ],</span><br><span class=\"line\">     status: &apos;0x01&apos;,</span><br><span class=\"line\">     logsBloom: &apos;0xapos; &#125;,</span><br><span class=\"line\">  logs:</span><br><span class=\"line\">   [ &#123; logIndex: 0,</span><br><span class=\"line\">       transactionIndex: 0,</span><br><span class=\"line\">       transactionHash: &apos;0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc&apos;,</span><br><span class=\"line\">       blockHash: &apos;0xeb9546c74c6a897e05ecfe223238cfa80b3db4f37a567f02b5c1d20ffec7b6c3&apos;,</span><br><span class=\"line\">       blockNumber: 7,</span><br><span class=\"line\">       address: &apos;0x8f0483125fcb9aaaefa9209d8e9d7b9c8b9fb90f&apos;,</span><br><span class=\"line\">       type: &apos;mined&apos;,</span><br><span class=\"line\">       event: &apos;Transfer&apos;,</span><br><span class=\"line\">       args: [Object] &#125; ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.balanceOf(web3.eth.coinbase)</span><br><span class=\"line\">BigNumber &#123; s: 1, e: 7, c: [ 20999900 ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.balanceOf(web3.eth.accounts[1])</span><br><span class=\"line\">BigNumber &#123; s: 1, e: 2, c: [ 100 ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.name.call()</span><br><span class=\"line\">&apos;NenmoCoin&apos;</span><br><span class=\"line\">truffle(develop)&gt; contract.symbol.call()</span><br><span class=\"line\">&apos;NMB&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署到geth私链：\"><a href=\"#部署到geth私链：\" class=\"headerlink\" title=\"部署到geth私链：\"></a>部署到geth私链：</h3><p> attach 进入console：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">geth  attach ipc:/root/goproject/private-chain/geth.ipc</span><br></pre></td></tr></table></figure>\n<p>查看帐户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;personal</span><br><span class=\"line\">&gt;personal.newAccount(&quot;some-key&quot;)</span><br><span class=\"line\">&gt;personal</span><br><span class=\"line\">//此时我们应该看到两个帐户，我们使用帐户进行部署合约</span><br><span class=\"line\">&gt;miner.start()</span><br><span class=\"line\">&gt;eth.sendTransaction(&#123;from:eth.coinbase, to:eth.accounts[1], value: web3.toWei(10000, &quot;ether&quot;)&#125;)</span><br><span class=\"line\">&gt;personal.unlockAccount(eth.accounts[1])  //部署合约之前，必须把帐户进行解锁</span><br></pre></td></tr></table></figure>\n<p>查看truffle.js：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">     networks: &#123;</span><br><span class=\"line\">         development: &#123;</span><br><span class=\"line\">               host: &quot;192.168.116.56&quot;,</span><br><span class=\"line\">               port: 8989,</span><br><span class=\"line\">               network_id: &quot;123&quot;,</span><br><span class=\"line\">               from: &quot;0x528abd58142fbf77d4e648cd43458625297fa059&quot;,  //此处为解锁的帐户</span><br><span class=\"line\">               gas: 3000000,</span><br><span class=\"line\">               gasPrice: 100,</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>truffle migrate //部署到geth</p>\n<p>【truffle migrate】问题汇总：</p>\n<ul>\n<li>Error: exceeds block gas limit undefined</li>\n</ul>\n<p>当前合约所需的gas超过了区块的最大gas。这可能是由于创世区块的配置文件<code>genesis.json</code>中的参数<code>gasLimit</code>设置过小有关，</p>\n<p>解决方案：<br>    重置truffle.js中gas参数的大小；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//再次进入ipc</span><br><span class=\"line\">geth  attach ipc:/root/goproject/private-chain/geth.ipc</span><br></pre></td></tr></table></figure>\n<h3 id=\"在geth中查找已部署的合约\"><a href=\"#在geth中查找已部署的合约\" class=\"headerlink\" title=\"在geth中查找已部署的合约\"></a>在geth中查找已部署的合约</h3><p>从truffle 项目目录下，build/contracts/NewCoin.json获取abi；并由<a href=\"http://www.bejson.com/jsonviewernew/\" target=\"_blank\" rel=\"noopener\">http://www.bejson.com</a> 转成字符串；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var abi = JSON.parse($abi)</span><br><span class=\"line\">var address = &quot;0x8d014d58bfdc56408b2af6ef8e7b09eba1c8b940&quot;; //truffle migrate 生成的address</span><br><span class=\"line\">var newcoin = web3.eth.contract(abi).at(address)</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用合约中的方法：\"><a href=\"#调用合约中的方法：\" class=\"headerlink\" title=\"调用合约中的方法：\"></a>调用合约中的方法：</h3><ul>\n<li>call() 直接返回结果，不会写入区块链</li>\n<li>sendTransaction() 发送一笔交易，会写入区块链中，返回值是交易的哈希值。</li>\n</ul>\n<h3 id=\"ERC20-Token\"><a href=\"#ERC20-Token\" class=\"headerlink\" title=\"ERC20 Token\"></a>ERC20 Token</h3><p>ERC20是以太坊定义的一个代币标准。是一种发行代币合约必须要遵守的协议，该协议规定了几个参数：</p>\n<ul>\n<li>发行货币的名称</li>\n<li>简称</li>\n<li>发行量</li>\n<li>支持的函数</li>\n</ul>\n<p>只有支持了该协议才会被以太坊所认同；</p>\n<p>erc20 标准</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://github.com/ethereum/EIPs/issues/20</span></span><br><span class=\"line\">contract ERC20 &#123;</span><br><span class=\"line\">    function totalSupply() constant returns (<span class=\"keyword\">uint</span> totalSupply);</span><br><span class=\"line\">    function balanceOf(address _owner) constant returns (<span class=\"keyword\">uint</span> balance);</span><br><span class=\"line\">    function transfer(address _to, <span class=\"keyword\">uint</span> _value) returns (<span class=\"keyword\">bool</span> success);</span><br><span class=\"line\">    function transferFrom(address _from, address _to, <span class=\"keyword\">uint</span> _value) returns (<span class=\"keyword\">bool</span> success);</span><br><span class=\"line\">    function approve(address _spender, <span class=\"keyword\">uint</span> _value) returns (<span class=\"keyword\">bool</span> success);</span><br><span class=\"line\">    function allowance(address _owner, address _spender) constant returns (<span class=\"keyword\">uint</span> remaining);</span><br><span class=\"line\">    event Transfer(address indexed _from, address indexed _to, <span class=\"keyword\">uint</span> _value);</span><br><span class=\"line\">    event Approval(address indexed _owner, address indexed _spender, <span class=\"keyword\">uint</span> _value);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>solidity：</p>\n<ul>\n<li>address<ul>\n<li>属性：balances</li>\n<li>函数: send(), call(), delegatecall(), callcode()</li>\n</ul>\n</li>\n</ul>\n<p>solidity 语法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.jianshu.com/p/e8113bfa7694</span><br></pre></td></tr></table></figure></p>\n<p>对tx.data进行Keccak256（）编码；</p>\n<p>以太坊交易的类型：</p>\n<ul>\n<li>转账的交易</li>\n<li>创建合约的交易</li>\n<li>执行合约的交易</li>\n</ul>\n<p>参数是一个对象，在发送交易的时候指定不同的字段，区块链及链根据参数识别出对应类型的交易；</p>\n<p>转账交易：<br>转账是最简单的一种交易，从一个帐户向另一个帐户发送以太币<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web3.eth.sendTransaction(&#123;</span><br><span class=\"line\">    from: &quot;0x....&quot;,</span><br><span class=\"line\">    to:   &quot;0x....&quot;,</span><br><span class=\"line\">    value: 100000</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>创建合约的交易：<br>将合约部署到区块链节点上，通过发送交易来实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web3.eth.sendTransaction(&#123;</span><br><span class=\"line\">    from: &quot;交易的发送者也是合约的创建者&quot;,</span><br><span class=\"line\">    data: &quot;指定合约的abi&quot;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>to字段留空不填</p>\n<p>执行合约的交易：调用合约中的方法，需要将交易的to字段指定为调用的合约的地址， 通过data字段指定要调用的方法以及向该方法传递的参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web3.eth.sendTransaction(&#123;</span><br><span class=\"line\">    from: &quot;sender&apos;s address&quot;,</span><br><span class=\"line\">    to: &quot; contract address&quot;,</span><br><span class=\"line\">    data: &quot;目标方法和传递的参数&quot;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>data字段需要特殊的编码规则，一般使用SDK(web3.js)</p>\n<h3 id=\"web3-eth\"><a href=\"#web3-eth\" class=\"headerlink\" title=\"web3.eth\"></a>web3.eth</h3><p>包含以太坊区块链相关的方法</p>\n<ul>\n<li>web3.eth.gasprice  //gas当前单价</li>\n<li>web3.eth.accounts  //当前节点的帐户列表</li>\n<li>web3.eth.getBalance()</li>\n<li>web3.eth.getTransaction()<br>创建帐户</li>\n</ul>\n<p>gas limit: 这个交易的执行最都被允许使用的计算步骤<br>gas price: 交易发送者愿意支付的gas费用，一个单位的gas表示了执行一个基本指令；</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"solidity语法：\"><a href=\"#solidity语法：\" class=\"headerlink\" title=\"solidity语法：\"></a>solidity语法：</h3><p>写Solidity最大的不同在于，我们要随时计算好我们的gas消耗，方法的复杂度，变量类型的存储位置（memory，storage等等）都会决定gas的消耗量。</p>\n<p>以上编写合约在vim，编译在Remix，运行端在geth console。过程十分繁复，不适合大规模工程开发，需要通过Truffle来整合以上操作；</p>\n<p>一、环境配置：</p>\n<p>​    truffle依赖于nodejs，可能存在版本之间的兼容性问题，首先删除自带的nodejs和npm，再进行全安装；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove nodejs</span><br><span class=\"line\">sudo apt-get remove npm</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">which node</span><br><span class=\"line\">wget https://nodejs.org/dist/v8.8.0/node-v8.8.0-linux-x64.tar.gz</span><br><span class=\"line\">sudo tar -xf node-v8.8.0-linux-x64.tar.gz --directory /usr/local --strip-components 1</span><br><span class=\"line\">node --version</span><br><span class=\"line\">npm --version</span><br><span class=\"line\">sudo npm install -g truffle</span><br></pre></td></tr></table></figure>\n<p>二、</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. block.blockhash(uint blockNumber) returns (bytes32): 返回参数区块编号的hash值。（范围仅限于最近256块，还不包含当然块）</span><br><span class=\"line\">2. block.coinbase (address): 当前区块矿工地址</span><br><span class=\"line\">3. block.difficulty (uint): 当前区块难度</span><br><span class=\"line\">4. block.gaslimit (uint): 当前区块的gaslimit</span><br><span class=\"line\">5. block.number (uint): 当前区块编号</span><br><span class=\"line\">6. block.timestamp (uint): 当前区块的timestamp，使用UNIX时间秒</span><br><span class=\"line\">7. msg.data (bytes): 完整的calldata</span><br><span class=\"line\">8. msg.gas (uint): 剩余的gas</span><br><span class=\"line\">9. msg.sender (address): 信息的发送方 (当前调用)</span><br><span class=\"line\">10. msg.sig (bytes4): calldata的前四个字节 (i.e. 函数标识符)</span><br><span class=\"line\">11. msg.value (uint): 消息发送的wei的数量</span><br><span class=\"line\">12. now (uint): 当前区块的timestamp (block.timestamp别名)</span><br><span class=\"line\">13. tx.gasprice (uint): 交易的gas单价</span><br><span class=\"line\">14. tx.origin (address): 交易发送方地址(完全的链调用)</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、发币\"><a href=\"#三、发币\" class=\"headerlink\" title=\"三、发币\"></a>三、发币</h3><p>使用truffle init 来初始化项目；但truffle推出Boxes功能之后，我们可以直接套用react-box的样板，节省时间；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@keke:~/truffle-project/coin# truffle  unbox react-box</span><br><span class=\"line\">Downloading...</span><br><span class=\"line\">Unpacking...</span><br><span class=\"line\">Setting up...</span><br><span class=\"line\">Unbox successful. Sweet!</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\"></span><br><span class=\"line\">  Compile:              truffle compile</span><br><span class=\"line\">  Migrate:              truffle migrate</span><br><span class=\"line\">  Test contracts:       truffle test</span><br><span class=\"line\">  Test dapp:            npm test</span><br><span class=\"line\">  Run dev server:       npm run start</span><br><span class=\"line\">  Build for production: npm run build</span><br></pre></td></tr></table></figure>\n<p>编译自带的智能合约：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@keke:~/truffle-project/coin# truffle  compile</span><br><span class=\"line\">Compiling ./contracts/Migrations.sol...</span><br><span class=\"line\">Compiling ./contracts/SimpleStorage.sol...</span><br><span class=\"line\"></span><br><span class=\"line\">Compilation warnings encountered:</span><br><span class=\"line\"></span><br><span class=\"line\">/root/truffle-project/coin/contracts/Migrations.sol:11:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use &quot;constructor(...) &#123; ... &#125;&quot; instead.</span><br><span class=\"line\">  function Migrations() public &#123;</span><br><span class=\"line\">  ^ (Relevant source part starts here and spans across multiple lines).</span><br><span class=\"line\"></span><br><span class=\"line\">Writing artifacts to ./build/contracts</span><br></pre></td></tr></table></figure>\n<p>3、安装OpenZeppelin来简化加密钱包开发过程；</p>\n<p><code>OpenZeppelin</code>是一套能够给我们方便提供编写加密合约的函数库，同时里面也提供了兼容<code>ERC20</code>的智能合约。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install zeppelin-solidity</span><br></pre></td></tr></table></figure>\n<p>4、创建代币合约</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;../node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">contract NewCoin is StandardToken&#123;</span><br><span class=\"line\">    string public name = &quot;NewCoin&quot;;</span><br><span class=\"line\">    string public symbol = &quot;NC&quot;;</span><br><span class=\"line\">    uint8 public decimals = 8;</span><br><span class=\"line\">    uint256 public INITIAL_SUPPLY = 21000000;</span><br><span class=\"line\"></span><br><span class=\"line\">    function NewCoin()&#123;</span><br><span class=\"line\">        totalSupply_ = INITIAL_SUPPLY;</span><br><span class=\"line\">        balances[msg.sender] = INITIAL_SUPPLY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5、编译、部署和验证</p>\n<p>在<code>migrations/</code>目录下建立一个<code>3_deploy_contracts.js</code>文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var NenmoCoin = artifacts.require(&quot;./NenmoCoin.sol&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function(deployer) &#123;</span><br><span class=\"line\">  deployer.deploy(NenmoCoin);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>部署：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">truffle develop\t\t\t//进入开发环境</span><br><span class=\"line\">compile\t\t\t\t    //编译</span><br><span class=\"line\">migrate\t\t\t\t\t//部署在truffle环境上</span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">truffle(develop)&gt; var c</span><br><span class=\"line\">undefined</span><br><span class=\"line\">truffle(develop)&gt; c = NenmoCoin.deployed().then(instance =&gt; contract = instance)</span><br><span class=\"line\">TruffleContract &#123;</span><br><span class=\"line\">  constructor:</span><br><span class=\"line\">......</span><br><span class=\"line\">  allEvents: [Function: bound ],</span><br><span class=\"line\">  address: &apos;0x8f0483125fcb9aaaefa9209d8e9d7b9c8b9fb90f&apos;,</span><br><span class=\"line\">  transactionHash: null &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">truffle(develop)&gt; contract.balanceOf(web3.eth.coinbase)</span><br><span class=\"line\">BigNumber &#123; s: 1, e: 7, c: [ 21000000 ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.balanceOf(web3.eth.accounts[1])</span><br><span class=\"line\">BigNumber &#123; s: 1, e: 0, c: [ 0 ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.transfer(web3.eth.accounts[1], 100)</span><br><span class=\"line\">&#123; tx: &apos;0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc&apos;,</span><br><span class=\"line\">  receipt:</span><br><span class=\"line\">   &#123; transactionHash: &apos;0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc&apos;,</span><br><span class=\"line\">     transactionIndex: 0,</span><br><span class=\"line\">     blockHash: &apos;0xeb9546c74c6a897e05ecfe223238cfa80b3db4f37a567f02b5c1d20ffec7b6c3&apos;,</span><br><span class=\"line\">     blockNumber: 7,</span><br><span class=\"line\">     gasUsed: 51569,</span><br><span class=\"line\">     cumulativeGasUsed: 51569,</span><br><span class=\"line\">     contractAddress: null,</span><br><span class=\"line\">     logs: [ [Object] ],</span><br><span class=\"line\">     status: &apos;0x01&apos;,</span><br><span class=\"line\">     logsBloom: &apos;0x00000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000010000008000000000008000000000000000080000000000000000000000000000000000000000000000000000000000000000010000000000000000000010000000000000000400000000000000000000000010000000002000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000&apos; &#125;,</span><br><span class=\"line\">  logs:</span><br><span class=\"line\">   [ &#123; logIndex: 0,</span><br><span class=\"line\">       transactionIndex: 0,</span><br><span class=\"line\">       transactionHash: &apos;0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc&apos;,</span><br><span class=\"line\">       blockHash: &apos;0xeb9546c74c6a897e05ecfe223238cfa80b3db4f37a567f02b5c1d20ffec7b6c3&apos;,</span><br><span class=\"line\">       blockNumber: 7,</span><br><span class=\"line\">       address: &apos;0x8f0483125fcb9aaaefa9209d8e9d7b9c8b9fb90f&apos;,</span><br><span class=\"line\">       type: &apos;mined&apos;,</span><br><span class=\"line\">       event: &apos;Transfer&apos;,</span><br><span class=\"line\">       args: [Object] &#125; ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.balanceOf(web3.eth.coinbase)</span><br><span class=\"line\">BigNumber &#123; s: 1, e: 7, c: [ 20999900 ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.balanceOf(web3.eth.accounts[1])</span><br><span class=\"line\">BigNumber &#123; s: 1, e: 2, c: [ 100 ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.name.call()</span><br><span class=\"line\">&apos;NenmoCoin&apos;</span><br><span class=\"line\">truffle(develop)&gt; contract.symbol.call()</span><br><span class=\"line\">&apos;NMB&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署到geth私链：\"><a href=\"#部署到geth私链：\" class=\"headerlink\" title=\"部署到geth私链：\"></a>部署到geth私链：</h3><p> attach 进入console：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">geth  attach ipc:/root/goproject/private-chain/geth.ipc</span><br></pre></td></tr></table></figure>\n<p>查看帐户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;personal</span><br><span class=\"line\">&gt;personal.newAccount(&quot;some-key&quot;)</span><br><span class=\"line\">&gt;personal</span><br><span class=\"line\">//此时我们应该看到两个帐户，我们使用帐户进行部署合约</span><br><span class=\"line\">&gt;miner.start()</span><br><span class=\"line\">&gt;eth.sendTransaction(&#123;from:eth.coinbase, to:eth.accounts[1], value: web3.toWei(10000, &quot;ether&quot;)&#125;)</span><br><span class=\"line\">&gt;personal.unlockAccount(eth.accounts[1])  //部署合约之前，必须把帐户进行解锁</span><br></pre></td></tr></table></figure>\n<p>查看truffle.js：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">     networks: &#123;</span><br><span class=\"line\">         development: &#123;</span><br><span class=\"line\">               host: &quot;192.168.116.56&quot;,</span><br><span class=\"line\">               port: 8989,</span><br><span class=\"line\">               network_id: &quot;123&quot;,</span><br><span class=\"line\">               from: &quot;0x528abd58142fbf77d4e648cd43458625297fa059&quot;,  //此处为解锁的帐户</span><br><span class=\"line\">               gas: 3000000,</span><br><span class=\"line\">               gasPrice: 100,</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>truffle migrate //部署到geth</p>\n<p>【truffle migrate】问题汇总：</p>\n<ul>\n<li>Error: exceeds block gas limit undefined</li>\n</ul>\n<p>当前合约所需的gas超过了区块的最大gas。这可能是由于创世区块的配置文件<code>genesis.json</code>中的参数<code>gasLimit</code>设置过小有关，</p>\n<p>解决方案：<br>    重置truffle.js中gas参数的大小；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//再次进入ipc</span><br><span class=\"line\">geth  attach ipc:/root/goproject/private-chain/geth.ipc</span><br></pre></td></tr></table></figure>\n<h3 id=\"在geth中查找已部署的合约\"><a href=\"#在geth中查找已部署的合约\" class=\"headerlink\" title=\"在geth中查找已部署的合约\"></a>在geth中查找已部署的合约</h3><p>从truffle 项目目录下，build/contracts/NewCoin.json获取abi；并由<a href=\"http://www.bejson.com/jsonviewernew/\" target=\"_blank\" rel=\"noopener\">http://www.bejson.com</a> 转成字符串；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var abi = JSON.parse($abi)</span><br><span class=\"line\">var address = &quot;0x8d014d58bfdc56408b2af6ef8e7b09eba1c8b940&quot;; //truffle migrate 生成的address</span><br><span class=\"line\">var newcoin = web3.eth.contract(abi).at(address)</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用合约中的方法：\"><a href=\"#调用合约中的方法：\" class=\"headerlink\" title=\"调用合约中的方法：\"></a>调用合约中的方法：</h3><ul>\n<li>call() 直接返回结果，不会写入区块链</li>\n<li>sendTransaction() 发送一笔交易，会写入区块链中，返回值是交易的哈希值。</li>\n</ul>\n<h3 id=\"ERC20-Token\"><a href=\"#ERC20-Token\" class=\"headerlink\" title=\"ERC20 Token\"></a>ERC20 Token</h3><p>ERC20是以太坊定义的一个代币标准。是一种发行代币合约必须要遵守的协议，该协议规定了几个参数：</p>\n<ul>\n<li>发行货币的名称</li>\n<li>简称</li>\n<li>发行量</li>\n<li>支持的函数</li>\n</ul>\n<p>只有支持了该协议才会被以太坊所认同；</p>\n<p>erc20 标准</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://github.com/ethereum/EIPs/issues/20</span></span><br><span class=\"line\">contract ERC20 &#123;</span><br><span class=\"line\">    function totalSupply() constant returns (<span class=\"keyword\">uint</span> totalSupply);</span><br><span class=\"line\">    function balanceOf(address _owner) constant returns (<span class=\"keyword\">uint</span> balance);</span><br><span class=\"line\">    function transfer(address _to, <span class=\"keyword\">uint</span> _value) returns (<span class=\"keyword\">bool</span> success);</span><br><span class=\"line\">    function transferFrom(address _from, address _to, <span class=\"keyword\">uint</span> _value) returns (<span class=\"keyword\">bool</span> success);</span><br><span class=\"line\">    function approve(address _spender, <span class=\"keyword\">uint</span> _value) returns (<span class=\"keyword\">bool</span> success);</span><br><span class=\"line\">    function allowance(address _owner, address _spender) constant returns (<span class=\"keyword\">uint</span> remaining);</span><br><span class=\"line\">    event Transfer(address indexed _from, address indexed _to, <span class=\"keyword\">uint</span> _value);</span><br><span class=\"line\">    event Approval(address indexed _owner, address indexed _spender, <span class=\"keyword\">uint</span> _value);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>solidity：</p>\n<ul>\n<li>address<ul>\n<li>属性：balances</li>\n<li>函数: send(), call(), delegatecall(), callcode()</li>\n</ul>\n</li>\n</ul>\n<p>solidity 语法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.jianshu.com/p/e8113bfa7694</span><br></pre></td></tr></table></figure></p>\n<p>对tx.data进行Keccak256（）编码；</p>\n<p>以太坊交易的类型：</p>\n<ul>\n<li>转账的交易</li>\n<li>创建合约的交易</li>\n<li>执行合约的交易</li>\n</ul>\n<p>参数是一个对象，在发送交易的时候指定不同的字段，区块链及链根据参数识别出对应类型的交易；</p>\n<p>转账交易：<br>转账是最简单的一种交易，从一个帐户向另一个帐户发送以太币<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web3.eth.sendTransaction(&#123;</span><br><span class=\"line\">    from: &quot;0x....&quot;,</span><br><span class=\"line\">    to:   &quot;0x....&quot;,</span><br><span class=\"line\">    value: 100000</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>创建合约的交易：<br>将合约部署到区块链节点上，通过发送交易来实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web3.eth.sendTransaction(&#123;</span><br><span class=\"line\">    from: &quot;交易的发送者也是合约的创建者&quot;,</span><br><span class=\"line\">    data: &quot;指定合约的abi&quot;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>to字段留空不填</p>\n<p>执行合约的交易：调用合约中的方法，需要将交易的to字段指定为调用的合约的地址， 通过data字段指定要调用的方法以及向该方法传递的参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web3.eth.sendTransaction(&#123;</span><br><span class=\"line\">    from: &quot;sender&apos;s address&quot;,</span><br><span class=\"line\">    to: &quot; contract address&quot;,</span><br><span class=\"line\">    data: &quot;目标方法和传递的参数&quot;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>data字段需要特殊的编码规则，一般使用SDK(web3.js)</p>\n<h3 id=\"web3-eth\"><a href=\"#web3-eth\" class=\"headerlink\" title=\"web3.eth\"></a>web3.eth</h3><p>包含以太坊区块链相关的方法</p>\n<ul>\n<li>web3.eth.gasprice  //gas当前单价</li>\n<li>web3.eth.accounts  //当前节点的帐户列表</li>\n<li>web3.eth.getBalance()</li>\n<li>web3.eth.getTransaction()<br>创建帐户</li>\n</ul>\n<p>gas limit: 这个交易的执行最都被允许使用的计算步骤<br>gas price: 交易发送者愿意支付的gas费用，一个单位的gas表示了执行一个基本指令；</p>\n"},{"title":"paxos","_content":"\n### 这个leader节点是怎么确定的？\n答案：zookeeper系统自己选举出来的，所有server节点（observer除外），都参与这个选举。这样做的好处是：当现在leader挂掉了之后，系统可以重新选举一个节点做leader。\nZookeeper的选举算法能保证：只要超过半数节点还活着，就一定能选举出唯一个一个节点作为leader。\n\n- 选举发生时机\n   - 当任何一个节点进入looking状态时，选举开始，进入looking状态有如下原因：\n   1、节点刚启动，使自己进入选举状态\n   2、发现leader节点挂掉了\n   Zookeeper中的leader怎么知道follower还活着？follower怎么知道leader还活着？leader会定时向follower发ping消息；follower会定时向leader发ping消息。当发现无法ping通leader时，就会将自己的状态改为LOOKING，并发起新一轮选举。处于选举模式时，zookeeper服务不可用。\n- 一个节点成为leader条件\n    一个节点要成为leader，必须得到至少n/2+1（即半数以上节点）投票，实际上，在实现时，还可以考虑其它规则，比如节点权重。\n    为什么要保证至少n/2+1的节点同意？因为这样能保证本节点得到多数派的支持。因为每一个节点，只能支持一个节点成为leader，因此，只要一个节点获得至少n/2+1选票，就一定会比其它任何节点得到的选票多。\n    这个规则意味着，如果超过半数以上的节点挂掉，zookeeper是选举不出leader节点的，因此，zookeeper集群最多允许n/2节点故障。\n\n### 选举leader中涉及到的问题\n  选举算法目标是确保一定要选出一个唯一的leader节点。这有两层含义：\n    - 一定要选出一个节点作为leader\n    - 这个leader一定要唯一\n    为此，要解决如下问题：\n      1、在一次选举中，节点应该把票投给谁？\n      规则：每个节点有一个唯一id，在选举中，节点总是把票投给id最大的那个节点，这样，id大的节点更有可能成为leader，天生就是做领导的料。\n      2、在一次选举过程中，有些节点由于没有启动而没参加（有些人去国外了，没有赶上这次大选，当他回国后，进入looking状态，要发起选举，怎么办？），后来这个节点启动了，此时要求选举，怎么解决？\n      3、运行过程中，leader节点挂掉了，怎么办？\n        此时其它节点会发现leader挂了，会发起新一轮选举，最后选出新leader。\n\n### 尝试解决方案\n    1、直接指定一个节点做leader，例如，永远都让id最大节点当leader，这个想法最简单。问题：这个节点挂了怎么办？这会出现单点问题。\n    2、每次选举中，让活着节点中，id最大节点当leader。问题：1、其它节点怎么知道活着节点中，谁id最大？\n\n### 选举算法流程\n    选举开始时，每个节点为自己生成一张投票，推荐自己成为leader，并把投票发送给其它节点，这相当于paxos算法中的proposer角色。接下来，节点启动一个接收线程接收其它节点发送过来的投票，并对选票进行处理，这相当于paxos中的acceptor角色。简单说，节点之间通过这种消息发送（投票），最终选举出leader。\n\n    当收到其他它节点的选票之后，会和自己的投票比较，如果比自己的投票好（比如推荐的leader的id更大，选举轮数更新），则更新自己的选票，接下来把收到的选票放在选票列表里（该列表存储了所有节点的投票，是一个key-value结构，key为节点的id，value为该节点的投票）。并再次把自己的投票发送给其它节点。\n\n    接下来节点会统计选票列表中每个节点获得的票数，如果有一个节点获得超过半数的选票，则认为该节点是leader。如果本节点就是，则将自身的状态置为leading，表明自己是leader；否则将自己的状态置为following，表明自己是follower。\n\n    通过若干轮的消息交换，最终，会有一个节点获得超过一半的选票而成为leader。这种方法的精髓在于，每个节点在不需要获得所有节点的信息（投票结果）的前提下，达成一致意见，选出leader\n\n### 运行机制\n    选举leader之后，只有leader节点才能发起提案，其他节点(Peon角色)根据本地历史选择接受或拒绝Leader的提案，并向Leader回复结果。Leader统计并提交超过半数Paxos节点接受的提案。\n\n### 常规过程（Normal Case）\n常规服务状态下存在一个唯一的Leader以及一个已经确认的大多数节点Quorum，Leader将每个写请求被封装成一个新的提案发送给Quorum中的每个节点，其过程如下，注意这里的Quorum固定：\n- Leader将提案追加在本地Log，并向Quorum中的所有节点发送begin消息，消息中携带提案值、Pn及指向前一条提案version的last_commit；\n- Peon收到begin消息，如果accept过更高的pn则忽略，否则提案写入本地Log并返回accept消息。同时Peon会将当前的lease过期掉，在下一次收到lease前不再提供服务；\n- Leader收到全部Quorum的accept后进行commit。将Log项在本地DB执行，返回调用方并向所有Quorum节点发送commit消息；\n- Peon收到commit消息同样在本地DB执行，完成commit；\n- Leader追加lease消息将整个集群带入到active状态。\n\n### 选主（Leader Election）\nPeon的Lease超时或Leader任何消息超时都会将整个集群带回到Probing状态，整个集群确定新的Members并最终进入Election状态进行选主。每个节点会在本地维护并在通信中交互选主轮次编号election_epoch，election_epoch单调递增，会在开始选主和选主结束时都加一，因此可以根据其奇偶来判断是否在选主轮次，选主过程如下：\n\n将election_epoch加1，向Monmap中的所有其他节点发送Propose消息；\n收到Propose消息的节点进入election状态并仅对更新的election_epoch且Rank值大于自己的消息答复Ack。这里的Rank简单的由ip大小决定。每个节点在每个election_epoch仅做一次Ack，这就保证最终的Leader一定获得了大多数节点的支持；\n发送Propose的节点统计收到的Ack数，超时时间内收到Monmap中大多数的ack后可进入victory过程，这些发送ack的节点形成Quorum，election_epoch加1，结束Election阶段并向Quorum中所有节点发送Victory消息，并告知自己的epoch及当前Quorum，之后进入Leader状态；\n\n收到VICTORY消息的节点完成Election，进入Peon状态；\n","source":"_posts/go_paxos.md","raw":"---\n  title: paxos\n---\n\n### 这个leader节点是怎么确定的？\n答案：zookeeper系统自己选举出来的，所有server节点（observer除外），都参与这个选举。这样做的好处是：当现在leader挂掉了之后，系统可以重新选举一个节点做leader。\nZookeeper的选举算法能保证：只要超过半数节点还活着，就一定能选举出唯一个一个节点作为leader。\n\n- 选举发生时机\n   - 当任何一个节点进入looking状态时，选举开始，进入looking状态有如下原因：\n   1、节点刚启动，使自己进入选举状态\n   2、发现leader节点挂掉了\n   Zookeeper中的leader怎么知道follower还活着？follower怎么知道leader还活着？leader会定时向follower发ping消息；follower会定时向leader发ping消息。当发现无法ping通leader时，就会将自己的状态改为LOOKING，并发起新一轮选举。处于选举模式时，zookeeper服务不可用。\n- 一个节点成为leader条件\n    一个节点要成为leader，必须得到至少n/2+1（即半数以上节点）投票，实际上，在实现时，还可以考虑其它规则，比如节点权重。\n    为什么要保证至少n/2+1的节点同意？因为这样能保证本节点得到多数派的支持。因为每一个节点，只能支持一个节点成为leader，因此，只要一个节点获得至少n/2+1选票，就一定会比其它任何节点得到的选票多。\n    这个规则意味着，如果超过半数以上的节点挂掉，zookeeper是选举不出leader节点的，因此，zookeeper集群最多允许n/2节点故障。\n\n### 选举leader中涉及到的问题\n  选举算法目标是确保一定要选出一个唯一的leader节点。这有两层含义：\n    - 一定要选出一个节点作为leader\n    - 这个leader一定要唯一\n    为此，要解决如下问题：\n      1、在一次选举中，节点应该把票投给谁？\n      规则：每个节点有一个唯一id，在选举中，节点总是把票投给id最大的那个节点，这样，id大的节点更有可能成为leader，天生就是做领导的料。\n      2、在一次选举过程中，有些节点由于没有启动而没参加（有些人去国外了，没有赶上这次大选，当他回国后，进入looking状态，要发起选举，怎么办？），后来这个节点启动了，此时要求选举，怎么解决？\n      3、运行过程中，leader节点挂掉了，怎么办？\n        此时其它节点会发现leader挂了，会发起新一轮选举，最后选出新leader。\n\n### 尝试解决方案\n    1、直接指定一个节点做leader，例如，永远都让id最大节点当leader，这个想法最简单。问题：这个节点挂了怎么办？这会出现单点问题。\n    2、每次选举中，让活着节点中，id最大节点当leader。问题：1、其它节点怎么知道活着节点中，谁id最大？\n\n### 选举算法流程\n    选举开始时，每个节点为自己生成一张投票，推荐自己成为leader，并把投票发送给其它节点，这相当于paxos算法中的proposer角色。接下来，节点启动一个接收线程接收其它节点发送过来的投票，并对选票进行处理，这相当于paxos中的acceptor角色。简单说，节点之间通过这种消息发送（投票），最终选举出leader。\n\n    当收到其他它节点的选票之后，会和自己的投票比较，如果比自己的投票好（比如推荐的leader的id更大，选举轮数更新），则更新自己的选票，接下来把收到的选票放在选票列表里（该列表存储了所有节点的投票，是一个key-value结构，key为节点的id，value为该节点的投票）。并再次把自己的投票发送给其它节点。\n\n    接下来节点会统计选票列表中每个节点获得的票数，如果有一个节点获得超过半数的选票，则认为该节点是leader。如果本节点就是，则将自身的状态置为leading，表明自己是leader；否则将自己的状态置为following，表明自己是follower。\n\n    通过若干轮的消息交换，最终，会有一个节点获得超过一半的选票而成为leader。这种方法的精髓在于，每个节点在不需要获得所有节点的信息（投票结果）的前提下，达成一致意见，选出leader\n\n### 运行机制\n    选举leader之后，只有leader节点才能发起提案，其他节点(Peon角色)根据本地历史选择接受或拒绝Leader的提案，并向Leader回复结果。Leader统计并提交超过半数Paxos节点接受的提案。\n\n### 常规过程（Normal Case）\n常规服务状态下存在一个唯一的Leader以及一个已经确认的大多数节点Quorum，Leader将每个写请求被封装成一个新的提案发送给Quorum中的每个节点，其过程如下，注意这里的Quorum固定：\n- Leader将提案追加在本地Log，并向Quorum中的所有节点发送begin消息，消息中携带提案值、Pn及指向前一条提案version的last_commit；\n- Peon收到begin消息，如果accept过更高的pn则忽略，否则提案写入本地Log并返回accept消息。同时Peon会将当前的lease过期掉，在下一次收到lease前不再提供服务；\n- Leader收到全部Quorum的accept后进行commit。将Log项在本地DB执行，返回调用方并向所有Quorum节点发送commit消息；\n- Peon收到commit消息同样在本地DB执行，完成commit；\n- Leader追加lease消息将整个集群带入到active状态。\n\n### 选主（Leader Election）\nPeon的Lease超时或Leader任何消息超时都会将整个集群带回到Probing状态，整个集群确定新的Members并最终进入Election状态进行选主。每个节点会在本地维护并在通信中交互选主轮次编号election_epoch，election_epoch单调递增，会在开始选主和选主结束时都加一，因此可以根据其奇偶来判断是否在选主轮次，选主过程如下：\n\n将election_epoch加1，向Monmap中的所有其他节点发送Propose消息；\n收到Propose消息的节点进入election状态并仅对更新的election_epoch且Rank值大于自己的消息答复Ack。这里的Rank简单的由ip大小决定。每个节点在每个election_epoch仅做一次Ack，这就保证最终的Leader一定获得了大多数节点的支持；\n发送Propose的节点统计收到的Ack数，超时时间内收到Monmap中大多数的ack后可进入victory过程，这些发送ack的节点形成Quorum，election_epoch加1，结束Election阶段并向Quorum中所有节点发送Victory消息，并告知自己的epoch及当前Quorum，之后进入Leader状态；\n\n收到VICTORY消息的节点完成Election，进入Peon状态；\n","slug":"go_paxos","published":1,"date":"2018-08-07T02:39:41.759Z","updated":"2018-09-04T07:41:24.210Z","_id":"cjl25n9r3000514hajmbpxj41","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"这个leader节点是怎么确定的？\"><a href=\"#这个leader节点是怎么确定的？\" class=\"headerlink\" title=\"这个leader节点是怎么确定的？\"></a>这个leader节点是怎么确定的？</h3><p>答案：zookeeper系统自己选举出来的，所有server节点（observer除外），都参与这个选举。这样做的好处是：当现在leader挂掉了之后，系统可以重新选举一个节点做leader。<br>Zookeeper的选举算法能保证：只要超过半数节点还活着，就一定能选举出唯一个一个节点作为leader。</p>\n<ul>\n<li>选举发生时机<ul>\n<li>当任何一个节点进入looking状态时，选举开始，进入looking状态有如下原因：<br>1、节点刚启动，使自己进入选举状态<br>2、发现leader节点挂掉了<br>Zookeeper中的leader怎么知道follower还活着？follower怎么知道leader还活着？leader会定时向follower发ping消息；follower会定时向leader发ping消息。当发现无法ping通leader时，就会将自己的状态改为LOOKING，并发起新一轮选举。处于选举模式时，zookeeper服务不可用。</li>\n</ul>\n</li>\n<li>一个节点成为leader条件<br>  一个节点要成为leader，必须得到至少n/2+1（即半数以上节点）投票，实际上，在实现时，还可以考虑其它规则，比如节点权重。<br>  为什么要保证至少n/2+1的节点同意？因为这样能保证本节点得到多数派的支持。因为每一个节点，只能支持一个节点成为leader，因此，只要一个节点获得至少n/2+1选票，就一定会比其它任何节点得到的选票多。<br>  这个规则意味着，如果超过半数以上的节点挂掉，zookeeper是选举不出leader节点的，因此，zookeeper集群最多允许n/2节点故障。</li>\n</ul>\n<h3 id=\"选举leader中涉及到的问题\"><a href=\"#选举leader中涉及到的问题\" class=\"headerlink\" title=\"选举leader中涉及到的问题\"></a>选举leader中涉及到的问题</h3><p>  选举算法目标是确保一定要选出一个唯一的leader节点。这有两层含义：</p>\n<pre><code>- 一定要选出一个节点作为leader\n- 这个leader一定要唯一\n为此，要解决如下问题：\n  1、在一次选举中，节点应该把票投给谁？\n  规则：每个节点有一个唯一id，在选举中，节点总是把票投给id最大的那个节点，这样，id大的节点更有可能成为leader，天生就是做领导的料。\n  2、在一次选举过程中，有些节点由于没有启动而没参加（有些人去国外了，没有赶上这次大选，当他回国后，进入looking状态，要发起选举，怎么办？），后来这个节点启动了，此时要求选举，怎么解决？\n  3、运行过程中，leader节点挂掉了，怎么办？\n    此时其它节点会发现leader挂了，会发起新一轮选举，最后选出新leader。\n</code></pre><h3 id=\"尝试解决方案\"><a href=\"#尝试解决方案\" class=\"headerlink\" title=\"尝试解决方案\"></a>尝试解决方案</h3><pre><code>1、直接指定一个节点做leader，例如，永远都让id最大节点当leader，这个想法最简单。问题：这个节点挂了怎么办？这会出现单点问题。\n2、每次选举中，让活着节点中，id最大节点当leader。问题：1、其它节点怎么知道活着节点中，谁id最大？\n</code></pre><h3 id=\"选举算法流程\"><a href=\"#选举算法流程\" class=\"headerlink\" title=\"选举算法流程\"></a>选举算法流程</h3><pre><code>选举开始时，每个节点为自己生成一张投票，推荐自己成为leader，并把投票发送给其它节点，这相当于paxos算法中的proposer角色。接下来，节点启动一个接收线程接收其它节点发送过来的投票，并对选票进行处理，这相当于paxos中的acceptor角色。简单说，节点之间通过这种消息发送（投票），最终选举出leader。\n\n当收到其他它节点的选票之后，会和自己的投票比较，如果比自己的投票好（比如推荐的leader的id更大，选举轮数更新），则更新自己的选票，接下来把收到的选票放在选票列表里（该列表存储了所有节点的投票，是一个key-value结构，key为节点的id，value为该节点的投票）。并再次把自己的投票发送给其它节点。\n\n接下来节点会统计选票列表中每个节点获得的票数，如果有一个节点获得超过半数的选票，则认为该节点是leader。如果本节点就是，则将自身的状态置为leading，表明自己是leader；否则将自己的状态置为following，表明自己是follower。\n\n通过若干轮的消息交换，最终，会有一个节点获得超过一半的选票而成为leader。这种方法的精髓在于，每个节点在不需要获得所有节点的信息（投票结果）的前提下，达成一致意见，选出leader\n</code></pre><h3 id=\"运行机制\"><a href=\"#运行机制\" class=\"headerlink\" title=\"运行机制\"></a>运行机制</h3><pre><code>选举leader之后，只有leader节点才能发起提案，其他节点(Peon角色)根据本地历史选择接受或拒绝Leader的提案，并向Leader回复结果。Leader统计并提交超过半数Paxos节点接受的提案。\n</code></pre><h3 id=\"常规过程（Normal-Case）\"><a href=\"#常规过程（Normal-Case）\" class=\"headerlink\" title=\"常规过程（Normal Case）\"></a>常规过程（Normal Case）</h3><p>常规服务状态下存在一个唯一的Leader以及一个已经确认的大多数节点Quorum，Leader将每个写请求被封装成一个新的提案发送给Quorum中的每个节点，其过程如下，注意这里的Quorum固定：</p>\n<ul>\n<li>Leader将提案追加在本地Log，并向Quorum中的所有节点发送begin消息，消息中携带提案值、Pn及指向前一条提案version的last_commit；</li>\n<li>Peon收到begin消息，如果accept过更高的pn则忽略，否则提案写入本地Log并返回accept消息。同时Peon会将当前的lease过期掉，在下一次收到lease前不再提供服务；</li>\n<li>Leader收到全部Quorum的accept后进行commit。将Log项在本地DB执行，返回调用方并向所有Quorum节点发送commit消息；</li>\n<li>Peon收到commit消息同样在本地DB执行，完成commit；</li>\n<li>Leader追加lease消息将整个集群带入到active状态。</li>\n</ul>\n<h3 id=\"选主（Leader-Election）\"><a href=\"#选主（Leader-Election）\" class=\"headerlink\" title=\"选主（Leader Election）\"></a>选主（Leader Election）</h3><p>Peon的Lease超时或Leader任何消息超时都会将整个集群带回到Probing状态，整个集群确定新的Members并最终进入Election状态进行选主。每个节点会在本地维护并在通信中交互选主轮次编号election_epoch，election_epoch单调递增，会在开始选主和选主结束时都加一，因此可以根据其奇偶来判断是否在选主轮次，选主过程如下：</p>\n<p>将election_epoch加1，向Monmap中的所有其他节点发送Propose消息；<br>收到Propose消息的节点进入election状态并仅对更新的election_epoch且Rank值大于自己的消息答复Ack。这里的Rank简单的由ip大小决定。每个节点在每个election_epoch仅做一次Ack，这就保证最终的Leader一定获得了大多数节点的支持；<br>发送Propose的节点统计收到的Ack数，超时时间内收到Monmap中大多数的ack后可进入victory过程，这些发送ack的节点形成Quorum，election_epoch加1，结束Election阶段并向Quorum中所有节点发送Victory消息，并告知自己的epoch及当前Quorum，之后进入Leader状态；</p>\n<p>收到VICTORY消息的节点完成Election，进入Peon状态；</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"这个leader节点是怎么确定的？\"><a href=\"#这个leader节点是怎么确定的？\" class=\"headerlink\" title=\"这个leader节点是怎么确定的？\"></a>这个leader节点是怎么确定的？</h3><p>答案：zookeeper系统自己选举出来的，所有server节点（observer除外），都参与这个选举。这样做的好处是：当现在leader挂掉了之后，系统可以重新选举一个节点做leader。<br>Zookeeper的选举算法能保证：只要超过半数节点还活着，就一定能选举出唯一个一个节点作为leader。</p>\n<ul>\n<li>选举发生时机<ul>\n<li>当任何一个节点进入looking状态时，选举开始，进入looking状态有如下原因：<br>1、节点刚启动，使自己进入选举状态<br>2、发现leader节点挂掉了<br>Zookeeper中的leader怎么知道follower还活着？follower怎么知道leader还活着？leader会定时向follower发ping消息；follower会定时向leader发ping消息。当发现无法ping通leader时，就会将自己的状态改为LOOKING，并发起新一轮选举。处于选举模式时，zookeeper服务不可用。</li>\n</ul>\n</li>\n<li>一个节点成为leader条件<br>  一个节点要成为leader，必须得到至少n/2+1（即半数以上节点）投票，实际上，在实现时，还可以考虑其它规则，比如节点权重。<br>  为什么要保证至少n/2+1的节点同意？因为这样能保证本节点得到多数派的支持。因为每一个节点，只能支持一个节点成为leader，因此，只要一个节点获得至少n/2+1选票，就一定会比其它任何节点得到的选票多。<br>  这个规则意味着，如果超过半数以上的节点挂掉，zookeeper是选举不出leader节点的，因此，zookeeper集群最多允许n/2节点故障。</li>\n</ul>\n<h3 id=\"选举leader中涉及到的问题\"><a href=\"#选举leader中涉及到的问题\" class=\"headerlink\" title=\"选举leader中涉及到的问题\"></a>选举leader中涉及到的问题</h3><p>  选举算法目标是确保一定要选出一个唯一的leader节点。这有两层含义：</p>\n<pre><code>- 一定要选出一个节点作为leader\n- 这个leader一定要唯一\n为此，要解决如下问题：\n  1、在一次选举中，节点应该把票投给谁？\n  规则：每个节点有一个唯一id，在选举中，节点总是把票投给id最大的那个节点，这样，id大的节点更有可能成为leader，天生就是做领导的料。\n  2、在一次选举过程中，有些节点由于没有启动而没参加（有些人去国外了，没有赶上这次大选，当他回国后，进入looking状态，要发起选举，怎么办？），后来这个节点启动了，此时要求选举，怎么解决？\n  3、运行过程中，leader节点挂掉了，怎么办？\n    此时其它节点会发现leader挂了，会发起新一轮选举，最后选出新leader。\n</code></pre><h3 id=\"尝试解决方案\"><a href=\"#尝试解决方案\" class=\"headerlink\" title=\"尝试解决方案\"></a>尝试解决方案</h3><pre><code>1、直接指定一个节点做leader，例如，永远都让id最大节点当leader，这个想法最简单。问题：这个节点挂了怎么办？这会出现单点问题。\n2、每次选举中，让活着节点中，id最大节点当leader。问题：1、其它节点怎么知道活着节点中，谁id最大？\n</code></pre><h3 id=\"选举算法流程\"><a href=\"#选举算法流程\" class=\"headerlink\" title=\"选举算法流程\"></a>选举算法流程</h3><pre><code>选举开始时，每个节点为自己生成一张投票，推荐自己成为leader，并把投票发送给其它节点，这相当于paxos算法中的proposer角色。接下来，节点启动一个接收线程接收其它节点发送过来的投票，并对选票进行处理，这相当于paxos中的acceptor角色。简单说，节点之间通过这种消息发送（投票），最终选举出leader。\n\n当收到其他它节点的选票之后，会和自己的投票比较，如果比自己的投票好（比如推荐的leader的id更大，选举轮数更新），则更新自己的选票，接下来把收到的选票放在选票列表里（该列表存储了所有节点的投票，是一个key-value结构，key为节点的id，value为该节点的投票）。并再次把自己的投票发送给其它节点。\n\n接下来节点会统计选票列表中每个节点获得的票数，如果有一个节点获得超过半数的选票，则认为该节点是leader。如果本节点就是，则将自身的状态置为leading，表明自己是leader；否则将自己的状态置为following，表明自己是follower。\n\n通过若干轮的消息交换，最终，会有一个节点获得超过一半的选票而成为leader。这种方法的精髓在于，每个节点在不需要获得所有节点的信息（投票结果）的前提下，达成一致意见，选出leader\n</code></pre><h3 id=\"运行机制\"><a href=\"#运行机制\" class=\"headerlink\" title=\"运行机制\"></a>运行机制</h3><pre><code>选举leader之后，只有leader节点才能发起提案，其他节点(Peon角色)根据本地历史选择接受或拒绝Leader的提案，并向Leader回复结果。Leader统计并提交超过半数Paxos节点接受的提案。\n</code></pre><h3 id=\"常规过程（Normal-Case）\"><a href=\"#常规过程（Normal-Case）\" class=\"headerlink\" title=\"常规过程（Normal Case）\"></a>常规过程（Normal Case）</h3><p>常规服务状态下存在一个唯一的Leader以及一个已经确认的大多数节点Quorum，Leader将每个写请求被封装成一个新的提案发送给Quorum中的每个节点，其过程如下，注意这里的Quorum固定：</p>\n<ul>\n<li>Leader将提案追加在本地Log，并向Quorum中的所有节点发送begin消息，消息中携带提案值、Pn及指向前一条提案version的last_commit；</li>\n<li>Peon收到begin消息，如果accept过更高的pn则忽略，否则提案写入本地Log并返回accept消息。同时Peon会将当前的lease过期掉，在下一次收到lease前不再提供服务；</li>\n<li>Leader收到全部Quorum的accept后进行commit。将Log项在本地DB执行，返回调用方并向所有Quorum节点发送commit消息；</li>\n<li>Peon收到commit消息同样在本地DB执行，完成commit；</li>\n<li>Leader追加lease消息将整个集群带入到active状态。</li>\n</ul>\n<h3 id=\"选主（Leader-Election）\"><a href=\"#选主（Leader-Election）\" class=\"headerlink\" title=\"选主（Leader Election）\"></a>选主（Leader Election）</h3><p>Peon的Lease超时或Leader任何消息超时都会将整个集群带回到Probing状态，整个集群确定新的Members并最终进入Election状态进行选主。每个节点会在本地维护并在通信中交互选主轮次编号election_epoch，election_epoch单调递增，会在开始选主和选主结束时都加一，因此可以根据其奇偶来判断是否在选主轮次，选主过程如下：</p>\n<p>将election_epoch加1，向Monmap中的所有其他节点发送Propose消息；<br>收到Propose消息的节点进入election状态并仅对更新的election_epoch且Rank值大于自己的消息答复Ack。这里的Rank简单的由ip大小决定。每个节点在每个election_epoch仅做一次Ack，这就保证最终的Leader一定获得了大多数节点的支持；<br>发送Propose的节点统计收到的Ack数，超时时间内收到Monmap中大多数的ack后可进入victory过程，这些发送ack的节点形成Quorum，election_epoch加1，结束Election阶段并向Quorum中所有节点发送Victory消息，并告知自己的epoch及当前Quorum，之后进入Leader状态；</p>\n<p>收到VICTORY消息的节点完成Election，进入Peon状态；</p>\n"},{"title":"librbd分析","_content":"\n//通过lib形式调用，所以不走main函数\n```cpp\n//创建rbd块  -- librbd/librbd.cc\nint RBD::create(IoCtx& io_ctx, const char *name, uint64_t size, int *order)\n{\n  int r = librbd::create(io_ctx, name, size, order);\n  return r\n}\n\n//调用librbd::create --librbd/internal.cc\nint create(librados::IoCtx& io_ctx, const char *imgname, uint64_t size, int *order)\n{\n    ...\n    return create(io_ctx, imgname, size, old_format, features, order, 0, 0);\n}\n\n//调用create  --librbd/internal.cc\nint create(IoCtx& io_ctx, const char *imgname, uint64_t size, bool old_format, uint64_t features, int *order,  uint64_t stripe_unit, uint64_t stripe_count)\n{\n  ...   //ImageOptions opts\n  r = create(io_ctx, imgname, size, opts, \"\", \"\")\n  ...\n}\n\n//调用create  -- librbd/internal.cc\nint create(IoCtx& io_ctx, const char *imgname, uint64_t size, ImageOptions& opts, const std::string &non_primary_global_image_id,\n  const std::string &primary_mirror_uuid)\n{\n  ...\n  r = create_v1(io_ctx, imgname, bid, size, order);\n  ...\n  r = create_v2(io_ctx, imgname, bid, size, order, features, stripe_unit, stripe_count, journal_order, journal_splay_width, journal_pool,\n    non_primary_global_image_id, primary_mirror_uuid);\n}\n\n//调用create_v2  --librbd/internal.cc\nint create_v2(IoCtx& io_ctx, const char *imgname, uint64_t bid, uint64_t size, int order,\n  uint64_t features, uint64_t stripe_unit, uint64_t stripe_count, uint8_t journal_order,\n  uint8_t journal_splay_width, const std::string &journal_pool,const std::string &non_primary_global_image_id,\n  const std::string &primary_mirror_uuid)\n{\n  ...\n  id_obj = util::id_obj_name(imgname)   //rbd_id.{imagname}\n  r = io_ctx.create(id_obj, true);      //创建object; 对象名为rbd_id.{imgname}\n\n  //setting image id\n  r = cls_client::set_id(&io_ctx, id_obj, id);\n\n  //adding rbd image to directory\n  r = cls_client::dir_add_image(&io_ctx, RBD_DIRECTORY, imgname, id);\n\n  header_osd = util::header_name(id);\n  r = cls_client::create_image(&io_ctx, header_oid, size, order, features, oss.str());\n\n  //关于feature设定\n}\n\n//cls_client::create_image()  -- cls/rbd/cls_rbd_client.cc\nint create_image(librados::IoCtx *ioctx, const std::string &oid, uint64_t size, uint8_t order, uint64_t features\n  const std::string &object_prefix)\n{\n    return ioctx->exec(oid, \"rbd\", \"create\", bl, bl2);\n}\n\n//librados::IoCtx::exec()    -- librados/librados.cc\nint librados::IoCtx::exec(const std::string& oid, const char *cls, const char* method, bufferlist& inbl, bufferlist& outbl)\n{\n  object_t obj(oid);\n  return io_ctx_impl->exec(obj, cls, method, inbl, outbl);\n}\n\n//io_ctx_impl->exec()  --librados/IoCtxImpl.cc\nint librados::IoCtxImpl::exec(const object_t& oid, const char *cls, const char *method, bufferlist& inbl, bufferlist& outbl)\n{\n    ::ObjectOperation rd;\n    prepare_assert_ops(&rd);\n    rd.call(cls, method, inbl);\n    return operate_read(oid, &rd, &outbl);\n}\n```\n","source":"_posts/librbd.md","raw":"---\n  title: librbd分析\n---\n\n//通过lib形式调用，所以不走main函数\n```cpp\n//创建rbd块  -- librbd/librbd.cc\nint RBD::create(IoCtx& io_ctx, const char *name, uint64_t size, int *order)\n{\n  int r = librbd::create(io_ctx, name, size, order);\n  return r\n}\n\n//调用librbd::create --librbd/internal.cc\nint create(librados::IoCtx& io_ctx, const char *imgname, uint64_t size, int *order)\n{\n    ...\n    return create(io_ctx, imgname, size, old_format, features, order, 0, 0);\n}\n\n//调用create  --librbd/internal.cc\nint create(IoCtx& io_ctx, const char *imgname, uint64_t size, bool old_format, uint64_t features, int *order,  uint64_t stripe_unit, uint64_t stripe_count)\n{\n  ...   //ImageOptions opts\n  r = create(io_ctx, imgname, size, opts, \"\", \"\")\n  ...\n}\n\n//调用create  -- librbd/internal.cc\nint create(IoCtx& io_ctx, const char *imgname, uint64_t size, ImageOptions& opts, const std::string &non_primary_global_image_id,\n  const std::string &primary_mirror_uuid)\n{\n  ...\n  r = create_v1(io_ctx, imgname, bid, size, order);\n  ...\n  r = create_v2(io_ctx, imgname, bid, size, order, features, stripe_unit, stripe_count, journal_order, journal_splay_width, journal_pool,\n    non_primary_global_image_id, primary_mirror_uuid);\n}\n\n//调用create_v2  --librbd/internal.cc\nint create_v2(IoCtx& io_ctx, const char *imgname, uint64_t bid, uint64_t size, int order,\n  uint64_t features, uint64_t stripe_unit, uint64_t stripe_count, uint8_t journal_order,\n  uint8_t journal_splay_width, const std::string &journal_pool,const std::string &non_primary_global_image_id,\n  const std::string &primary_mirror_uuid)\n{\n  ...\n  id_obj = util::id_obj_name(imgname)   //rbd_id.{imagname}\n  r = io_ctx.create(id_obj, true);      //创建object; 对象名为rbd_id.{imgname}\n\n  //setting image id\n  r = cls_client::set_id(&io_ctx, id_obj, id);\n\n  //adding rbd image to directory\n  r = cls_client::dir_add_image(&io_ctx, RBD_DIRECTORY, imgname, id);\n\n  header_osd = util::header_name(id);\n  r = cls_client::create_image(&io_ctx, header_oid, size, order, features, oss.str());\n\n  //关于feature设定\n}\n\n//cls_client::create_image()  -- cls/rbd/cls_rbd_client.cc\nint create_image(librados::IoCtx *ioctx, const std::string &oid, uint64_t size, uint8_t order, uint64_t features\n  const std::string &object_prefix)\n{\n    return ioctx->exec(oid, \"rbd\", \"create\", bl, bl2);\n}\n\n//librados::IoCtx::exec()    -- librados/librados.cc\nint librados::IoCtx::exec(const std::string& oid, const char *cls, const char* method, bufferlist& inbl, bufferlist& outbl)\n{\n  object_t obj(oid);\n  return io_ctx_impl->exec(obj, cls, method, inbl, outbl);\n}\n\n//io_ctx_impl->exec()  --librados/IoCtxImpl.cc\nint librados::IoCtxImpl::exec(const object_t& oid, const char *cls, const char *method, bufferlist& inbl, bufferlist& outbl)\n{\n    ::ObjectOperation rd;\n    prepare_assert_ops(&rd);\n    rd.call(cls, method, inbl);\n    return operate_read(oid, &rd, &outbl);\n}\n```\n","slug":"librbd","published":1,"date":"2018-09-21T07:16:42.306Z","updated":"2018-12-14T06:26:48.768Z","_id":"cjl25n9r4000614har5z5alhd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>//通过lib形式调用，所以不走main函数<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建rbd块  -- librbd/librbd.cc</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> RBD::create(IoCtx&amp; io_ctx, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">uint64_t</span> size, <span class=\"keyword\">int</span> *order)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> r = librbd::create(io_ctx, name, size, order);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> r</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用librbd::create --librbd/internal.cc</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> create(librados::IoCtx&amp; io_ctx, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *imgname, <span class=\"keyword\">uint64_t</span> size, <span class=\"keyword\">int</span> *order)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> create(io_ctx, imgname, size, old_format, features, order, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用create  --librbd/internal.cc</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">create</span><span class=\"params\">(IoCtx&amp; io_ctx, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *imgname, <span class=\"keyword\">uint64_t</span> size, <span class=\"keyword\">bool</span> old_format, <span class=\"keyword\">uint64_t</span> features, <span class=\"keyword\">int</span> *order,  <span class=\"keyword\">uint64_t</span> stripe_unit, <span class=\"keyword\">uint64_t</span> stripe_count)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ...   <span class=\"comment\">//ImageOptions opts</span></span><br><span class=\"line\">  r = create(io_ctx, imgname, size, opts, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用create  -- librbd/internal.cc</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> create(IoCtx&amp; io_ctx, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *imgname, <span class=\"keyword\">uint64_t</span> size, ImageOptions&amp; opts, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;non_primary_global_image_id,</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;primary_mirror_uuid)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  r = create_v1(io_ctx, imgname, bid, size, order);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  r = create_v2(io_ctx, imgname, bid, size, order, features, stripe_unit, stripe_count, journal_order, journal_splay_width, journal_pool,</span><br><span class=\"line\">    non_primary_global_image_id, primary_mirror_uuid);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用create_v2  --librbd/internal.cc</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">create_v2</span><span class=\"params\">(IoCtx&amp; io_ctx, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *imgname, <span class=\"keyword\">uint64_t</span> bid, <span class=\"keyword\">uint64_t</span> size, <span class=\"keyword\">int</span> order,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">uint64_t</span> features, <span class=\"keyword\">uint64_t</span> stripe_unit, <span class=\"keyword\">uint64_t</span> stripe_count, <span class=\"keyword\">uint8_t</span> journal_order,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">uint8_t</span> journal_splay_width, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;journal_pool,<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;non_primary_global_image_id,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;primary_mirror_uuid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  id_obj = util::id_obj_name(imgname)   <span class=\"comment\">//rbd_id.&#123;imagname&#125;</span></span><br><span class=\"line\">  r = io_ctx.create(id_obj, <span class=\"literal\">true</span>);      <span class=\"comment\">//创建object; 对象名为rbd_id.&#123;imgname&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//setting image id</span></span><br><span class=\"line\">  r = cls_client::set_id(&amp;io_ctx, id_obj, id);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//adding rbd image to directory</span></span><br><span class=\"line\">  r = cls_client::dir_add_image(&amp;io_ctx, RBD_DIRECTORY, imgname, id);</span><br><span class=\"line\"></span><br><span class=\"line\">  header_osd = util::header_name(id);</span><br><span class=\"line\">  r = cls_client::create_image(&amp;io_ctx, header_oid, size, order, features, oss.str());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//关于feature设定</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cls_client::create_image()  -- cls/rbd/cls_rbd_client.cc</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">create_image</span><span class=\"params\">(librados::IoCtx *ioctx, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;oid, <span class=\"keyword\">uint64_t</span> size, <span class=\"keyword\">uint8_t</span> order, <span class=\"keyword\">uint64_t</span> features</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;object_prefix)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ioctx-&gt;exec(oid, <span class=\"string\">\"rbd\"</span>, <span class=\"string\">\"create\"</span>, bl, bl2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//librados::IoCtx::exec()    -- librados/librados.cc</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> librados::IoCtx::exec(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; oid, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *cls, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* method, bufferlist&amp; inbl, bufferlist&amp; outbl)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">object_t</span> obj(oid);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> io_ctx_impl-&gt;exec(obj, cls, method, inbl, outbl);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//io_ctx_impl-&gt;exec()  --librados/IoCtxImpl.cc</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> librados::IoCtxImpl::exec(<span class=\"keyword\">const</span> <span class=\"keyword\">object_t</span>&amp; oid, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *cls, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *method, bufferlist&amp; inbl, bufferlist&amp; outbl)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ::ObjectOperation rd;</span><br><span class=\"line\">    prepare_assert_ops(&amp;rd);</span><br><span class=\"line\">    rd.call(cls, method, inbl);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> operate_read(oid, &amp;rd, &amp;outbl);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>//通过lib形式调用，所以不走main函数<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建rbd块  -- librbd/librbd.cc</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> RBD::create(IoCtx&amp; io_ctx, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">uint64_t</span> size, <span class=\"keyword\">int</span> *order)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> r = librbd::create(io_ctx, name, size, order);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> r</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用librbd::create --librbd/internal.cc</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> create(librados::IoCtx&amp; io_ctx, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *imgname, <span class=\"keyword\">uint64_t</span> size, <span class=\"keyword\">int</span> *order)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> create(io_ctx, imgname, size, old_format, features, order, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用create  --librbd/internal.cc</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">create</span><span class=\"params\">(IoCtx&amp; io_ctx, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *imgname, <span class=\"keyword\">uint64_t</span> size, <span class=\"keyword\">bool</span> old_format, <span class=\"keyword\">uint64_t</span> features, <span class=\"keyword\">int</span> *order,  <span class=\"keyword\">uint64_t</span> stripe_unit, <span class=\"keyword\">uint64_t</span> stripe_count)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ...   <span class=\"comment\">//ImageOptions opts</span></span><br><span class=\"line\">  r = create(io_ctx, imgname, size, opts, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用create  -- librbd/internal.cc</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> create(IoCtx&amp; io_ctx, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *imgname, <span class=\"keyword\">uint64_t</span> size, ImageOptions&amp; opts, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;non_primary_global_image_id,</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;primary_mirror_uuid)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  r = create_v1(io_ctx, imgname, bid, size, order);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  r = create_v2(io_ctx, imgname, bid, size, order, features, stripe_unit, stripe_count, journal_order, journal_splay_width, journal_pool,</span><br><span class=\"line\">    non_primary_global_image_id, primary_mirror_uuid);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用create_v2  --librbd/internal.cc</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">create_v2</span><span class=\"params\">(IoCtx&amp; io_ctx, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *imgname, <span class=\"keyword\">uint64_t</span> bid, <span class=\"keyword\">uint64_t</span> size, <span class=\"keyword\">int</span> order,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">uint64_t</span> features, <span class=\"keyword\">uint64_t</span> stripe_unit, <span class=\"keyword\">uint64_t</span> stripe_count, <span class=\"keyword\">uint8_t</span> journal_order,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">uint8_t</span> journal_splay_width, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;journal_pool,<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;non_primary_global_image_id,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;primary_mirror_uuid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  id_obj = util::id_obj_name(imgname)   <span class=\"comment\">//rbd_id.&#123;imagname&#125;</span></span><br><span class=\"line\">  r = io_ctx.create(id_obj, <span class=\"literal\">true</span>);      <span class=\"comment\">//创建object; 对象名为rbd_id.&#123;imgname&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//setting image id</span></span><br><span class=\"line\">  r = cls_client::set_id(&amp;io_ctx, id_obj, id);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//adding rbd image to directory</span></span><br><span class=\"line\">  r = cls_client::dir_add_image(&amp;io_ctx, RBD_DIRECTORY, imgname, id);</span><br><span class=\"line\"></span><br><span class=\"line\">  header_osd = util::header_name(id);</span><br><span class=\"line\">  r = cls_client::create_image(&amp;io_ctx, header_oid, size, order, features, oss.str());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//关于feature设定</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//cls_client::create_image()  -- cls/rbd/cls_rbd_client.cc</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">create_image</span><span class=\"params\">(librados::IoCtx *ioctx, <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;oid, <span class=\"keyword\">uint64_t</span> size, <span class=\"keyword\">uint8_t</span> order, <span class=\"keyword\">uint64_t</span> features</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;object_prefix)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ioctx-&gt;exec(oid, <span class=\"string\">\"rbd\"</span>, <span class=\"string\">\"create\"</span>, bl, bl2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//librados::IoCtx::exec()    -- librados/librados.cc</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> librados::IoCtx::exec(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; oid, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *cls, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* method, bufferlist&amp; inbl, bufferlist&amp; outbl)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">object_t</span> obj(oid);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> io_ctx_impl-&gt;exec(obj, cls, method, inbl, outbl);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//io_ctx_impl-&gt;exec()  --librados/IoCtxImpl.cc</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> librados::IoCtxImpl::exec(<span class=\"keyword\">const</span> <span class=\"keyword\">object_t</span>&amp; oid, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *cls, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *method, bufferlist&amp; inbl, bufferlist&amp; outbl)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ::ObjectOperation rd;</span><br><span class=\"line\">    prepare_assert_ops(&amp;rd);</span><br><span class=\"line\">    rd.call(cls, method, inbl);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> operate_read(oid, &amp;rd, &amp;outbl);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"以太坊交易签名","_content":"### 以太坊的Transaction结构\n```go\n//交易本身数据信息\naccountNonce  UInt64\nprice         BigInt\ngasLimit      BigInt\nrecipient     Address\namount        BigUInt\npayload       Data\n\n//签名信息\nV             BigInt\nR             BigInt\nS             BigInt\n```\n对交易签名步骤:\n- 对交易本身进行rlp编码，再对rlp编码进行keccak256哈希\n- 对第一步的结果进行椭圆曲线ecdsa的签名\n- 对第二步的结果进行拆解，分别赋值到V R S中\n对第二步的结果进行拆解，分别赋值到V R S中\n\n```javascript\nvar Tx = require('ethereumjs-tx')\nvar privateKey = new Buffer('e331b6d69882b4cb4ea581d88e0b604039a3de5967688d3dcffdd2270c0fd109', 'hex')\n\nvar rawTx = {\n  nonce: '0x00',\n  gasPrice: '0x09184e72a000',\n  gasLimit: '0x2710',\n  to: '0x0000000000000000000000000000000000000000',   //转入地址\n  value: '0x00',\n  data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057'\n}\n\nvar tx = new Tx(rawTx);\ntx.sign(privateKey);\n\nvar serializedTx = tx.serialize();\n\nweb3.eth.sendRawTransaction(serializedTx.toString('hex'), function(err, hash){\n  if(!err)\n    console.log(hash);\n})\n\n```\n2、熟悉Linux系统内核，包括IO系统、文件系统、内存管理；\n3、有参与过云平台或大型互联网系统底层平台开发设计者优先；参与过ceph等开源代码项目贡献的优先；\n4、深入理解分布式存储系统相关原理，包括分布式对象、分布式事务、集群等；\n5、熟悉数据归档、备份、恢复、快照、压缩、删重、自动分层等相关技术；\n6、熟练掌握C/C++语言，能看懂java或Python代码，有实际的项目开发经验；\n- paxos golang实现\n\n\n- 确保raid卡型号可以在raid卡工具(必须由厂商提供)配合下，查找到磁盘槽位；\n- 对数据存储disk 和journal ssd disk进行log监控、报警机制；\n- io sheduler 参数测试；\n","source":"_posts/eth交易签名.md","raw":"---\n  title: 以太坊交易签名\n---\n### 以太坊的Transaction结构\n```go\n//交易本身数据信息\naccountNonce  UInt64\nprice         BigInt\ngasLimit      BigInt\nrecipient     Address\namount        BigUInt\npayload       Data\n\n//签名信息\nV             BigInt\nR             BigInt\nS             BigInt\n```\n对交易签名步骤:\n- 对交易本身进行rlp编码，再对rlp编码进行keccak256哈希\n- 对第一步的结果进行椭圆曲线ecdsa的签名\n- 对第二步的结果进行拆解，分别赋值到V R S中\n对第二步的结果进行拆解，分别赋值到V R S中\n\n```javascript\nvar Tx = require('ethereumjs-tx')\nvar privateKey = new Buffer('e331b6d69882b4cb4ea581d88e0b604039a3de5967688d3dcffdd2270c0fd109', 'hex')\n\nvar rawTx = {\n  nonce: '0x00',\n  gasPrice: '0x09184e72a000',\n  gasLimit: '0x2710',\n  to: '0x0000000000000000000000000000000000000000',   //转入地址\n  value: '0x00',\n  data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057'\n}\n\nvar tx = new Tx(rawTx);\ntx.sign(privateKey);\n\nvar serializedTx = tx.serialize();\n\nweb3.eth.sendRawTransaction(serializedTx.toString('hex'), function(err, hash){\n  if(!err)\n    console.log(hash);\n})\n\n```\n2、熟悉Linux系统内核，包括IO系统、文件系统、内存管理；\n3、有参与过云平台或大型互联网系统底层平台开发设计者优先；参与过ceph等开源代码项目贡献的优先；\n4、深入理解分布式存储系统相关原理，包括分布式对象、分布式事务、集群等；\n5、熟悉数据归档、备份、恢复、快照、压缩、删重、自动分层等相关技术；\n6、熟练掌握C/C++语言，能看懂java或Python代码，有实际的项目开发经验；\n- paxos golang实现\n\n\n- 确保raid卡型号可以在raid卡工具(必须由厂商提供)配合下，查找到磁盘槽位；\n- 对数据存储disk 和journal ssd disk进行log监控、报警机制；\n- io sheduler 参数测试；\n","slug":"eth交易签名","published":1,"date":"2018-08-03T07:12:42.881Z","updated":"2018-08-09T10:50:56.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl25n9r6000714ha3es636zy","content":"<h3 id=\"以太坊的Transaction结构\"><a href=\"#以太坊的Transaction结构\" class=\"headerlink\" title=\"以太坊的Transaction结构\"></a>以太坊的Transaction结构</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//交易本身数据信息</span></span><br><span class=\"line\">accountNonce  UInt64</span><br><span class=\"line\">price         BigInt</span><br><span class=\"line\">gasLimit      BigInt</span><br><span class=\"line\">recipient     Address</span><br><span class=\"line\">amount        BigUInt</span><br><span class=\"line\">payload       Data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//签名信息</span></span><br><span class=\"line\">V             BigInt</span><br><span class=\"line\">R             BigInt</span><br><span class=\"line\">S             BigInt</span><br></pre></td></tr></table></figure>\n<p>对交易签名步骤:</p>\n<ul>\n<li>对交易本身进行rlp编码，再对rlp编码进行keccak256哈希</li>\n<li>对第一步的结果进行椭圆曲线ecdsa的签名</li>\n<li>对第二步的结果进行拆解，分别赋值到V R S中<br>对第二步的结果进行拆解，分别赋值到V R S中</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Tx = <span class=\"built_in\">require</span>(<span class=\"string\">'ethereumjs-tx'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> privateKey = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">'e331b6d69882b4cb4ea581d88e0b604039a3de5967688d3dcffdd2270c0fd109'</span>, <span class=\"string\">'hex'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rawTx = &#123;</span><br><span class=\"line\">  nonce: <span class=\"string\">'0x00'</span>,</span><br><span class=\"line\">  gasPrice: <span class=\"string\">'0x09184e72a000'</span>,</span><br><span class=\"line\">  gasLimit: <span class=\"string\">'0x2710'</span>,</span><br><span class=\"line\">  to: <span class=\"string\">'0x0000000000000000000000000000000000000000'</span>,   <span class=\"comment\">//转入地址</span></span><br><span class=\"line\">  value: <span class=\"string\">'0x00'</span>,</span><br><span class=\"line\">  data: <span class=\"string\">'0x7f7465737432000000000000000000000000000000000000000000000000000000600057'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tx = <span class=\"keyword\">new</span> Tx(rawTx);</span><br><span class=\"line\">tx.sign(privateKey);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> serializedTx = tx.serialize();</span><br><span class=\"line\"></span><br><span class=\"line\">web3.eth.sendRawTransaction(serializedTx.toString(<span class=\"string\">'hex'</span>), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, hash</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!err)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(hash);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>2、熟悉Linux系统内核，包括IO系统、文件系统、内存管理；<br>3、有参与过云平台或大型互联网系统底层平台开发设计者优先；参与过ceph等开源代码项目贡献的优先；<br>4、深入理解分布式存储系统相关原理，包括分布式对象、分布式事务、集群等；<br>5、熟悉数据归档、备份、恢复、快照、压缩、删重、自动分层等相关技术；<br>6、熟练掌握C/C++语言，能看懂java或Python代码，有实际的项目开发经验；</p>\n<ul>\n<li>paxos golang实现</li>\n</ul>\n<ul>\n<li>确保raid卡型号可以在raid卡工具(必须由厂商提供)配合下，查找到磁盘槽位；</li>\n<li>对数据存储disk 和journal ssd disk进行log监控、报警机制；</li>\n<li>io sheduler 参数测试；</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"以太坊的Transaction结构\"><a href=\"#以太坊的Transaction结构\" class=\"headerlink\" title=\"以太坊的Transaction结构\"></a>以太坊的Transaction结构</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//交易本身数据信息</span></span><br><span class=\"line\">accountNonce  UInt64</span><br><span class=\"line\">price         BigInt</span><br><span class=\"line\">gasLimit      BigInt</span><br><span class=\"line\">recipient     Address</span><br><span class=\"line\">amount        BigUInt</span><br><span class=\"line\">payload       Data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//签名信息</span></span><br><span class=\"line\">V             BigInt</span><br><span class=\"line\">R             BigInt</span><br><span class=\"line\">S             BigInt</span><br></pre></td></tr></table></figure>\n<p>对交易签名步骤:</p>\n<ul>\n<li>对交易本身进行rlp编码，再对rlp编码进行keccak256哈希</li>\n<li>对第一步的结果进行椭圆曲线ecdsa的签名</li>\n<li>对第二步的结果进行拆解，分别赋值到V R S中<br>对第二步的结果进行拆解，分别赋值到V R S中</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Tx = <span class=\"built_in\">require</span>(<span class=\"string\">'ethereumjs-tx'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> privateKey = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">'e331b6d69882b4cb4ea581d88e0b604039a3de5967688d3dcffdd2270c0fd109'</span>, <span class=\"string\">'hex'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rawTx = &#123;</span><br><span class=\"line\">  nonce: <span class=\"string\">'0x00'</span>,</span><br><span class=\"line\">  gasPrice: <span class=\"string\">'0x09184e72a000'</span>,</span><br><span class=\"line\">  gasLimit: <span class=\"string\">'0x2710'</span>,</span><br><span class=\"line\">  to: <span class=\"string\">'0x0000000000000000000000000000000000000000'</span>,   <span class=\"comment\">//转入地址</span></span><br><span class=\"line\">  value: <span class=\"string\">'0x00'</span>,</span><br><span class=\"line\">  data: <span class=\"string\">'0x7f7465737432000000000000000000000000000000000000000000000000000000600057'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tx = <span class=\"keyword\">new</span> Tx(rawTx);</span><br><span class=\"line\">tx.sign(privateKey);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> serializedTx = tx.serialize();</span><br><span class=\"line\"></span><br><span class=\"line\">web3.eth.sendRawTransaction(serializedTx.toString(<span class=\"string\">'hex'</span>), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, hash</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!err)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(hash);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>2、熟悉Linux系统内核，包括IO系统、文件系统、内存管理；<br>3、有参与过云平台或大型互联网系统底层平台开发设计者优先；参与过ceph等开源代码项目贡献的优先；<br>4、深入理解分布式存储系统相关原理，包括分布式对象、分布式事务、集群等；<br>5、熟悉数据归档、备份、恢复、快照、压缩、删重、自动分层等相关技术；<br>6、熟练掌握C/C++语言，能看懂java或Python代码，有实际的项目开发经验；</p>\n<ul>\n<li>paxos golang实现</li>\n</ul>\n<ul>\n<li>确保raid卡型号可以在raid卡工具(必须由厂商提供)配合下，查找到磁盘槽位；</li>\n<li>对数据存储disk 和journal ssd disk进行log监控、报警机制；</li>\n<li>io sheduler 参数测试；</li>\n</ul>\n"},{"title":"snapshot","_content":"### snapshot\n\n快照分全量快照和增量快照\n\n#### 全量快照\n- 镜像分离\n\n#### 增量快照\n\n- copy on write(写时拷贝)\n假如有一个卷8个物理块，分别为1~8， 在某一个时刻做了快照，这时候生成了一个快照卷，快照卷也有8个块，和原始卷一样指向相同的物理块。这时候有一个新的io，修改原始卷的第8个物理块，对COW 而言，会依次做如下几步：\n\n  - 分配一个新的物理块。我们称为第9个物理块\n  - 读取第8个物理块\n  - 新读取的第8个物理块数据写入到第9个物理块\n  - 更新快照卷map,指向第9个物理块\n  - 更新第8个物理块\n\nCOW缺点：\n\n  - 写放大，本来一个写，变成1读3写。\n\nCOW优势：\n\n  - 原始卷物理块连续。没有碎片。\n  - 节省空间\n\n- rediect on first write (写时重定向)\n假如有一个卷8个物理块，分别为1~8， 在某一个时刻做了快照，这时候生成了一个快照卷，快照卷也有8个块，和原始卷一样指向相同的物理块。这时候有一个新的io，修改原始卷的第8个物理块，对ROW 而言，会依次做如下几步：\n\n  - 分配一个新的物理块。我们称为第9个物理块\n  - 数据写入到第9个物理块。\n  - 更新原始卷map,指向第9个物理块\n","source":"_posts/snapshot.md","raw":"---\n  title: snapshot\n---\n### snapshot\n\n快照分全量快照和增量快照\n\n#### 全量快照\n- 镜像分离\n\n#### 增量快照\n\n- copy on write(写时拷贝)\n假如有一个卷8个物理块，分别为1~8， 在某一个时刻做了快照，这时候生成了一个快照卷，快照卷也有8个块，和原始卷一样指向相同的物理块。这时候有一个新的io，修改原始卷的第8个物理块，对COW 而言，会依次做如下几步：\n\n  - 分配一个新的物理块。我们称为第9个物理块\n  - 读取第8个物理块\n  - 新读取的第8个物理块数据写入到第9个物理块\n  - 更新快照卷map,指向第9个物理块\n  - 更新第8个物理块\n\nCOW缺点：\n\n  - 写放大，本来一个写，变成1读3写。\n\nCOW优势：\n\n  - 原始卷物理块连续。没有碎片。\n  - 节省空间\n\n- rediect on first write (写时重定向)\n假如有一个卷8个物理块，分别为1~8， 在某一个时刻做了快照，这时候生成了一个快照卷，快照卷也有8个块，和原始卷一样指向相同的物理块。这时候有一个新的io，修改原始卷的第8个物理块，对ROW 而言，会依次做如下几步：\n\n  - 分配一个新的物理块。我们称为第9个物理块\n  - 数据写入到第9个物理块。\n  - 更新原始卷map,指向第9个物理块\n","slug":"snapshot","published":1,"date":"2018-08-13T12:38:47.431Z","updated":"2018-08-28T12:17:45.967Z","_id":"cjl25n9r9000914ha0av17nol","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"snapshot\"><a href=\"#snapshot\" class=\"headerlink\" title=\"snapshot\"></a>snapshot</h3><p>快照分全量快照和增量快照</p>\n<h4 id=\"全量快照\"><a href=\"#全量快照\" class=\"headerlink\" title=\"全量快照\"></a>全量快照</h4><ul>\n<li>镜像分离</li>\n</ul>\n<h4 id=\"增量快照\"><a href=\"#增量快照\" class=\"headerlink\" title=\"增量快照\"></a>增量快照</h4><ul>\n<li><p>copy on write(写时拷贝)<br>假如有一个卷8个物理块，分别为1~8， 在某一个时刻做了快照，这时候生成了一个快照卷，快照卷也有8个块，和原始卷一样指向相同的物理块。这时候有一个新的io，修改原始卷的第8个物理块，对COW 而言，会依次做如下几步：</p>\n<ul>\n<li>分配一个新的物理块。我们称为第9个物理块</li>\n<li>读取第8个物理块</li>\n<li>新读取的第8个物理块数据写入到第9个物理块</li>\n<li>更新快照卷map,指向第9个物理块</li>\n<li>更新第8个物理块</li>\n</ul>\n</li>\n</ul>\n<p>COW缺点：</p>\n<ul>\n<li>写放大，本来一个写，变成1读3写。</li>\n</ul>\n<p>COW优势：</p>\n<ul>\n<li>原始卷物理块连续。没有碎片。</li>\n<li>节省空间</li>\n</ul>\n<ul>\n<li><p>rediect on first write (写时重定向)<br>假如有一个卷8个物理块，分别为1~8， 在某一个时刻做了快照，这时候生成了一个快照卷，快照卷也有8个块，和原始卷一样指向相同的物理块。这时候有一个新的io，修改原始卷的第8个物理块，对ROW 而言，会依次做如下几步：</p>\n<ul>\n<li>分配一个新的物理块。我们称为第9个物理块</li>\n<li>数据写入到第9个物理块。</li>\n<li>更新原始卷map,指向第9个物理块</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"snapshot\"><a href=\"#snapshot\" class=\"headerlink\" title=\"snapshot\"></a>snapshot</h3><p>快照分全量快照和增量快照</p>\n<h4 id=\"全量快照\"><a href=\"#全量快照\" class=\"headerlink\" title=\"全量快照\"></a>全量快照</h4><ul>\n<li>镜像分离</li>\n</ul>\n<h4 id=\"增量快照\"><a href=\"#增量快照\" class=\"headerlink\" title=\"增量快照\"></a>增量快照</h4><ul>\n<li><p>copy on write(写时拷贝)<br>假如有一个卷8个物理块，分别为1~8， 在某一个时刻做了快照，这时候生成了一个快照卷，快照卷也有8个块，和原始卷一样指向相同的物理块。这时候有一个新的io，修改原始卷的第8个物理块，对COW 而言，会依次做如下几步：</p>\n<ul>\n<li>分配一个新的物理块。我们称为第9个物理块</li>\n<li>读取第8个物理块</li>\n<li>新读取的第8个物理块数据写入到第9个物理块</li>\n<li>更新快照卷map,指向第9个物理块</li>\n<li>更新第8个物理块</li>\n</ul>\n</li>\n</ul>\n<p>COW缺点：</p>\n<ul>\n<li>写放大，本来一个写，变成1读3写。</li>\n</ul>\n<p>COW优势：</p>\n<ul>\n<li>原始卷物理块连续。没有碎片。</li>\n<li>节省空间</li>\n</ul>\n<ul>\n<li><p>rediect on first write (写时重定向)<br>假如有一个卷8个物理块，分别为1~8， 在某一个时刻做了快照，这时候生成了一个快照卷，快照卷也有8个块，和原始卷一样指向相同的物理块。这时候有一个新的io，修改原始卷的第8个物理块，对ROW 而言，会依次做如下几步：</p>\n<ul>\n<li>分配一个新的物理块。我们称为第9个物理块</li>\n<li>数据写入到第9个物理块。</li>\n<li>更新原始卷map,指向第9个物理块</li>\n</ul>\n</li>\n</ul>\n"},{"title":"ssd write amplification","_content":"\n### Page 和 Block\n\nssd中有page和block的概念，page的大小为 4k，而block的大小为512k（128个page）\n\n### write amplification\n\n从前一直认为SSD的写放大（Write amplification）是指SSD一次写必须写一个Block，其实不是这样的。SSD一次写的单位是page，但是SSD的Write只能写到空的page上，对于之前写过的page\n必须先进行一次Erase，而Erase的单位是block,所以如果一个page的数据删掉之后，要想再写到这个page上，必须经过以下三步：\n\n- 将同一个block的其他page读出来\n- 整个block erase掉\n- 将整个block数据写入\n\n### 解决版本Trim\nTRIM是现在公认的解决写放大的比较好的方案。\nTRIM位于操作系统层。操作系统使用TRIM命令来通知SSD某个page的数据不需要了，可以回收了。\n支持TRIM的操作系统和以往的主要区别是删除一个Page的操作不同。在磁盘时期，删除一个page，之后在文件系统的记录信息里将该page的标志位设置为可用，但是并没有将数据删除。\n使用SSD且支持TRIM的操作系统，在删除一个page时，会同时通知SSD这个page的数据不需要了，SSD内部有一个空闲时刻的垃圾收集进程，在空闲时刻SSD会将一些空闲的数据集中到一起，\n然后一起Erase。这样每次写操作，就在已经Erase好了的Page上写入新的数据。\n","source":"_posts/ssd_write_amplification.md","raw":"---\n  title: ssd write amplification\n---\n\n### Page 和 Block\n\nssd中有page和block的概念，page的大小为 4k，而block的大小为512k（128个page）\n\n### write amplification\n\n从前一直认为SSD的写放大（Write amplification）是指SSD一次写必须写一个Block，其实不是这样的。SSD一次写的单位是page，但是SSD的Write只能写到空的page上，对于之前写过的page\n必须先进行一次Erase，而Erase的单位是block,所以如果一个page的数据删掉之后，要想再写到这个page上，必须经过以下三步：\n\n- 将同一个block的其他page读出来\n- 整个block erase掉\n- 将整个block数据写入\n\n### 解决版本Trim\nTRIM是现在公认的解决写放大的比较好的方案。\nTRIM位于操作系统层。操作系统使用TRIM命令来通知SSD某个page的数据不需要了，可以回收了。\n支持TRIM的操作系统和以往的主要区别是删除一个Page的操作不同。在磁盘时期，删除一个page，之后在文件系统的记录信息里将该page的标志位设置为可用，但是并没有将数据删除。\n使用SSD且支持TRIM的操作系统，在删除一个page时，会同时通知SSD这个page的数据不需要了，SSD内部有一个空闲时刻的垃圾收集进程，在空闲时刻SSD会将一些空闲的数据集中到一起，\n然后一起Erase。这样每次写操作，就在已经Erase好了的Page上写入新的数据。\n","slug":"ssd_write_amplification","published":1,"date":"2018-09-21T07:16:42.323Z","updated":"2018-11-28T09:42:34.633Z","_id":"cjlnekoha0001jshaapuypctk","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Page-和-Block\"><a href=\"#Page-和-Block\" class=\"headerlink\" title=\"Page 和 Block\"></a>Page 和 Block</h3><p>ssd中有page和block的概念，page的大小为 4k，而block的大小为512k（128个page）</p>\n<h3 id=\"write-amplification\"><a href=\"#write-amplification\" class=\"headerlink\" title=\"write amplification\"></a>write amplification</h3><p>从前一直认为SSD的写放大（Write amplification）是指SSD一次写必须写一个Block，其实不是这样的。SSD一次写的单位是page，但是SSD的Write只能写到空的page上，对于之前写过的page<br>必须先进行一次Erase，而Erase的单位是block,所以如果一个page的数据删掉之后，要想再写到这个page上，必须经过以下三步：</p>\n<ul>\n<li>将同一个block的其他page读出来</li>\n<li>整个block erase掉</li>\n<li>将整个block数据写入</li>\n</ul>\n<h3 id=\"解决版本Trim\"><a href=\"#解决版本Trim\" class=\"headerlink\" title=\"解决版本Trim\"></a>解决版本Trim</h3><p>TRIM是现在公认的解决写放大的比较好的方案。<br>TRIM位于操作系统层。操作系统使用TRIM命令来通知SSD某个page的数据不需要了，可以回收了。<br>支持TRIM的操作系统和以往的主要区别是删除一个Page的操作不同。在磁盘时期，删除一个page，之后在文件系统的记录信息里将该page的标志位设置为可用，但是并没有将数据删除。<br>使用SSD且支持TRIM的操作系统，在删除一个page时，会同时通知SSD这个page的数据不需要了，SSD内部有一个空闲时刻的垃圾收集进程，在空闲时刻SSD会将一些空闲的数据集中到一起，<br>然后一起Erase。这样每次写操作，就在已经Erase好了的Page上写入新的数据。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Page-和-Block\"><a href=\"#Page-和-Block\" class=\"headerlink\" title=\"Page 和 Block\"></a>Page 和 Block</h3><p>ssd中有page和block的概念，page的大小为 4k，而block的大小为512k（128个page）</p>\n<h3 id=\"write-amplification\"><a href=\"#write-amplification\" class=\"headerlink\" title=\"write amplification\"></a>write amplification</h3><p>从前一直认为SSD的写放大（Write amplification）是指SSD一次写必须写一个Block，其实不是这样的。SSD一次写的单位是page，但是SSD的Write只能写到空的page上，对于之前写过的page<br>必须先进行一次Erase，而Erase的单位是block,所以如果一个page的数据删掉之后，要想再写到这个page上，必须经过以下三步：</p>\n<ul>\n<li>将同一个block的其他page读出来</li>\n<li>整个block erase掉</li>\n<li>将整个block数据写入</li>\n</ul>\n<h3 id=\"解决版本Trim\"><a href=\"#解决版本Trim\" class=\"headerlink\" title=\"解决版本Trim\"></a>解决版本Trim</h3><p>TRIM是现在公认的解决写放大的比较好的方案。<br>TRIM位于操作系统层。操作系统使用TRIM命令来通知SSD某个page的数据不需要了，可以回收了。<br>支持TRIM的操作系统和以往的主要区别是删除一个Page的操作不同。在磁盘时期，删除一个page，之后在文件系统的记录信息里将该page的标志位设置为可用，但是并没有将数据删除。<br>使用SSD且支持TRIM的操作系统，在删除一个page时，会同时通知SSD这个page的数据不需要了，SSD内部有一个空闲时刻的垃圾收集进程，在空闲时刻SSD会将一些空闲的数据集中到一起，<br>然后一起Erase。这样每次写操作，就在已经Erase好了的Page上写入新的数据。</p>\n"},{"title":"ceph-mon","_content":"\nmon->preinit()\nmessenger->start()\nmon->init()\n\n```c++\n// mon/Monitor.cc\nint Monitor::preinit()\n{\n    lock.Lock();\n    dout(1) << \"preinit fsid \" << monmap->fsid << dendl;\n\n    assert(!logger);\n    {\n        PerfCountersBuilder pcb(g_ceph_context, \"mon\", l_mon_first, l_mon_last);\n        logger = pcb.create_perf_counters();\n        cct->get_perfcounters_collection()->add(logger);\n    }\n    assert(!cluster_logger);  \n    {\n    PerfCountersBuilder pcb(g_ceph_context, \"cluster\", l_cluster_first, l_cluster_last);\n    pcb.add_u64(l_cluster_num_mon, \"num_mon\");\n    // ......\n    cluster_logger = pcb.create_perf_counters();\n  }\n  paxos->init_logger();\n\n  // verify cluster_uuid\n  {\n    int r = check_fsid()\n    if (r == -ENOENT)\n        r = write_fsid();\n    if (r<0){\n        lock.Unlock();\n        return r;\n    }\n  }\n\n  //open compatset\n  read_features();\n\n  // have we ever joined a quorum ?\n  has_ever_joined = (store->get(MONITOR_NAME, \"joined\") != 0);\n  dout(10) << \"has_ever_joined = \"<< (int)has_ever_joined << dendl;\n\n  if(!has_ever_joined){\n    // impose initial quorum restructions ?\n    list<string> initial_members;\n    get_str_list(g_conf->mon_initial_members, initial_members);\n\n    if (!initial_members.empty()){\n        dout(1) << \" initial_members \" << initial_members << \", filtering seed monmap\" << dendl;\n        monmap->set_inital_members(g_ceph_context, initial_members, name, messenger->get_myaddr(), &extra_probe_peers);\n        dout(10) << \" monmap is \" << *monmap << dendl;\n        dout(10) << \" extra probe peers \" << extra_probe_peers << dendl;\n    }\n   } else if ( !monmap->contains(name)) {\n        derr << \" not in monmap and have been in a quorum before; \" << \"must have been removed \" << dendl;\n        if (g_conf->mon_force_quorum_join) {\n            dout(0)  << \" we should have died but \"\n                << \" mon_force_quorum_join is set -- allowing boot\" << dendl;\n        }else{\n            derr << \"commit suicide!\" << dendl;\n            return -ENOENT;\n        }\n   }\n\n   {\n        // we have a potentially inconsistent store state in hands. Get rid of \n        // it and start fresh\n        bool clear_store = false;\n        if(store->exists(\"mon_sync\", \"in_sync\")){\n            dout(1) << __func__ << \"clean up potentially inconsistent store state \" << dendl;\n            clear_store = true;\n        } \n\n        if (store->get(\"mon_sync\", \"force_sync\") > 0){\n            dout(1) << __func__ << \" force sync by clearing store state \" << dendl;\n            clear_store = true;\n        }\n        if(clear_store) {\n            set<string> sync_prefixes = get_sync_targets_names();\n            store->clear(sync_prefixes);\n        }\n   }\n\n   sync_last_commited_floor = store->get(\"mon_sync\", \"last_commited_floor\");\n   dout(10)  << \"sync_last_commited_floor \"<< sync_last_commited_floor << dendl;\n\n   init_paxos();  //pasox 初始化\n   health_monitor->init();\n\n   ....\n}\n```\n\n```c++\n// mon/Monitor.cc\nvoid Monitor::init_paxos() {\n    dout(10) << __func__ << dendl;\n    paxos->init(); \n\n    // init services\n    // paxos_service 在Monitor构建时，加入了6个派生类\n    - MDSMonitor\n    - MonmapMonitor\n    - OSDMonitor\n    - PGMonitor\n    - LogMonitor\n    - AuthMonitor\n    for(int i=0; i<PAXOS_NUM; ++i){\n        paxos_service[i]->init(); \n    }\n    refresh_from_paxos(NULL);\n}\n```\n\n- last_pn: 上次当选为leader后生成的PN（proposal number)\n- accepted_pn: 当前节点接受过的PN，可能是别的leader提议的PN \n- last_committed: 本节点记录的最后被commit版本\n- first_committed: 本节点记录的第一被commit版本\n```c++\nvoid Paxos::init(){\n    // load paxos variables from stable storage\n    last_pn = get_store()->get(get_name(), \"last_pn\");\n    accepted_pn = get_store()->get(get_name(), \"accepted_pn\");\n    last_committed = get_store()->get(get_name(), \"last_committed\");\n    first_commited = get_store()->get(get_name(), \"first_committed\");\n\n    dout(10) << __func__ << \" last_pn: \" << last_pn << \" accepted_pn: \" \n        << accepted_pn << \" last_commited: \" << last_commited \n        << \" first_committed: \" << first_committed << dendl;\n    dout(10) << \"init\" << dendl;\n    assert(is_consistent());\n}\n```\n\n//refresh_from_paxos(NULL)\n```c++\nvoid Monitor::refresh_from_paxos(bool * need_bootstrap){\n    // ....\n    for(int i=0; i<PAXOS_NUM; ++i){\n        paxos_service[i]->refresh(need_boostrap);\n    }\n    for(int i=0; i<PAXOS_NUM; ++i){ //主要是处理PGMonitor\n        paxos_service[i]->post_paxos_update();\n    }\n}\n```\n//paxos_service vector中的对象都没有派生refresh(), 都调用基类refresh方法\n```c++\nvoid PaxosService::refresh(bool *need_boostrap){\n    // ...\n    update_from_paxos(need_boostrap);\n}\n\n// update_from_paxos 均被paxos_service vector中的对象进行了派生\n// 这里仅仅列出MonmapMonitor 对象方法\nvoid MonmapMonitor:;update_from_paxos(bool *need_boostrap){\n    version_t  version = get_last_committed();\n    if(version <= mon->monmap->get_epoch())\n        return \n    dout(10) << __func__ << \" version \" << version\n        << \", my v \" << mon->monmap->epoch << dendl;\n    .....\n}\n```\n\n//post_paxos_update() 方法，\n- 只有PGMonitor覆盖写了post_paxos_update\n- 其他5个类均没有使用基类\n```c++\nvoid PGMonitor:;post_paxos_update(){\n    if(mon->osdmon()->osdmap.get_epoch()){\n        map_pg_creates();\n        send_pg_creates();\n    }\n}\n```\n\n```c++\n// mon/Monitor.cc\nint Monitor::init()\n{\n    dout(2) << \"init\" << dendl;\n    lock.Lock()\n\n    //start ticker\n    timer.init()\n    new_tick()\n\n    //i'm ready!\n    messenger->add_dispatcher_tail(this);\n\n    bootstrap();\n\n    // encode command sets\n    const MonCommand *cmds;\n    int cmdsize;\n    get_locally_supported_monitor_commands(&cmds, &cmdsize);\n    MonCommand::encode_array(cmds, cmdsize, supported_commands_bl);\n    get_classic_monitor_commands(&cmds, &cmdsize);\n    MonCommand::encode_array(cmds, cmdsize, classic_commands_bl);\n\n    lock.Unlock();\n    return 0;\n}\n```\n\n// bootstrap() ; 接下去我们需要看peer如何处理OP_PROBE消息\n```c++\nvoid Monitor::bootstrap()\n{\n   // ....\n   state = STATE_PROBING;\n   _reset();\n\n  // singleton monitor?\n  if(monmap->size() == 1 && rank == 0){\n    win_standalone_election();\n    return;\n  }  \n  // ....\n  dout(10) << \"probing other monitors\" <<dendl;\n  for (unsigned i = 0; i < monmap->size(); i++) {\n     if((int)i != rank){\n        messenger->send_message(new MMonProbe(monmap->fsid, MMonProbe::OP_PROBE, name, has_ever_joined), monmap->get_inst(i));\n     }\n  }\n\n  for(set<entity_addr_t>::iterator p = extra_probe_peers.begin(); p != extra_probe_peers.end(); ++p){\n    if (*p != messenger->get_addr()){\n        entity_inst_t i;\n        i.name = entity_name_t::MON(-1);\n        i.addr = *p;\n        messenger->send_message(new MMonProbe(monmap->fsid, MMonProbe::OP_PROBE, name, has_ever_joined), i);\n    }\n  }\n}\n```\n\n//handle_probe() 用来处理OP_PROBE消息\n```c++\nvoid Monitor::handle_probe(MonOpRequestRef op){\n    MMonProbe *m = static_cast<MMonProbe*>(op->get_req());\n    dout(10) << \"handle_probe \"  << *m << dendl;\n\n    if(m->fsid != monmap->fsid){\n        dout(0) << \"handle_probe ignoring fsid \"  << m->fsid << \" != \" << monmap->fsid << dendl;\n        return;\n    }\n\n    switch (m->op){\n    case MMonProbe::OP_PROBE:\n        handle_probe_probe(op);     // <-- 处理OP_PROBE请求\n        break;\n\n    case MMonProbe::OP_REPLY:\n        handle_probe_reply(op);\n        break;\n\n    case MMonProbe::OP_MISSING_FEATURES:\n        derr << __func__ << \" missing features, have \" << CEPH_FEATURES_ALL \n        << \", required \" << m->required_features\n        << \", missing \" << (m->required_features & ~CEPH_FEATURES_ALL)\n        << dendl; \n        break;\n    }\n}\n```\n\n//handle_probe_probe 处理流程\n```c++\nvoid Monitor::handle_probe_probe(MonOpRequestRef op){\n    MMonProbe *m = static_cast<MMonProbe*>(op->get_req());\n\n    dout(10) << \"handle_probe_probe \" << m->get_source_inst() << *m\n        << \" features \" << m->get_connection()->get_features() << dendl;\n\n    uint_64 missing = required_features & ~m->get_connection()->get_features();\n    // ......\n    if (!is_probing() && !is_synchronizing()) {\n        if(paxos->get_version() + 1 < m->paxos_first_version){\n            dout(1) << \" peer \" << m->get_source_addr() << \" has \n            first_committed \" << \" ahead of us, re-bootstrapping \" << dendl;\n            bootstrap();\n            goto out;\n        }\n    }\n    MMonProbe *r;\n    r = new MMonProbe(monmap->fsid, MMonProbe::OP_REPLY, name, has_ever_joined);\n    r->name = name;\n    r->quorum = quorum;\n    monmap->encode(r->monmap_bl, m->get_connection()->get_features());\n    r->paxos_first_version = paxos->get_first_committed();\n    r->paxos_last_version = paxos->get_version();\n    m->get_connection()->send_message(r);\n\n    // did we discover a peer here?\n    if(!monmap->contains(m->get_source_addr())){\n        dout(1) << \" adding peer \"<< m->get_source_addr() \n        << \" to list of hints \"<< dendl;\n        extra_probe_peers.insert(m->get_source_addr());\n    }\n\n   out:\n        return;\n}\n```\n\n//handle_probe_reply()\nvoid Monitor::handle_probe_reply(MonOpRequestRef op){\n    MMonProbe *m = static_cast<MMonProbe*>(op->get_req());\n    dout(10) << \"handle_probe_reply \" << m->get_source_inst() << *m <<dendl;\n    dout(10) << \" monmap is \" << *monmap << dendl; \n\n    //discover name and addrs during probing or electing states.\n    if(!is_probing() && !is_electing()){\n        return;\n    }\n    //newer map, or they've joined a quorum and we haven't?\n}\n\n","source":"_posts/ceph_mon.md","raw":"---\n  title: ceph-mon\n---\n\nmon->preinit()\nmessenger->start()\nmon->init()\n\n```c++\n// mon/Monitor.cc\nint Monitor::preinit()\n{\n    lock.Lock();\n    dout(1) << \"preinit fsid \" << monmap->fsid << dendl;\n\n    assert(!logger);\n    {\n        PerfCountersBuilder pcb(g_ceph_context, \"mon\", l_mon_first, l_mon_last);\n        logger = pcb.create_perf_counters();\n        cct->get_perfcounters_collection()->add(logger);\n    }\n    assert(!cluster_logger);  \n    {\n    PerfCountersBuilder pcb(g_ceph_context, \"cluster\", l_cluster_first, l_cluster_last);\n    pcb.add_u64(l_cluster_num_mon, \"num_mon\");\n    // ......\n    cluster_logger = pcb.create_perf_counters();\n  }\n  paxos->init_logger();\n\n  // verify cluster_uuid\n  {\n    int r = check_fsid()\n    if (r == -ENOENT)\n        r = write_fsid();\n    if (r<0){\n        lock.Unlock();\n        return r;\n    }\n  }\n\n  //open compatset\n  read_features();\n\n  // have we ever joined a quorum ?\n  has_ever_joined = (store->get(MONITOR_NAME, \"joined\") != 0);\n  dout(10) << \"has_ever_joined = \"<< (int)has_ever_joined << dendl;\n\n  if(!has_ever_joined){\n    // impose initial quorum restructions ?\n    list<string> initial_members;\n    get_str_list(g_conf->mon_initial_members, initial_members);\n\n    if (!initial_members.empty()){\n        dout(1) << \" initial_members \" << initial_members << \", filtering seed monmap\" << dendl;\n        monmap->set_inital_members(g_ceph_context, initial_members, name, messenger->get_myaddr(), &extra_probe_peers);\n        dout(10) << \" monmap is \" << *monmap << dendl;\n        dout(10) << \" extra probe peers \" << extra_probe_peers << dendl;\n    }\n   } else if ( !monmap->contains(name)) {\n        derr << \" not in monmap and have been in a quorum before; \" << \"must have been removed \" << dendl;\n        if (g_conf->mon_force_quorum_join) {\n            dout(0)  << \" we should have died but \"\n                << \" mon_force_quorum_join is set -- allowing boot\" << dendl;\n        }else{\n            derr << \"commit suicide!\" << dendl;\n            return -ENOENT;\n        }\n   }\n\n   {\n        // we have a potentially inconsistent store state in hands. Get rid of \n        // it and start fresh\n        bool clear_store = false;\n        if(store->exists(\"mon_sync\", \"in_sync\")){\n            dout(1) << __func__ << \"clean up potentially inconsistent store state \" << dendl;\n            clear_store = true;\n        } \n\n        if (store->get(\"mon_sync\", \"force_sync\") > 0){\n            dout(1) << __func__ << \" force sync by clearing store state \" << dendl;\n            clear_store = true;\n        }\n        if(clear_store) {\n            set<string> sync_prefixes = get_sync_targets_names();\n            store->clear(sync_prefixes);\n        }\n   }\n\n   sync_last_commited_floor = store->get(\"mon_sync\", \"last_commited_floor\");\n   dout(10)  << \"sync_last_commited_floor \"<< sync_last_commited_floor << dendl;\n\n   init_paxos();  //pasox 初始化\n   health_monitor->init();\n\n   ....\n}\n```\n\n```c++\n// mon/Monitor.cc\nvoid Monitor::init_paxos() {\n    dout(10) << __func__ << dendl;\n    paxos->init(); \n\n    // init services\n    // paxos_service 在Monitor构建时，加入了6个派生类\n    - MDSMonitor\n    - MonmapMonitor\n    - OSDMonitor\n    - PGMonitor\n    - LogMonitor\n    - AuthMonitor\n    for(int i=0; i<PAXOS_NUM; ++i){\n        paxos_service[i]->init(); \n    }\n    refresh_from_paxos(NULL);\n}\n```\n\n- last_pn: 上次当选为leader后生成的PN（proposal number)\n- accepted_pn: 当前节点接受过的PN，可能是别的leader提议的PN \n- last_committed: 本节点记录的最后被commit版本\n- first_committed: 本节点记录的第一被commit版本\n```c++\nvoid Paxos::init(){\n    // load paxos variables from stable storage\n    last_pn = get_store()->get(get_name(), \"last_pn\");\n    accepted_pn = get_store()->get(get_name(), \"accepted_pn\");\n    last_committed = get_store()->get(get_name(), \"last_committed\");\n    first_commited = get_store()->get(get_name(), \"first_committed\");\n\n    dout(10) << __func__ << \" last_pn: \" << last_pn << \" accepted_pn: \" \n        << accepted_pn << \" last_commited: \" << last_commited \n        << \" first_committed: \" << first_committed << dendl;\n    dout(10) << \"init\" << dendl;\n    assert(is_consistent());\n}\n```\n\n//refresh_from_paxos(NULL)\n```c++\nvoid Monitor::refresh_from_paxos(bool * need_bootstrap){\n    // ....\n    for(int i=0; i<PAXOS_NUM; ++i){\n        paxos_service[i]->refresh(need_boostrap);\n    }\n    for(int i=0; i<PAXOS_NUM; ++i){ //主要是处理PGMonitor\n        paxos_service[i]->post_paxos_update();\n    }\n}\n```\n//paxos_service vector中的对象都没有派生refresh(), 都调用基类refresh方法\n```c++\nvoid PaxosService::refresh(bool *need_boostrap){\n    // ...\n    update_from_paxos(need_boostrap);\n}\n\n// update_from_paxos 均被paxos_service vector中的对象进行了派生\n// 这里仅仅列出MonmapMonitor 对象方法\nvoid MonmapMonitor:;update_from_paxos(bool *need_boostrap){\n    version_t  version = get_last_committed();\n    if(version <= mon->monmap->get_epoch())\n        return \n    dout(10) << __func__ << \" version \" << version\n        << \", my v \" << mon->monmap->epoch << dendl;\n    .....\n}\n```\n\n//post_paxos_update() 方法，\n- 只有PGMonitor覆盖写了post_paxos_update\n- 其他5个类均没有使用基类\n```c++\nvoid PGMonitor:;post_paxos_update(){\n    if(mon->osdmon()->osdmap.get_epoch()){\n        map_pg_creates();\n        send_pg_creates();\n    }\n}\n```\n\n```c++\n// mon/Monitor.cc\nint Monitor::init()\n{\n    dout(2) << \"init\" << dendl;\n    lock.Lock()\n\n    //start ticker\n    timer.init()\n    new_tick()\n\n    //i'm ready!\n    messenger->add_dispatcher_tail(this);\n\n    bootstrap();\n\n    // encode command sets\n    const MonCommand *cmds;\n    int cmdsize;\n    get_locally_supported_monitor_commands(&cmds, &cmdsize);\n    MonCommand::encode_array(cmds, cmdsize, supported_commands_bl);\n    get_classic_monitor_commands(&cmds, &cmdsize);\n    MonCommand::encode_array(cmds, cmdsize, classic_commands_bl);\n\n    lock.Unlock();\n    return 0;\n}\n```\n\n// bootstrap() ; 接下去我们需要看peer如何处理OP_PROBE消息\n```c++\nvoid Monitor::bootstrap()\n{\n   // ....\n   state = STATE_PROBING;\n   _reset();\n\n  // singleton monitor?\n  if(monmap->size() == 1 && rank == 0){\n    win_standalone_election();\n    return;\n  }  \n  // ....\n  dout(10) << \"probing other monitors\" <<dendl;\n  for (unsigned i = 0; i < monmap->size(); i++) {\n     if((int)i != rank){\n        messenger->send_message(new MMonProbe(monmap->fsid, MMonProbe::OP_PROBE, name, has_ever_joined), monmap->get_inst(i));\n     }\n  }\n\n  for(set<entity_addr_t>::iterator p = extra_probe_peers.begin(); p != extra_probe_peers.end(); ++p){\n    if (*p != messenger->get_addr()){\n        entity_inst_t i;\n        i.name = entity_name_t::MON(-1);\n        i.addr = *p;\n        messenger->send_message(new MMonProbe(monmap->fsid, MMonProbe::OP_PROBE, name, has_ever_joined), i);\n    }\n  }\n}\n```\n\n//handle_probe() 用来处理OP_PROBE消息\n```c++\nvoid Monitor::handle_probe(MonOpRequestRef op){\n    MMonProbe *m = static_cast<MMonProbe*>(op->get_req());\n    dout(10) << \"handle_probe \"  << *m << dendl;\n\n    if(m->fsid != monmap->fsid){\n        dout(0) << \"handle_probe ignoring fsid \"  << m->fsid << \" != \" << monmap->fsid << dendl;\n        return;\n    }\n\n    switch (m->op){\n    case MMonProbe::OP_PROBE:\n        handle_probe_probe(op);     // <-- 处理OP_PROBE请求\n        break;\n\n    case MMonProbe::OP_REPLY:\n        handle_probe_reply(op);\n        break;\n\n    case MMonProbe::OP_MISSING_FEATURES:\n        derr << __func__ << \" missing features, have \" << CEPH_FEATURES_ALL \n        << \", required \" << m->required_features\n        << \", missing \" << (m->required_features & ~CEPH_FEATURES_ALL)\n        << dendl; \n        break;\n    }\n}\n```\n\n//handle_probe_probe 处理流程\n```c++\nvoid Monitor::handle_probe_probe(MonOpRequestRef op){\n    MMonProbe *m = static_cast<MMonProbe*>(op->get_req());\n\n    dout(10) << \"handle_probe_probe \" << m->get_source_inst() << *m\n        << \" features \" << m->get_connection()->get_features() << dendl;\n\n    uint_64 missing = required_features & ~m->get_connection()->get_features();\n    // ......\n    if (!is_probing() && !is_synchronizing()) {\n        if(paxos->get_version() + 1 < m->paxos_first_version){\n            dout(1) << \" peer \" << m->get_source_addr() << \" has \n            first_committed \" << \" ahead of us, re-bootstrapping \" << dendl;\n            bootstrap();\n            goto out;\n        }\n    }\n    MMonProbe *r;\n    r = new MMonProbe(monmap->fsid, MMonProbe::OP_REPLY, name, has_ever_joined);\n    r->name = name;\n    r->quorum = quorum;\n    monmap->encode(r->monmap_bl, m->get_connection()->get_features());\n    r->paxos_first_version = paxos->get_first_committed();\n    r->paxos_last_version = paxos->get_version();\n    m->get_connection()->send_message(r);\n\n    // did we discover a peer here?\n    if(!monmap->contains(m->get_source_addr())){\n        dout(1) << \" adding peer \"<< m->get_source_addr() \n        << \" to list of hints \"<< dendl;\n        extra_probe_peers.insert(m->get_source_addr());\n    }\n\n   out:\n        return;\n}\n```\n\n//handle_probe_reply()\nvoid Monitor::handle_probe_reply(MonOpRequestRef op){\n    MMonProbe *m = static_cast<MMonProbe*>(op->get_req());\n    dout(10) << \"handle_probe_reply \" << m->get_source_inst() << *m <<dendl;\n    dout(10) << \" monmap is \" << *monmap << dendl; \n\n    //discover name and addrs during probing or electing states.\n    if(!is_probing() && !is_electing()){\n        return;\n    }\n    //newer map, or they've joined a quorum and we haven't?\n}\n\n","slug":"ceph_mon","published":1,"date":"2018-12-14T09:35:12.719Z","updated":"2018-12-25T10:07:56.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3l8d4e00005sha3zdmzvsc","content":"<p>mon-&gt;preinit()<br>messenger-&gt;start()<br>mon-&gt;init()</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mon/Monitor.cc</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> Monitor::preinit()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    lock.Lock();</span><br><span class=\"line\">    dout(<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">\"preinit fsid \"</span> &lt;&lt; monmap-&gt;fsid &lt;&lt; dendl;</span><br><span class=\"line\"></span><br><span class=\"line\">    assert(!logger);</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">PerfCountersBuilder <span class=\"title\">pcb</span><span class=\"params\">(g_ceph_context, <span class=\"string\">\"mon\"</span>, l_mon_first, l_mon_last)</span></span>;</span><br><span class=\"line\">        logger = pcb.create_perf_counters();</span><br><span class=\"line\">        cct-&gt;get_perfcounters_collection()-&gt;add(logger);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    assert(!cluster_logger);  </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"function\">PerfCountersBuilder <span class=\"title\">pcb</span><span class=\"params\">(g_ceph_context, <span class=\"string\">\"cluster\"</span>, l_cluster_first, l_cluster_last)</span></span>;</span><br><span class=\"line\">    pcb.add_u64(l_cluster_num_mon, <span class=\"string\">\"num_mon\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// ......</span></span><br><span class=\"line\">    cluster_logger = pcb.create_perf_counters();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  paxos-&gt;init_logger();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// verify cluster_uuid</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> r = check_fsid()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r == -ENOENT)</span><br><span class=\"line\">        r = write_fsid();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        lock.Unlock();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//open compatset</span></span><br><span class=\"line\">  read_features();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// have we ever joined a quorum ?</span></span><br><span class=\"line\">  has_ever_joined = (store-&gt;get(MONITOR_NAME, <span class=\"string\">\"joined\"</span>) != <span class=\"number\">0</span>);</span><br><span class=\"line\">  dout(<span class=\"number\">10</span>) &lt;&lt; <span class=\"string\">\"has_ever_joined = \"</span>&lt;&lt; (<span class=\"keyword\">int</span>)has_ever_joined &lt;&lt; dendl;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!has_ever_joined)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// impose initial quorum restructions ?</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>&lt;<span class=\"built_in\">string</span>&gt; initial_members;</span><br><span class=\"line\">    get_str_list(g_conf-&gt;mon_initial_members, initial_members);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!initial_members.empty())&#123;</span><br><span class=\"line\">        dout(<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">\" initial_members \"</span> &lt;&lt; initial_members &lt;&lt; <span class=\"string\">\", filtering seed monmap\"</span> &lt;&lt; dendl;</span><br><span class=\"line\">        monmap-&gt;set_inital_members(g_ceph_context, initial_members, name, messenger-&gt;get_myaddr(), &amp;extra_probe_peers);</span><br><span class=\"line\">        dout(<span class=\"number\">10</span>) &lt;&lt; <span class=\"string\">\" monmap is \"</span> &lt;&lt; *monmap &lt;&lt; dendl;</span><br><span class=\"line\">        dout(<span class=\"number\">10</span>) &lt;&lt; <span class=\"string\">\" extra probe peers \"</span> &lt;&lt; extra_probe_peers &lt;&lt; dendl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( !monmap-&gt;contains(name)) &#123;</span><br><span class=\"line\">        derr &lt;&lt; <span class=\"string\">\" not in monmap and have been in a quorum before; \"</span> &lt;&lt; <span class=\"string\">\"must have been removed \"</span> &lt;&lt; dendl;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (g_conf-&gt;mon_force_quorum_join) &#123;</span><br><span class=\"line\">            dout(<span class=\"number\">0</span>)  &lt;&lt; <span class=\"string\">\" we should have died but \"</span></span><br><span class=\"line\">                &lt;&lt; <span class=\"string\">\" mon_force_quorum_join is set -- allowing boot\"</span> &lt;&lt; dendl;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            derr &lt;&lt; <span class=\"string\">\"commit suicide!\"</span> &lt;&lt; dendl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -ENOENT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">        <span class=\"comment\">// we have a potentially inconsistent store state in hands. Get rid of </span></span><br><span class=\"line\">        <span class=\"comment\">// it and start fresh</span></span><br><span class=\"line\">        <span class=\"keyword\">bool</span> clear_store = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(store-&gt;exists(<span class=\"string\">\"mon_sync\"</span>, <span class=\"string\">\"in_sync\"</span>))&#123;</span><br><span class=\"line\">            dout(<span class=\"number\">1</span>) &lt;&lt; __func__ &lt;&lt; <span class=\"string\">\"clean up potentially inconsistent store state \"</span> &lt;&lt; dendl;</span><br><span class=\"line\">            clear_store = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (store-&gt;get(<span class=\"string\">\"mon_sync\"</span>, <span class=\"string\">\"force_sync\"</span>) &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            dout(<span class=\"number\">1</span>) &lt;&lt; __func__ &lt;&lt; <span class=\"string\">\" force sync by clearing store state \"</span> &lt;&lt; dendl;</span><br><span class=\"line\">            clear_store = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(clear_store) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt; sync_prefixes = get_sync_targets_names();</span><br><span class=\"line\">            store-&gt;clear(sync_prefixes);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   sync_last_commited_floor = store-&gt;get(<span class=\"string\">\"mon_sync\"</span>, <span class=\"string\">\"last_commited_floor\"</span>);</span><br><span class=\"line\">   dout(<span class=\"number\">10</span>)  &lt;&lt; <span class=\"string\">\"sync_last_commited_floor \"</span>&lt;&lt; sync_last_commited_floor &lt;&lt; dendl;</span><br><span class=\"line\"></span><br><span class=\"line\">   init_paxos();  <span class=\"comment\">//pasox 初始化</span></span><br><span class=\"line\">   health_monitor-&gt;init();</span><br><span class=\"line\"></span><br><span class=\"line\">   ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mon/Monitor.cc</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> Monitor::init_paxos() &#123;</span><br><span class=\"line\">    dout(<span class=\"number\">10</span>) &lt;&lt; __func__ &lt;&lt; dendl;</span><br><span class=\"line\">    paxos-&gt;init(); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// init services</span></span><br><span class=\"line\">    <span class=\"comment\">// paxos_service 在Monitor构建时，加入了6个派生类</span></span><br><span class=\"line\">    - MDSMonitor</span><br><span class=\"line\">    - MonmapMonitor</span><br><span class=\"line\">    - OSDMonitor</span><br><span class=\"line\">    - PGMonitor</span><br><span class=\"line\">    - LogMonitor</span><br><span class=\"line\">    - AuthMonitor</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;PAXOS_NUM; ++i)&#123;</span><br><span class=\"line\">        paxos_service[i]-&gt;init(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    refresh_from_paxos(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>last_pn: 上次当选为leader后生成的PN（proposal number)</li>\n<li>accepted_pn: 当前节点接受过的PN，可能是别的leader提议的PN </li>\n<li>last_committed: 本节点记录的最后被commit版本</li>\n<li>first_committed: 本节点记录的第一被commit版本<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> Paxos::init()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// load paxos variables from stable storage</span></span><br><span class=\"line\">    last_pn = get_store()-&gt;get(get_name(), <span class=\"string\">\"last_pn\"</span>);</span><br><span class=\"line\">    accepted_pn = get_store()-&gt;get(get_name(), <span class=\"string\">\"accepted_pn\"</span>);</span><br><span class=\"line\">    last_committed = get_store()-&gt;get(get_name(), <span class=\"string\">\"last_committed\"</span>);</span><br><span class=\"line\">    first_commited = get_store()-&gt;get(get_name(), <span class=\"string\">\"first_committed\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    dout(<span class=\"number\">10</span>) &lt;&lt; __func__ &lt;&lt; <span class=\"string\">\" last_pn: \"</span> &lt;&lt; last_pn &lt;&lt; <span class=\"string\">\" accepted_pn: \"</span> </span><br><span class=\"line\">        &lt;&lt; accepted_pn &lt;&lt; <span class=\"string\">\" last_commited: \"</span> &lt;&lt; last_commited </span><br><span class=\"line\">        &lt;&lt; <span class=\"string\">\" first_committed: \"</span> &lt;&lt; first_committed &lt;&lt; dendl;</span><br><span class=\"line\">    dout(<span class=\"number\">10</span>) &lt;&lt; <span class=\"string\">\"init\"</span> &lt;&lt; dendl;</span><br><span class=\"line\">    assert(is_consistent());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>//refresh_from_paxos(NULL)<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> Monitor::refresh_from_paxos(<span class=\"keyword\">bool</span> * need_bootstrap)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ....</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;PAXOS_NUM; ++i)&#123;</span><br><span class=\"line\">        paxos_service[i]-&gt;refresh(need_boostrap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;PAXOS_NUM; ++i)&#123; <span class=\"comment\">//主要是处理PGMonitor</span></span><br><span class=\"line\">        paxos_service[i]-&gt;post_paxos_update();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>//paxos_service vector中的对象都没有派生refresh(), 都调用基类refresh方法<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> PaxosService::refresh(<span class=\"keyword\">bool</span> *need_boostrap)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    update_from_paxos(need_boostrap);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// update_from_paxos 均被paxos_service vector中的对象进行了派生</span></span><br><span class=\"line\"><span class=\"comment\">// 这里仅仅列出MonmapMonitor 对象方法</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> MonmapMonitor:;update_from_paxos(<span class=\"keyword\">bool</span> *need_boostrap)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">version_t</span>  version = get_last_committed();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(version &lt;= mon-&gt;monmap-&gt;get_epoch())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> </span><br><span class=\"line\">    dout(<span class=\"number\">10</span>) &lt;&lt; __func__ &lt;&lt; <span class=\"string\">\" version \"</span> &lt;&lt; version</span><br><span class=\"line\">        &lt;&lt; <span class=\"string\">\", my v \"</span> &lt;&lt; mon-&gt;monmap-&gt;epoch &lt;&lt; dendl;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>//post_paxos_update() 方法，</p>\n<ul>\n<li>只有PGMonitor覆盖写了post_paxos_update</li>\n<li>其他5个类均没有使用基类<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> PGMonitor:;post_paxos_update()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mon-&gt;osdmon()-&gt;osdmap.get_epoch())&#123;</span><br><span class=\"line\">        map_pg_creates();</span><br><span class=\"line\">        send_pg_creates();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mon/Monitor.cc</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> Monitor::init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    dout(<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">\"init\"</span> &lt;&lt; dendl;</span><br><span class=\"line\">    lock.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//start ticker</span></span><br><span class=\"line\">    timer.init()</span><br><span class=\"line\">    new_tick()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//i'm ready!</span></span><br><span class=\"line\">    messenger-&gt;add_dispatcher_tail(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    bootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// encode command sets</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> MonCommand *cmds;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cmdsize;</span><br><span class=\"line\">    get_locally_supported_monitor_commands(&amp;cmds, &amp;cmdsize);</span><br><span class=\"line\">    MonCommand::encode_array(cmds, cmdsize, supported_commands_bl);</span><br><span class=\"line\">    get_classic_monitor_commands(&amp;cmds, &amp;cmdsize);</span><br><span class=\"line\">    MonCommand::encode_array(cmds, cmdsize, classic_commands_bl);</span><br><span class=\"line\"></span><br><span class=\"line\">    lock.Unlock();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>// bootstrap() ; 接下去我们需要看peer如何处理OP_PROBE消息<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> Monitor::bootstrap()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// ....</span></span><br><span class=\"line\">   state = STATE_PROBING;</span><br><span class=\"line\">   _reset();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// singleton monitor?</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(monmap-&gt;size() == <span class=\"number\">1</span> &amp;&amp; rank == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    win_standalone_election();</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"comment\">// ....</span></span><br><span class=\"line\">  dout(<span class=\"number\">10</span>) &lt;&lt; <span class=\"string\">\"probing other monitors\"</span> &lt;&lt;dendl;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i = <span class=\"number\">0</span>; i &lt; monmap-&gt;size(); i++) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>((<span class=\"keyword\">int</span>)i != rank)&#123;</span><br><span class=\"line\">        messenger-&gt;send_message(<span class=\"keyword\">new</span> MMonProbe(monmap-&gt;fsid, MMonProbe::OP_PROBE, name, has_ever_joined), monmap-&gt;get_inst(i));</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">entity_addr_t</span>&gt;::iterator p = extra_probe_peers.begin(); p != extra_probe_peers.end(); ++p)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*p != messenger-&gt;get_addr())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">entity_inst_t</span> i;</span><br><span class=\"line\">        i.name = <span class=\"keyword\">entity_name_t</span>::MON(<span class=\"number\">-1</span>);</span><br><span class=\"line\">        i.addr = *p;</span><br><span class=\"line\">        messenger-&gt;send_message(<span class=\"keyword\">new</span> MMonProbe(monmap-&gt;fsid, MMonProbe::OP_PROBE, name, has_ever_joined), i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>//handle_probe() 用来处理OP_PROBE消息<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> Monitor::handle_probe(MonOpRequestRef op)&#123;</span><br><span class=\"line\">    MMonProbe *m = <span class=\"keyword\">static_cast</span>&lt;MMonProbe*&gt;(op-&gt;get_req());</span><br><span class=\"line\">    dout(<span class=\"number\">10</span>) &lt;&lt; <span class=\"string\">\"handle_probe \"</span>  &lt;&lt; *m &lt;&lt; dendl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m-&gt;fsid != monmap-&gt;fsid)&#123;</span><br><span class=\"line\">        dout(<span class=\"number\">0</span>) &lt;&lt; <span class=\"string\">\"handle_probe ignoring fsid \"</span>  &lt;&lt; m-&gt;fsid &lt;&lt; <span class=\"string\">\" != \"</span> &lt;&lt; monmap-&gt;fsid &lt;&lt; dendl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (m-&gt;op)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> MMonProbe::OP_PROBE:</span><br><span class=\"line\">        handle_probe_probe(op);     <span class=\"comment\">// &lt;-- 处理OP_PROBE请求</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> MMonProbe::OP_REPLY:</span><br><span class=\"line\">        handle_probe_reply(op);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> MMonProbe::OP_MISSING_FEATURES:</span><br><span class=\"line\">        derr &lt;&lt; __func__ &lt;&lt; <span class=\"string\">\" missing features, have \"</span> &lt;&lt; CEPH_FEATURES_ALL </span><br><span class=\"line\">        &lt;&lt; <span class=\"string\">\", required \"</span> &lt;&lt; m-&gt;required_features</span><br><span class=\"line\">        &lt;&lt; <span class=\"string\">\", missing \"</span> &lt;&lt; (m-&gt;required_features &amp; ~CEPH_FEATURES_ALL)</span><br><span class=\"line\">        &lt;&lt; dendl; </span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>//handle_probe_probe 处理流程<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> Monitor::handle_probe_probe(MonOpRequestRef op)&#123;</span><br><span class=\"line\">    MMonProbe *m = <span class=\"keyword\">static_cast</span>&lt;MMonProbe*&gt;(op-&gt;get_req());</span><br><span class=\"line\"></span><br><span class=\"line\">    dout(<span class=\"number\">10</span>) &lt;&lt; <span class=\"string\">\"handle_probe_probe \"</span> &lt;&lt; m-&gt;get_source_inst() &lt;&lt; *m</span><br><span class=\"line\">        &lt;&lt; <span class=\"string\">\" features \"</span> &lt;&lt; m-&gt;get_connection()-&gt;get_features() &lt;&lt; dendl;</span><br><span class=\"line\"></span><br><span class=\"line\">    uint_64 missing = required_features &amp; ~m-&gt;get_connection()-&gt;get_features();</span><br><span class=\"line\">    <span class=\"comment\">// ......</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!is_probing() &amp;&amp; !is_synchronizing()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(paxos-&gt;get_version() + <span class=\"number\">1</span> &lt; m-&gt;paxos_first_version)&#123;</span><br><span class=\"line\">            dout(<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">\" peer \"</span> &lt;&lt; m-&gt;get_source_addr() &lt;&lt; <span class=\"string\">\" has </span></span><br><span class=\"line\"><span class=\"string\">            first_committed \"</span> &lt;&lt; <span class=\"string\">\" ahead of us, re-bootstrapping \"</span> &lt;&lt; dendl;</span><br><span class=\"line\">            bootstrap();</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MMonProbe *r;</span><br><span class=\"line\">    r = <span class=\"keyword\">new</span> MMonProbe(monmap-&gt;fsid, MMonProbe::OP_REPLY, name, has_ever_joined);</span><br><span class=\"line\">    r-&gt;name = name;</span><br><span class=\"line\">    r-&gt;quorum = quorum;</span><br><span class=\"line\">    monmap-&gt;encode(r-&gt;monmap_bl, m-&gt;get_connection()-&gt;get_features());</span><br><span class=\"line\">    r-&gt;paxos_first_version = paxos-&gt;get_first_committed();</span><br><span class=\"line\">    r-&gt;paxos_last_version = paxos-&gt;get_version();</span><br><span class=\"line\">    m-&gt;get_connection()-&gt;send_message(r);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// did we discover a peer here?</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!monmap-&gt;contains(m-&gt;get_source_addr()))&#123;</span><br><span class=\"line\">        dout(<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">\" adding peer \"</span>&lt;&lt; m-&gt;get_source_addr() </span><br><span class=\"line\">        &lt;&lt; <span class=\"string\">\" to list of hints \"</span>&lt;&lt; dendl;</span><br><span class=\"line\">        extra_probe_peers.insert(m-&gt;get_source_addr());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   out:</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>//handle_probe_reply()<br>void Monitor::handle_probe_reply(MonOpRequestRef op){<br>    MMonProbe <em>m = static_cast&lt;MMonProbe</em>&gt;(op-&gt;get_req());<br>    dout(10) &lt;&lt; “handle_probe_reply “ &lt;&lt; m-&gt;get_source_inst() &lt;&lt; <em>m &lt;&lt;dendl;<br>    dout(10) &lt;&lt; “ monmap is “ &lt;&lt; </em>monmap &lt;&lt; dendl; </p>\n<pre><code>//discover name and addrs during probing or electing states.\nif(!is_probing() &amp;&amp; !is_electing()){\n    return;\n}\n//newer map, or they&apos;ve joined a quorum and we haven&apos;t?\n</code></pre><p>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>mon-&gt;preinit()<br>messenger-&gt;start()<br>mon-&gt;init()</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mon/Monitor.cc</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> Monitor::preinit()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    lock.Lock();</span><br><span class=\"line\">    dout(<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">\"preinit fsid \"</span> &lt;&lt; monmap-&gt;fsid &lt;&lt; dendl;</span><br><span class=\"line\"></span><br><span class=\"line\">    assert(!logger);</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\">PerfCountersBuilder <span class=\"title\">pcb</span><span class=\"params\">(g_ceph_context, <span class=\"string\">\"mon\"</span>, l_mon_first, l_mon_last)</span></span>;</span><br><span class=\"line\">        logger = pcb.create_perf_counters();</span><br><span class=\"line\">        cct-&gt;get_perfcounters_collection()-&gt;add(logger);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    assert(!cluster_logger);  </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"function\">PerfCountersBuilder <span class=\"title\">pcb</span><span class=\"params\">(g_ceph_context, <span class=\"string\">\"cluster\"</span>, l_cluster_first, l_cluster_last)</span></span>;</span><br><span class=\"line\">    pcb.add_u64(l_cluster_num_mon, <span class=\"string\">\"num_mon\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// ......</span></span><br><span class=\"line\">    cluster_logger = pcb.create_perf_counters();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  paxos-&gt;init_logger();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// verify cluster_uuid</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> r = check_fsid()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r == -ENOENT)</span><br><span class=\"line\">        r = write_fsid();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        lock.Unlock();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//open compatset</span></span><br><span class=\"line\">  read_features();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// have we ever joined a quorum ?</span></span><br><span class=\"line\">  has_ever_joined = (store-&gt;get(MONITOR_NAME, <span class=\"string\">\"joined\"</span>) != <span class=\"number\">0</span>);</span><br><span class=\"line\">  dout(<span class=\"number\">10</span>) &lt;&lt; <span class=\"string\">\"has_ever_joined = \"</span>&lt;&lt; (<span class=\"keyword\">int</span>)has_ever_joined &lt;&lt; dendl;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!has_ever_joined)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// impose initial quorum restructions ?</span></span><br><span class=\"line\">    <span class=\"built_in\">list</span>&lt;<span class=\"built_in\">string</span>&gt; initial_members;</span><br><span class=\"line\">    get_str_list(g_conf-&gt;mon_initial_members, initial_members);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!initial_members.empty())&#123;</span><br><span class=\"line\">        dout(<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">\" initial_members \"</span> &lt;&lt; initial_members &lt;&lt; <span class=\"string\">\", filtering seed monmap\"</span> &lt;&lt; dendl;</span><br><span class=\"line\">        monmap-&gt;set_inital_members(g_ceph_context, initial_members, name, messenger-&gt;get_myaddr(), &amp;extra_probe_peers);</span><br><span class=\"line\">        dout(<span class=\"number\">10</span>) &lt;&lt; <span class=\"string\">\" monmap is \"</span> &lt;&lt; *monmap &lt;&lt; dendl;</span><br><span class=\"line\">        dout(<span class=\"number\">10</span>) &lt;&lt; <span class=\"string\">\" extra probe peers \"</span> &lt;&lt; extra_probe_peers &lt;&lt; dendl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( !monmap-&gt;contains(name)) &#123;</span><br><span class=\"line\">        derr &lt;&lt; <span class=\"string\">\" not in monmap and have been in a quorum before; \"</span> &lt;&lt; <span class=\"string\">\"must have been removed \"</span> &lt;&lt; dendl;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (g_conf-&gt;mon_force_quorum_join) &#123;</span><br><span class=\"line\">            dout(<span class=\"number\">0</span>)  &lt;&lt; <span class=\"string\">\" we should have died but \"</span></span><br><span class=\"line\">                &lt;&lt; <span class=\"string\">\" mon_force_quorum_join is set -- allowing boot\"</span> &lt;&lt; dendl;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            derr &lt;&lt; <span class=\"string\">\"commit suicide!\"</span> &lt;&lt; dendl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -ENOENT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">        <span class=\"comment\">// we have a potentially inconsistent store state in hands. Get rid of </span></span><br><span class=\"line\">        <span class=\"comment\">// it and start fresh</span></span><br><span class=\"line\">        <span class=\"keyword\">bool</span> clear_store = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(store-&gt;exists(<span class=\"string\">\"mon_sync\"</span>, <span class=\"string\">\"in_sync\"</span>))&#123;</span><br><span class=\"line\">            dout(<span class=\"number\">1</span>) &lt;&lt; __func__ &lt;&lt; <span class=\"string\">\"clean up potentially inconsistent store state \"</span> &lt;&lt; dendl;</span><br><span class=\"line\">            clear_store = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (store-&gt;get(<span class=\"string\">\"mon_sync\"</span>, <span class=\"string\">\"force_sync\"</span>) &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            dout(<span class=\"number\">1</span>) &lt;&lt; __func__ &lt;&lt; <span class=\"string\">\" force sync by clearing store state \"</span> &lt;&lt; dendl;</span><br><span class=\"line\">            clear_store = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(clear_store) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt; sync_prefixes = get_sync_targets_names();</span><br><span class=\"line\">            store-&gt;clear(sync_prefixes);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   sync_last_commited_floor = store-&gt;get(<span class=\"string\">\"mon_sync\"</span>, <span class=\"string\">\"last_commited_floor\"</span>);</span><br><span class=\"line\">   dout(<span class=\"number\">10</span>)  &lt;&lt; <span class=\"string\">\"sync_last_commited_floor \"</span>&lt;&lt; sync_last_commited_floor &lt;&lt; dendl;</span><br><span class=\"line\"></span><br><span class=\"line\">   init_paxos();  <span class=\"comment\">//pasox 初始化</span></span><br><span class=\"line\">   health_monitor-&gt;init();</span><br><span class=\"line\"></span><br><span class=\"line\">   ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mon/Monitor.cc</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> Monitor::init_paxos() &#123;</span><br><span class=\"line\">    dout(<span class=\"number\">10</span>) &lt;&lt; __func__ &lt;&lt; dendl;</span><br><span class=\"line\">    paxos-&gt;init(); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// init services</span></span><br><span class=\"line\">    <span class=\"comment\">// paxos_service 在Monitor构建时，加入了6个派生类</span></span><br><span class=\"line\">    - MDSMonitor</span><br><span class=\"line\">    - MonmapMonitor</span><br><span class=\"line\">    - OSDMonitor</span><br><span class=\"line\">    - PGMonitor</span><br><span class=\"line\">    - LogMonitor</span><br><span class=\"line\">    - AuthMonitor</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;PAXOS_NUM; ++i)&#123;</span><br><span class=\"line\">        paxos_service[i]-&gt;init(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    refresh_from_paxos(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>last_pn: 上次当选为leader后生成的PN（proposal number)</li>\n<li>accepted_pn: 当前节点接受过的PN，可能是别的leader提议的PN </li>\n<li>last_committed: 本节点记录的最后被commit版本</li>\n<li>first_committed: 本节点记录的第一被commit版本<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> Paxos::init()&#123;</span><br><span class=\"line\">    <span class=\"comment\">// load paxos variables from stable storage</span></span><br><span class=\"line\">    last_pn = get_store()-&gt;get(get_name(), <span class=\"string\">\"last_pn\"</span>);</span><br><span class=\"line\">    accepted_pn = get_store()-&gt;get(get_name(), <span class=\"string\">\"accepted_pn\"</span>);</span><br><span class=\"line\">    last_committed = get_store()-&gt;get(get_name(), <span class=\"string\">\"last_committed\"</span>);</span><br><span class=\"line\">    first_commited = get_store()-&gt;get(get_name(), <span class=\"string\">\"first_committed\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    dout(<span class=\"number\">10</span>) &lt;&lt; __func__ &lt;&lt; <span class=\"string\">\" last_pn: \"</span> &lt;&lt; last_pn &lt;&lt; <span class=\"string\">\" accepted_pn: \"</span> </span><br><span class=\"line\">        &lt;&lt; accepted_pn &lt;&lt; <span class=\"string\">\" last_commited: \"</span> &lt;&lt; last_commited </span><br><span class=\"line\">        &lt;&lt; <span class=\"string\">\" first_committed: \"</span> &lt;&lt; first_committed &lt;&lt; dendl;</span><br><span class=\"line\">    dout(<span class=\"number\">10</span>) &lt;&lt; <span class=\"string\">\"init\"</span> &lt;&lt; dendl;</span><br><span class=\"line\">    assert(is_consistent());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>//refresh_from_paxos(NULL)<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> Monitor::refresh_from_paxos(<span class=\"keyword\">bool</span> * need_bootstrap)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ....</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;PAXOS_NUM; ++i)&#123;</span><br><span class=\"line\">        paxos_service[i]-&gt;refresh(need_boostrap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;PAXOS_NUM; ++i)&#123; <span class=\"comment\">//主要是处理PGMonitor</span></span><br><span class=\"line\">        paxos_service[i]-&gt;post_paxos_update();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>//paxos_service vector中的对象都没有派生refresh(), 都调用基类refresh方法<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> PaxosService::refresh(<span class=\"keyword\">bool</span> *need_boostrap)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    update_from_paxos(need_boostrap);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// update_from_paxos 均被paxos_service vector中的对象进行了派生</span></span><br><span class=\"line\"><span class=\"comment\">// 这里仅仅列出MonmapMonitor 对象方法</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> MonmapMonitor:;update_from_paxos(<span class=\"keyword\">bool</span> *need_boostrap)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">version_t</span>  version = get_last_committed();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(version &lt;= mon-&gt;monmap-&gt;get_epoch())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> </span><br><span class=\"line\">    dout(<span class=\"number\">10</span>) &lt;&lt; __func__ &lt;&lt; <span class=\"string\">\" version \"</span> &lt;&lt; version</span><br><span class=\"line\">        &lt;&lt; <span class=\"string\">\", my v \"</span> &lt;&lt; mon-&gt;monmap-&gt;epoch &lt;&lt; dendl;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>//post_paxos_update() 方法，</p>\n<ul>\n<li>只有PGMonitor覆盖写了post_paxos_update</li>\n<li>其他5个类均没有使用基类<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> PGMonitor:;post_paxos_update()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mon-&gt;osdmon()-&gt;osdmap.get_epoch())&#123;</span><br><span class=\"line\">        map_pg_creates();</span><br><span class=\"line\">        send_pg_creates();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mon/Monitor.cc</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> Monitor::init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    dout(<span class=\"number\">2</span>) &lt;&lt; <span class=\"string\">\"init\"</span> &lt;&lt; dendl;</span><br><span class=\"line\">    lock.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//start ticker</span></span><br><span class=\"line\">    timer.init()</span><br><span class=\"line\">    new_tick()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//i'm ready!</span></span><br><span class=\"line\">    messenger-&gt;add_dispatcher_tail(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    bootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// encode command sets</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> MonCommand *cmds;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cmdsize;</span><br><span class=\"line\">    get_locally_supported_monitor_commands(&amp;cmds, &amp;cmdsize);</span><br><span class=\"line\">    MonCommand::encode_array(cmds, cmdsize, supported_commands_bl);</span><br><span class=\"line\">    get_classic_monitor_commands(&amp;cmds, &amp;cmdsize);</span><br><span class=\"line\">    MonCommand::encode_array(cmds, cmdsize, classic_commands_bl);</span><br><span class=\"line\"></span><br><span class=\"line\">    lock.Unlock();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>// bootstrap() ; 接下去我们需要看peer如何处理OP_PROBE消息<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> Monitor::bootstrap()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// ....</span></span><br><span class=\"line\">   state = STATE_PROBING;</span><br><span class=\"line\">   _reset();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// singleton monitor?</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(monmap-&gt;size() == <span class=\"number\">1</span> &amp;&amp; rank == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    win_standalone_election();</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"comment\">// ....</span></span><br><span class=\"line\">  dout(<span class=\"number\">10</span>) &lt;&lt; <span class=\"string\">\"probing other monitors\"</span> &lt;&lt;dendl;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">unsigned</span> i = <span class=\"number\">0</span>; i &lt; monmap-&gt;size(); i++) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>((<span class=\"keyword\">int</span>)i != rank)&#123;</span><br><span class=\"line\">        messenger-&gt;send_message(<span class=\"keyword\">new</span> MMonProbe(monmap-&gt;fsid, MMonProbe::OP_PROBE, name, has_ever_joined), monmap-&gt;get_inst(i));</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">entity_addr_t</span>&gt;::iterator p = extra_probe_peers.begin(); p != extra_probe_peers.end(); ++p)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*p != messenger-&gt;get_addr())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">entity_inst_t</span> i;</span><br><span class=\"line\">        i.name = <span class=\"keyword\">entity_name_t</span>::MON(<span class=\"number\">-1</span>);</span><br><span class=\"line\">        i.addr = *p;</span><br><span class=\"line\">        messenger-&gt;send_message(<span class=\"keyword\">new</span> MMonProbe(monmap-&gt;fsid, MMonProbe::OP_PROBE, name, has_ever_joined), i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>//handle_probe() 用来处理OP_PROBE消息<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> Monitor::handle_probe(MonOpRequestRef op)&#123;</span><br><span class=\"line\">    MMonProbe *m = <span class=\"keyword\">static_cast</span>&lt;MMonProbe*&gt;(op-&gt;get_req());</span><br><span class=\"line\">    dout(<span class=\"number\">10</span>) &lt;&lt; <span class=\"string\">\"handle_probe \"</span>  &lt;&lt; *m &lt;&lt; dendl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m-&gt;fsid != monmap-&gt;fsid)&#123;</span><br><span class=\"line\">        dout(<span class=\"number\">0</span>) &lt;&lt; <span class=\"string\">\"handle_probe ignoring fsid \"</span>  &lt;&lt; m-&gt;fsid &lt;&lt; <span class=\"string\">\" != \"</span> &lt;&lt; monmap-&gt;fsid &lt;&lt; dendl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (m-&gt;op)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> MMonProbe::OP_PROBE:</span><br><span class=\"line\">        handle_probe_probe(op);     <span class=\"comment\">// &lt;-- 处理OP_PROBE请求</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> MMonProbe::OP_REPLY:</span><br><span class=\"line\">        handle_probe_reply(op);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> MMonProbe::OP_MISSING_FEATURES:</span><br><span class=\"line\">        derr &lt;&lt; __func__ &lt;&lt; <span class=\"string\">\" missing features, have \"</span> &lt;&lt; CEPH_FEATURES_ALL </span><br><span class=\"line\">        &lt;&lt; <span class=\"string\">\", required \"</span> &lt;&lt; m-&gt;required_features</span><br><span class=\"line\">        &lt;&lt; <span class=\"string\">\", missing \"</span> &lt;&lt; (m-&gt;required_features &amp; ~CEPH_FEATURES_ALL)</span><br><span class=\"line\">        &lt;&lt; dendl; </span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>//handle_probe_probe 处理流程<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> Monitor::handle_probe_probe(MonOpRequestRef op)&#123;</span><br><span class=\"line\">    MMonProbe *m = <span class=\"keyword\">static_cast</span>&lt;MMonProbe*&gt;(op-&gt;get_req());</span><br><span class=\"line\"></span><br><span class=\"line\">    dout(<span class=\"number\">10</span>) &lt;&lt; <span class=\"string\">\"handle_probe_probe \"</span> &lt;&lt; m-&gt;get_source_inst() &lt;&lt; *m</span><br><span class=\"line\">        &lt;&lt; <span class=\"string\">\" features \"</span> &lt;&lt; m-&gt;get_connection()-&gt;get_features() &lt;&lt; dendl;</span><br><span class=\"line\"></span><br><span class=\"line\">    uint_64 missing = required_features &amp; ~m-&gt;get_connection()-&gt;get_features();</span><br><span class=\"line\">    <span class=\"comment\">// ......</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!is_probing() &amp;&amp; !is_synchronizing()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(paxos-&gt;get_version() + <span class=\"number\">1</span> &lt; m-&gt;paxos_first_version)&#123;</span><br><span class=\"line\">            dout(<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">\" peer \"</span> &lt;&lt; m-&gt;get_source_addr() &lt;&lt; <span class=\"string\">\" has </span></span><br><span class=\"line\"><span class=\"string\">            first_committed \"</span> &lt;&lt; <span class=\"string\">\" ahead of us, re-bootstrapping \"</span> &lt;&lt; dendl;</span><br><span class=\"line\">            bootstrap();</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    MMonProbe *r;</span><br><span class=\"line\">    r = <span class=\"keyword\">new</span> MMonProbe(monmap-&gt;fsid, MMonProbe::OP_REPLY, name, has_ever_joined);</span><br><span class=\"line\">    r-&gt;name = name;</span><br><span class=\"line\">    r-&gt;quorum = quorum;</span><br><span class=\"line\">    monmap-&gt;encode(r-&gt;monmap_bl, m-&gt;get_connection()-&gt;get_features());</span><br><span class=\"line\">    r-&gt;paxos_first_version = paxos-&gt;get_first_committed();</span><br><span class=\"line\">    r-&gt;paxos_last_version = paxos-&gt;get_version();</span><br><span class=\"line\">    m-&gt;get_connection()-&gt;send_message(r);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// did we discover a peer here?</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!monmap-&gt;contains(m-&gt;get_source_addr()))&#123;</span><br><span class=\"line\">        dout(<span class=\"number\">1</span>) &lt;&lt; <span class=\"string\">\" adding peer \"</span>&lt;&lt; m-&gt;get_source_addr() </span><br><span class=\"line\">        &lt;&lt; <span class=\"string\">\" to list of hints \"</span>&lt;&lt; dendl;</span><br><span class=\"line\">        extra_probe_peers.insert(m-&gt;get_source_addr());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   out:</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>//handle_probe_reply()<br>void Monitor::handle_probe_reply(MonOpRequestRef op){<br>    MMonProbe <em>m = static_cast&lt;MMonProbe</em>&gt;(op-&gt;get_req());<br>    dout(10) &lt;&lt; “handle_probe_reply “ &lt;&lt; m-&gt;get_source_inst() &lt;&lt; <em>m &lt;&lt;dendl;<br>    dout(10) &lt;&lt; “ monmap is “ &lt;&lt; </em>monmap &lt;&lt; dendl; </p>\n<pre><code>//discover name and addrs during probing or electing states.\nif(!is_probing() &amp;&amp; !is_electing()){\n    return;\n}\n//newer map, or they&apos;ve joined a quorum and we haven&apos;t?\n</code></pre><p>}</p>\n"},{"title":"ceph rados对象属性研究","_content":"\n### rados\n\nrados组织形式：\n  - pool\n    + object\n      * xattr\n        - xfs文件属性\n        - omap\n      * data\n        - xfs文件内容\n1、rados以pool来组织数据，pool中包含许多object\n2、一个object包含两部分：\n  - 存储对象的数据\n  - 该对象的额外属性xattr\n3、对象的额外属性可以有两个存储的部分：一个是ext4文件的属性部分，这部分往往受底层文件系统的约束，比如ext4文件系统要求其最大不超过4KB；另一个是rados实现的omap，rados使用一种机制，可以为每一个object关联一个omap\n4、omap是一个key-value存储系统，最早是leveldb，当然也有其他选择，比如rocksdb。\n5、FileStore的omap中存放的对视对象的属性信息，以key-value的形式存在，那么对于不同的属性，如何定义对象的键值key呢；\n\n### \n\n```c++\n//struct ghobject_t 底层文件系统中文件描述，name就对于的文件名\nstruct object_t{\n  string name;\n  object_t(): name(s) {}\n  object_t(const char *s): name(s){}\n\n  void swap(object_t& o){\n    name.swap(o.name);\n  }\n\n  void clear(){\n    name.clear();\n  }\n\n  void encode(bufferlist &bl) const{\n    ::encode(name, bl);\n  }\n\n  void decode(bufferlist::iterator &bl){\n    ::decode(name, bl);\n  }\n};\nWRITE_CLASS_ENCODER(object_t)\n```\n\n//struct sobject_t  \n  - 添加了snapshot相关信息的object_t\n  - snap为该对象对于snapshot的snap号\n  - 如果该对象不是快照，则snap字段设置为CEPH_NOSNAP，非snapshot对象也成为head对象 \n```c++\nstruct sobject_t{\n  object_t oid;\n  snapid_t snap;\n\n  sobject_t() : snap(0){}\n  sobject_t(object_t o, snapid_t s) : oid(o), snap(s) {}\n\n  void swap(sobject_t& o){\n    oid.swap(o.oid);\n    snapid_t t = snap;\n    snap = o.snap;\n    o.snap = t;\n  }\n\n  void encode(bufferlist& bl) const{\n    ::encode(oid, bl);\n    ::encode(snap, bl);\n  }\n\n  void decode(bufferlist::iterator& bl) {\n    ::decode(oid, bl);\n    ::decode(snap, bl);\n  }\n};\nWRITE_CLASS_ENCODER(sobject_t)\n```\n\n//hobject_t (hash object)\n  - object_t oid: 对象的名字\n  - snapid_t snap: 保存对象的snap\n  - int64_t pool: 该object所在pool的id\n  - string nspace： 一般为空\n  - string key： \n  - string hash： pg id\n```c++\nstruct hobject_t{\n  object_t oid;\n  snapid_t snap;\nprivate:\n  uint32_t hash;\n  bool max;\n  uint32_t nibblewise_key_cache;\n  uint32_t hash_reverse_bits;\n  static const int64_t POOL_META = -1;\n  static const int64_t POOL_TEMP_START = -2;\n  friend class spg_t;     // for POOL_TEMP_START\npublic:\n  int64_t pool;\n  string  nspace;\n\nprivate:\n  string key;\n  class hobject_t_max {};\n\npublic:\n  const string &get_key() const {\n    return key;\n  }\n\n  void set_key(const std::string &key_){\n    if(key_ == oid.name)\n      key.clear();\n    else\n      key = key_;\n  }\n\n  string to_str() const;\n\n  uint32_t get_hash() const{\n    return hash;\n  }\n\n  void set_hash()(uint32_t value){\n    hash = value;\n    build_hash_cache();\n  }\n\n  static bool match_hash(uint32_t to_check, uint32_t bits, uint32_t match){\n    return (match & ~((~0)<<bits)) == (to_check & ~((~0)<<bits));\n  }\n\n  bool match(uint32_t bits, uint32_t match) const{\n    return match_hash(hash, bits, match);\n  }\n\n  bool is_temp() const{\n    return pool <= POOL_TEMP_START && pool != INT64_MIN;\n  }\n\n  bool ls_meta() const {\n    return pool == POOL_META;\n  }\n\n  hobject_t : snap(0), hash(0), max(false), pool(INT64_MIN){\n    build_hash_cache();\n  }\n\n  hobject_t(const hobject_t &rhs) = default;\n  hobject_t(hobject_t &&rhs) = default;\n  hobject_t(hobject_t_max &&singleton) : hobject_t(){\n    max = true;\n  }\n  hobject_t &operator=(const hobject_t &rhs) = default;\n  hobject_t &operator-(hobject_t &&rhs) = default;\n  hobject_t &operator=(hobject_t_max &&singleton){\n    *this = hobject_t();\n    max = true;\n    return *this;\n  }\n\n  //maximum stored value.\n  static hobject_t_max get_max(){\n    return hobject_t_max();\n  }\n\n  hobject_t(object_t oid, const strings key, snapid_t snap, uint32_t hash, int64_t pool, string nspace): oid(oid), snap(snap), hash(hash), max(false),\n    pool(pool), nspace(nspace), key(soid,oid.name == key ? string() : key){\n      build_hash_cache();\n    }\n\n    /// @return min hobject_t ret s.t. ret.hash == this->hash\n    // 获取边界\n    hobject_t get_boundary() const{\n      if (is_max())\n        return *this;\n      hobject_t ret;\n      ret.set_hash(hash);\n      ret.pool = pool;\n      return ret;\n    }\n\n    hobject_t get_object_boundary() const {\n      if(is_max())\n        return *this;\n      hobject_t ret = *this;\n      ret.snap = 0;\n      return ret;\n    }\n\n    ///@return head version of this hobject_t\n    hobject_t get_head() const{\n      hobject_t ret(*this);\n      ret.snap = CEPH_NOSANP;\n      return ret;\n    }\n\n    ///@return snapdir version of this hobject_t\n    hobject_t get_snapdir() const{\n      hobject_t ret(*this);\n      ret.snap = CEPH_SNAPDIR;\n      return ret;\n    }\n\n    ///@return true if object is head\n    bool is_head() const {\n      return snap == CEPH_NOSANP;\n    }\n\n    ///@return true if object is neither head nor snapdir nor max\n    bool is_snap() const{\n      return !is_max() && !is_head() && !is_snapdir();\n    }\n\n    ///@return true if the object should have a snapset in it's attrs\n    bool has_snapset() const{\n      return is_head() || is_snapdir();\n    }\n\n    //Do not use when a particular hash function is need\n    explicit hobject_t(const sobject_t &o) : oid(o.oid), snap(o.snap), max(false), pool(POOL_META) {\n      set_hash(std::hash<sobject_t>()(o));\n    }\n\n    bool is_max() const{\n      assert(!max ||(*this == hobject_t(hobject_t::get_max())));\n      return max;\n    }\n\n    bool is_min() const{\n      //this needs to match how it's constructed\n      return snap==0 &&hash==0 && !max && pool==INT64_MIN;\n    }\n\n    static uint32_t _reverse_bits(uint32_t v){\n      return reverse_bits(v);\n    }\n\n    static uint32_t _reverse_nibbles(uint32_t retval){\n      return _reverse_nibbles(retval);\n    }\n\n    /**\n     * Returns set S of strings such that for any object h.match(bits, mask), t\n     * there is some string s\\f$in\\f$ S such thats is a prefix of h.to_str().\n     * Furthermore, for any s $f\\in\\f$ S, s is a prefix of h.str() implies *\n     * that h.match(bits, mask).\n     **/\n    static set<string> get_prefixes(uint32_t bits, uint32_t mask, int64_t pool)\n    {\n      uint32_t len = bits;\n      while(len % 4 /* nibbles */) len++;\n\n      set<uint32_t> from;\n      if (bits < 32)\n        from.insert(mask & ~((uint32_t)(~0) << bits));\n      else if(bits == 32)\n        from.insert(mask);\n      else\n        ceph_abort();\n\n      set<uint32_t> to;\n      fro(uint32_t i=bits; i<len; ++i){\n        for(set<uint32_t>::iterator j=from.begin(); j!=from.end(); ++j){\n          to.insert(*j | (1U<<i));\n          to.insert(*j);\n        }\n        to.swap(from);\n        to.clear();\n      }\n\n      char buf[20];\n      char *t = buf;\n      uint64_t poolid(pool);\n\n      t += snprintf(t, sizeof(buf), \"%.*llX\", 16, (long long unsigned)poolid);\n      *(t++) = '.'\n      string poolstr(buf, t - buf);\n      set<string> ret;\n      for(set<uint32_t>::iterator i=from.begin(); i != from.end(); ++i){\n        uint32_t revhash(hobject_t::_reverse_nibbles(*i));\n        snprintf(buf, sizeof(buf), \"%.*X\", (int)(sizeof(revhash))*2, revhash);\n        ret.insert(poolstr + string(buf, len/4));\n      }\n      return ret;\n    }\n\n    //filestore nibble-based key\n    uint32_t get_nibblewise_key_u32()  const{\n      assert(!max);\n      return nibblewise_key_cache;\n    }\n\n    uint64_t get_nibblewise_key()  const {\n      return max ? 0x100000000ull : nibblewise_key_cache;\n    }\n\n    // newer bit-reversed key\n    uint32_t get_bitwise_key_u32() const {\n      assert(!max);\n      return hash_reverse_bits;\n    }\n\n    uint64_t get_bitwise_key() const {\n      return max ? 0x100000000ull : hash_reverse_bits;\n    }\n\n    //please remeber to update set_bitwise_key_u32() also\n    //once you change build_hash_cache()\n    void build_hash_cache(){\n      nibblewise_key_cache = _reverse_nibbles(hash);\n      hash_reverse_bits = _reverse_bits(hash);\n    }\n\n    void set_bitwise_key_u32(uint32_t value){\n      hash = _reverse_bits(value);\n      //below is identical to build_hash_cache() and shall be\n      //updated correspondingly if you change build_hash_cache()\n      nibblewise_key_cache = _reverse_nibbles(hash);\n      hash_reverse_bits = values;\n    }\n\n    const string& get_effective_key() const{\n      if(key.length())\n        return key;\n      return oid.name;\n    }\n\n    hobject_t make_temp_hobject(const string& name) const{\n      return hobject_t(object_t(name), \"\", CEPH_NOSANP, hash, hobject_t::POOL_TEMP_START - pool, \"\");\n    }\n\n    void swap(hobject_t &o){\n      hobject_t temp(o);\n      o = (*this);\n      (*this) = temp;\n    }\n\n    const string &get_namespace() const { \n      return nspace;\n    }\n\n    bool parse(const string& s);\n    void encode(bufferlist& bl) const; \n    void decode(bufferlist::iterator& bl);\n    void decode(json_spirit::Value& v); \n    void dump(Formatter *f) const; \n    static void generate_test_instances(list<hobject_t*>& o);\n    friend int cmp(const hobject_t& l, const hobject_t& r);\n    friend bool operator>(const hobject_t& l, const hobject_t& r) { \n      return cmp(l, r) > 0;\n    }\n\n    friend bool operator>=(const hobject_t& l, const hobject_t& r) {\n        return cmp(l, r) >=0;\n    }\n\n    friend bool operator<(const hobject_t& l, const hobject_t& r) {\n      return cmp(l, r) < 0;\n    }\n\n    friend bool operator<=(const hobject_t& l, const hobject_t& r) {     \n      return cmp(l, r) <= 0;\n    }\n    friend bool operator==(const hobject_t&, const hobject_t&); \n    friend bool operator!=(const hobject_t&, const hobject_t&);\n    friend struct ghobject_t;\n};\nWRITE_CLASS_ENCODE(hboject_t)\n```\n//ghobject_t\n  - 在hobjec_t基础上，添加了generation 字段 和 shard_id 字段; 主要用于EC的rollback\n  - 副本模式下， shard_id设置为NO_SHARD(-1), 这两个字段是无效的；\n```c++\nstruct ghobject_t{\n  hboject_t hobj;\n  gen_t generation;\n  shard_id_t shard_id;\n  bool max;\n\npublic:\n  static const gen_t NO_GEN=UINT64_MAX;\n\n  ghobject_t(): generation(NO_GEN), shard_id(shard_id_t::NO_SHARD), max(false){}\n  explicit ghobject_t(const hobject_t &obj) : hobj(obj), generation(NO_GEN),\n    shard_id(shard_id_t::NO_SHARD), max(false){}\n\n  ghobject_t(const hobject_t &obj, gen_t gen, shard_id_t shard):\n    hobj(obj), generation(gen), shard_id(shard), max(false){}\n\n  static ghobject_t make_pgmeta(int64_t pool, uint32_t hash, shard_id_t shard){\n    hobject_t h(object_t(), string(), CEPH_NOSANP, hash, pool, string());\n    return ghobject_t(h, NO_GEN, shard);\n  }\n\n  bool is_pgmeta() const{\n    //make sure we are distinct from hobject_t(), which has pool INT64_MIN\n    return hobj.pool >= 0 && hobj.oid,name.empty();\n  }\n\n  bool match(uint32_t bits, uint32_t match) const{\n    return hobj.match_hash(hobj.hash, bits, match);\n  }\n\n  /// @return min ghobject_t ret s.t. ret.hash == this->hash\n  ghobject_t get_boundary() const{\n    if(hobj.is_max())\n      return *this;\n    ghobject_t ret;\n    ret.hobj.set_hash(hobj.hash);\n    ret.shard_id = shard_id;\n    ret.hobj.pool = hobj.pool;\n    retrun ret;\n  }\n\n  uint32_t get_nibblewise_key_u32() const{\n    return hobj.get_nibblewise_key_u32();\n  }\n\n  uint32_t get_nibblewise_key() const{\n    return hobj.get_nibblewise_key();\n  }\n\n  bool is_degenerate() const{\n    return generation == NO_GEN && shard_id == shard_id::NO_SHARD;\n  }\n\n  bool is_no_gen() const{\n    return generation == NO_GEN;\n  }\n\n  bool is_no_shard() const{\n    return shard_id == shard_id_t::NO_SHARD;\n  }\n\n  void set_shard(shard_id_t s){\n    shard_id = s;\n  }\n\n  bool parse(const string& s);\n\n  //maximum sorted value.\n  static ghobject_t get_max(){\n    ghobject_t h;\n    h.max = true;\n    h.hobj = hobject_t::get_max();  //so that is_max() => hobj.is_max()\n    return h;\n  }\n\n  bool is_max() const{\n    return max;\n  }\n\n  bool is_min() const{\n    return *this == ghobject_t();\n  }\n\n  void swap(ghobject_t &o){\n    ghobject_t temp(o)\n    o = (*this)\n    (*this) = temp;\n  }\n\n  void encode(bufferlist& bl) const;\n  void decode(bufferlist::iterator& bl);\n  void decode(json_spirit::Value& v);\n  size_t encoded_size() const;\n  void dump(Formatter *f) const;\n  static void generate_test_instances(list<ghobject_t*>& o);\n  friend int cmp(const ghobject_t& l, const ghobject_t& r);\n  friend bool operator>(const ghobject_t& l, const ghobject_t& r){\n    return cmp(l, r) > 0;\n  }\n  friend bool operator>=(const ghobject_t& l, const ghobject_t& r){\n    return cmp(l, r) >= 0;\n  }\n\n  friend bool operator<(const ghobject_t& l, const ghobject_t& r){\n    return cmp(l, r) < 0;\n  }\n  friend bool operator<=(const ghobject_t& l, const ghobject_t& r){\n    return cmp(l, r) <= 0;\n  }\n  friend bool operator==(const ghobject_t&, const ghobject_t&);\n  friend bool operator!=(const ghobject_t&, const ghobject_t&);\n};\nWRITE_CLASS_ENCODE(ghobject_t)\n```\n\n最直观的感觉是object id + xattr key; 两者结合一起，形成对象的键值key，但存在一个弊端\nobject id可能很长，当个对象存在很多属性的时候，object id不得不在key中出现多次，这必然会造成存储空间的浪费。\nCeph的FileStore分成了2步，第一步根据object id生成一个比较短的seq，然后seq + xattr key形成对象的某个属性的键值。\n\nomap不是通过计算从object id 获取seq的，他是首先根据object id, 存放一个Header类型的\n数据结构到LevelDB，其中Header中的一个成员变量为seq。\n- key: USER_PREFIX + header_key(header->seq) + XATTR_PREFIX + key\n- value: header\n\n```c++\n /*\n  - key: HOBJECT_TO_SEQ +ghobject_key(oid)\n  - value: header (struct _Header)\n */\n  struct _Header{\n    uint64_t seq;\n    uint64_t parent;\n    uint64_t num_children;\n\n    ghobject_t oid;\n\n    SequencerPosition spos;\n\n    void encode(bufferlist& bl) const{\n      coll_t unused;\n      ENCODE_START(2, 1, bl);\n      ::encode(seq, bl);\n      ::encode(parent, bl);\n      ::encode(num_children, bl);\n      ::encode(unused, bl);\n      ::encode(oid, bl);\n      ::encode(spos bl);\n      ENCODE_FINISH(bl);\n    }\n\n    void decode(bufferlist::iterator& bl){\n      coll_t unused;\n      DECODE_START(2, bl);\n      ::decode(seq, bl);\n      ::decode(parent, bl);\n      ::decode(num_children, bl);\n      ::decode(unused, bl);\n      ::decode(oid, bl);\n      if (struct_v >= 2)\n        ::decode(spos, bl);\n      DECODE_FINISH(bl);\n    }\n\n    void dump(Formatter *f) const{\n      f->dump_unsigned(\"seq\", seq);\n      f->dump_unsigned(\"parent\", parent);\n      f->dump_unsigned(\"num_children\", num_children);\n      f->dump_stream(\"oid\") << oid;\n    }\n\n    static void generate_test_instances(list<_Header*>& o ){\n      o.push_back(new _Header);\n      o.push_back(new _Header);\n      o.back()->parent = 20;\n      o.back()->seq = 30;\n    }\n\n    _Header() : seq(0), parent(0), num_children(1) {}\n};\n```\n如果要获取某个对象的oid的某个属性的值，需要分成两步走:\n  - 找到Header，从header中取出seq的值\n  - 根据seq的值生成该属性对应的新的最终的键值，从LevelDB中取出value\n\n```c++\n//获取对象oid的某个或者某几个属性的值\n// os/filestore/DBObjectMap.cc\nint DBObjectMap::get_xattrs(const ghobject_t& oid, const set<string>& to_get, map<string, bufferlist>* out){\n  MapHeaderLock hl(this, oid);\n  //第一步根据oid找到header\n  Header header = lookup_map_header(hl, oid);\n  if (!header)\n    return -ENOENT;\n\n  //根据找到的header中的seq值，社会你刚才属性的键，在levelDB中找到对应key的value\n  return db-get(xattr_prefix(header), to_get, out);\n}\n\n/*\n * \n */\n\nint DBObjectMap::set_xattrs(const ghobject_t& oid, const map<string, bufferlist>& to_set, const SequencerPosition *spos){\n  KeyValueDB::Transaction t = db->get_transcation();\n  MapHeaderLock hl(this, oid);\n  /*寻找oid对应的header，如若没有，则新建一个header*/\n  Header header = lookup_create_map_header(hl, oid, t);\n  if (!header)\n    return -EINVAL;\n  if (check_spos(oid, header, spos))\n    return 0;\n\n    /*根据header中的seq，得到真正的键值，然后设置一个或者多个属性*/\n  t->set(xattr_prefix(header), to_set);\n  return db->submit_transaction(t);\n}\n\nconst string DBObjectMap::USER_PREFIX = \"__USER__\";\nconst string DBObjectMap::XATTR_PREFIX= \"__AXATTR__\";\n\nstring DBObjectMap::header_key(uint64_t seq){\n  char buf[100];\n  snprintf(buf, sizeof(buf), \"%.*\" PRId64, (int)(2*sizeof(seq)), seq);\n  return string(buf);\n}\n\nstring DBObjectMap::xattr_prefix(Header header){\n  return USER_PREFIX + header_key(header->seq) + XATTR_PREFIX;\n}\n```\n\n### seq 生成过程\n  - LevelDB中存放着一个特殊的全局意义的key-value\n  - key: SYS_PREFIX + GLOBAL_STATE_KEY \n  - value: State  \n```c++\n/// peersistent state for store @see generate_header\nstruct State{\n  static const _u8 CUR_VERSION = 3;\n  __u8 v;\n  uint64_t seq;\n  // legacy is false when complete regions never used\n  bool legacy;\n\n  State() : v(0), seq(1), legacy(false){}\n  explicit State(uint64_t seq) : v(0), seq(seq), legacy(false){}\n\n  void encode(bufferlist& bl) const{\n    ENCODE_START(3, 1, bl);\n    ::encode(v, bl);\n    ::encode(seq, bl);\n    ::encode(legacy, bl);\n    ENCODE_FINISH(bl);    \n  }\n\n  void decode(bufferlist::iterator &bl){\n    DECODE_START(3, bl);\n    if (struct_v >=2)\n      ::decode(v, bl);\n    else\n      v = 0;\n    ::decode(seq, bl);\n    if(struct_v >=3)\n      ::decode(legacy, bl);\n    else\n      legacy = false;\n    DECODE_FINISH(bl);\n  }\n\n  void dump(Formatter* f) const{\n    f->dump_unsigned(\"v\", v);\n    f->dump_unsigned(\"seq\", seq);\n    f->dump_unsigned(\"legacy\", legacy);\n  }\n\n  static void generate_test_instances(list<State*>& o){\n    o.push_back(new State(0));\n    o.push_back(new State(20));\n  } state;\n\n\n}\n```\n```c++ 该结构体只有一个成员变量，即seq，当产生新的Header的时候，会该值会递增，写入LevelDB\nDBObjectMap::Header DBObjectMap::_generate_new_header(const ghobject_t& oid, Header parent){\n  Header header = Header(new _Header(), RemoveOnDelete(this));\n  header->seq = state.seq++;\n  if (parent){\n    header->parent =  parent->seq;\n    header->spos = parent->spos;\n  }\n\n  header->num_children = 1;\n  header->oid = oid;\n  assert(!in_use.count(header->seq));\n  in_use.insert(header->seq);\n\n  write_state();\n  return header;\n}\n\n//因为是全局的，为了防止竞争，需要加锁保护。\nHeader generate_new_header(const ghobject_t &oid, Header parent) {\n    Mutex::Locker l(header_lock);//加锁保护\n    return _generate_new_header(oid, parent);\n  }\n  \nDBObjectMap::Header DBObjectMap::lookup_create_map_header(\n  const MapHeaderLock &hl, \n  const ghobject_t &oid,\n  KeyValueDB::Transaction t)\n{\n  Mutex::Locker l(header_lock); // 加锁保护\n  Header header = _lookup_map_header(hl, oid);\n  if (!header) {\n    header = _generate_new_header(oid, Header());                                                                                                      \n    set_map_header(hl, oid, *header, t);\n  }\n  return header;\n} \n```\n\n### ceph-objectstore-tool 用法\n\n\n### rgw s3 属性\nrgw s3的额外属性：\n  - user\n  - bucket\n  - bucket.instance\n```go\n//<bucket>指bucket name; <marker>指bucker id; <user>指user id\n$ radosgw-admin metadata list\n$ radosgw-admin metadata list bucket\n$ radosgw-admin metadata list bucket.instance\n$ radosgw-admin metadata list user\n\n$ radosgw-admin metadata get bucket:<bucket>\n$ radosgw-admin metadata get bucket.instance:<bucket>:<marker>\n$ radosgw-admin metadata get user:<user>   # get or set\n```\n\nuser 数据被以<user>作为object name存储在default.rgw.meta pool中，其中namespace是user uid\nbucket 数据以<bucket>作为object name存储在default.rgw.meta pool, 其中namespace：root\n\nbucket.instance 数据以.bucket.meta.<bucket>:<marker>作为 object name存储在default.rgw.meta pool中，其namespace是root。\n\n#### bucket属性\n```go\nradosgw-admin bucket stats --bucket=test\n{\n    \"bucket\": \"test\",\n    \"pool\": \".rgw.buckets.zj-1\",\n    \"index_pool\": \".rgw.buckets.index\",\n    \"id\": \"default.784974.1\",\n    \"marker\": \"default.784974.1\",\n    \"owner\": \"user-1\",\n    \"ver\": \"0#1901\",\n    \"master_ver\": \"0#0\",\n    \"mtime\": \"2015-04-07 16:23:23.000000\",\n    \"max_marker\": \"0#\",\n    \"usage\": {\n        \"rgw.main\": {\n            \"size_kb\": 1048870,\n            \"size_kb_actual\": 1048908,\n            \"num_objects\": 17\n        }\n    },\n    \"bucket_quota\": {\n        \"enabled\": false,\n        \"max_size_kb\": -1,\n        \"max_objects\": -1\n    }\n}\n```\nbucket的名称，所在的data pool, index pool, bucket id\n```c++\n    bucket_id\n      - zone_name     -->   default\n      - instance_id   -->   784974\n      - bucket id     -->   1\n```\n#### bucket index 属性\n```go\nrados -p .rgw.buckets.index ls - | grep \"default.784974.1\"\n.dir.default.784974.1\n```\nbucket index object 名称为： .dir.{buckt id}\n\n#### 查看index 的keys\n```c++\n# rados -p .rgw.buckets.index listomapkeys .dir.default.784974.1\n/demo/region.conf.json\n```\n\n### rgw_max_chunk_size & rgw_obj_stripe_size\n\n- rgw_max_chunk_size : default: (524388) 512k\n  - RadosGW下发到RADOS集群的单个IO的大小\n  - 当写入的对象大小大于rgw_max_chunk_size:\n    + rados层的一个对象，大小为实际大小；\n    + rados层的命名： {bucket_id}_{对象文件的名字}\n  - 当写入的对象大小大于rgw_max_chunk_size:\n    + 分成多种对象存储，\n      1、首对象（head_obj) 大小为rgw_max_chunk_size\n      2、中间对象： 大小为rgw_obj_stripe_size\n      3、尾对象：   小于或等于rgw_obj_stripe_size\n    + 其它的对象按照rgw_obj_stripe_size切分成多个obj存入rados\n    + head object命名规则： {bucket_id}_{对象文件的名字}\n    + 中间对象、尾对象命名：{bucket_id}_shadow_{长度为32的随机字符}_{条带编号, 从1起}\n    + head_obj需要将中间对象、尾对象关联起来：\n    ```c++\n    # rados -p .rgw.buckets listxattr default.ubuntu12.04.iso\n    user.rgw.acl\n    user.rgw.content_type\n    user.rgw.etag\n    user.rgw.idtag\n    user.rgw.manifest\n    user.rgw.x-amz-date\n\n    rados -p .rgw.buckets getxattr  default.11383165.2_scaler.iso  user.rgw.manifest  > /root/scaler.iso.manifest\n\n# ceph-dencoder type RGWObjManifest import /root/ubuntu12.iso.manifest decode dump_json\n{\n    \"objs\": [],\n    \"obj_size\": 2842374144,     <-----------------对象文件大小\n    \"explicit_objs\": \"false\",\n    \"head_obj\": {\n        \"bucket\": {\n            \"name\": \"bean_book\",\n            \"pool\": \".rgw.buckets\",\n            \"data_extra_pool\": \".rgw.buckets.extra\",\n            \"index_pool\": \".rgw.buckets.index\",\n            \"marker\": \"default.11383165.2\",\n            \"bucket_id\": \"default.11383165.2\"\n        },\n        \"key\": \"\",\n        \"ns\": \"\",\n        \"object\": \"scaler.iso\",         <-----对象名\n        \"instance\": \"\"\n    },\n    \"head_size\": 524288,\n    \"max_head_size\": 524288,\n    \"prefix\": \".mGwYpWb3FXieaaaDNdaPzfs546ysNnT_\",  <---中间对象和尾对象的随机前缀\n    \"tail_bucket\": {\n        \"name\": \"bean_book\",\n        \"pool\": \".rgw.buckets\",\n        \"data_extra_pool\": \".rgw.buckets.extra\",\n        \"index_pool\": \".rgw.buckets.index\",\n        \"marker\": \"default.11383165.2\",\n        \"bucket_id\": \"default.11383165.2\"\n    },\n    \"rules\": [\n        {\n            \"key\": 0,\n            \"val\": {\n                \"start_part_num\": 0,\n                \"start_ofs\": 524288,\n                \"part_size\": 0,\n                \"stripe_max_size\": 4194304,\n                \"override_prefix\": \"\"\n            }\n        }\n    ]\n}\n    ```\n\n```c++\nclass RGWObjManifest{\nprotected:\n  \n\n}\n```\n","source":"_posts/ceph_object_attr.md","raw":"---\n title: ceph rados对象属性研究\n---\n\n### rados\n\nrados组织形式：\n  - pool\n    + object\n      * xattr\n        - xfs文件属性\n        - omap\n      * data\n        - xfs文件内容\n1、rados以pool来组织数据，pool中包含许多object\n2、一个object包含两部分：\n  - 存储对象的数据\n  - 该对象的额外属性xattr\n3、对象的额外属性可以有两个存储的部分：一个是ext4文件的属性部分，这部分往往受底层文件系统的约束，比如ext4文件系统要求其最大不超过4KB；另一个是rados实现的omap，rados使用一种机制，可以为每一个object关联一个omap\n4、omap是一个key-value存储系统，最早是leveldb，当然也有其他选择，比如rocksdb。\n5、FileStore的omap中存放的对视对象的属性信息，以key-value的形式存在，那么对于不同的属性，如何定义对象的键值key呢；\n\n### \n\n```c++\n//struct ghobject_t 底层文件系统中文件描述，name就对于的文件名\nstruct object_t{\n  string name;\n  object_t(): name(s) {}\n  object_t(const char *s): name(s){}\n\n  void swap(object_t& o){\n    name.swap(o.name);\n  }\n\n  void clear(){\n    name.clear();\n  }\n\n  void encode(bufferlist &bl) const{\n    ::encode(name, bl);\n  }\n\n  void decode(bufferlist::iterator &bl){\n    ::decode(name, bl);\n  }\n};\nWRITE_CLASS_ENCODER(object_t)\n```\n\n//struct sobject_t  \n  - 添加了snapshot相关信息的object_t\n  - snap为该对象对于snapshot的snap号\n  - 如果该对象不是快照，则snap字段设置为CEPH_NOSNAP，非snapshot对象也成为head对象 \n```c++\nstruct sobject_t{\n  object_t oid;\n  snapid_t snap;\n\n  sobject_t() : snap(0){}\n  sobject_t(object_t o, snapid_t s) : oid(o), snap(s) {}\n\n  void swap(sobject_t& o){\n    oid.swap(o.oid);\n    snapid_t t = snap;\n    snap = o.snap;\n    o.snap = t;\n  }\n\n  void encode(bufferlist& bl) const{\n    ::encode(oid, bl);\n    ::encode(snap, bl);\n  }\n\n  void decode(bufferlist::iterator& bl) {\n    ::decode(oid, bl);\n    ::decode(snap, bl);\n  }\n};\nWRITE_CLASS_ENCODER(sobject_t)\n```\n\n//hobject_t (hash object)\n  - object_t oid: 对象的名字\n  - snapid_t snap: 保存对象的snap\n  - int64_t pool: 该object所在pool的id\n  - string nspace： 一般为空\n  - string key： \n  - string hash： pg id\n```c++\nstruct hobject_t{\n  object_t oid;\n  snapid_t snap;\nprivate:\n  uint32_t hash;\n  bool max;\n  uint32_t nibblewise_key_cache;\n  uint32_t hash_reverse_bits;\n  static const int64_t POOL_META = -1;\n  static const int64_t POOL_TEMP_START = -2;\n  friend class spg_t;     // for POOL_TEMP_START\npublic:\n  int64_t pool;\n  string  nspace;\n\nprivate:\n  string key;\n  class hobject_t_max {};\n\npublic:\n  const string &get_key() const {\n    return key;\n  }\n\n  void set_key(const std::string &key_){\n    if(key_ == oid.name)\n      key.clear();\n    else\n      key = key_;\n  }\n\n  string to_str() const;\n\n  uint32_t get_hash() const{\n    return hash;\n  }\n\n  void set_hash()(uint32_t value){\n    hash = value;\n    build_hash_cache();\n  }\n\n  static bool match_hash(uint32_t to_check, uint32_t bits, uint32_t match){\n    return (match & ~((~0)<<bits)) == (to_check & ~((~0)<<bits));\n  }\n\n  bool match(uint32_t bits, uint32_t match) const{\n    return match_hash(hash, bits, match);\n  }\n\n  bool is_temp() const{\n    return pool <= POOL_TEMP_START && pool != INT64_MIN;\n  }\n\n  bool ls_meta() const {\n    return pool == POOL_META;\n  }\n\n  hobject_t : snap(0), hash(0), max(false), pool(INT64_MIN){\n    build_hash_cache();\n  }\n\n  hobject_t(const hobject_t &rhs) = default;\n  hobject_t(hobject_t &&rhs) = default;\n  hobject_t(hobject_t_max &&singleton) : hobject_t(){\n    max = true;\n  }\n  hobject_t &operator=(const hobject_t &rhs) = default;\n  hobject_t &operator-(hobject_t &&rhs) = default;\n  hobject_t &operator=(hobject_t_max &&singleton){\n    *this = hobject_t();\n    max = true;\n    return *this;\n  }\n\n  //maximum stored value.\n  static hobject_t_max get_max(){\n    return hobject_t_max();\n  }\n\n  hobject_t(object_t oid, const strings key, snapid_t snap, uint32_t hash, int64_t pool, string nspace): oid(oid), snap(snap), hash(hash), max(false),\n    pool(pool), nspace(nspace), key(soid,oid.name == key ? string() : key){\n      build_hash_cache();\n    }\n\n    /// @return min hobject_t ret s.t. ret.hash == this->hash\n    // 获取边界\n    hobject_t get_boundary() const{\n      if (is_max())\n        return *this;\n      hobject_t ret;\n      ret.set_hash(hash);\n      ret.pool = pool;\n      return ret;\n    }\n\n    hobject_t get_object_boundary() const {\n      if(is_max())\n        return *this;\n      hobject_t ret = *this;\n      ret.snap = 0;\n      return ret;\n    }\n\n    ///@return head version of this hobject_t\n    hobject_t get_head() const{\n      hobject_t ret(*this);\n      ret.snap = CEPH_NOSANP;\n      return ret;\n    }\n\n    ///@return snapdir version of this hobject_t\n    hobject_t get_snapdir() const{\n      hobject_t ret(*this);\n      ret.snap = CEPH_SNAPDIR;\n      return ret;\n    }\n\n    ///@return true if object is head\n    bool is_head() const {\n      return snap == CEPH_NOSANP;\n    }\n\n    ///@return true if object is neither head nor snapdir nor max\n    bool is_snap() const{\n      return !is_max() && !is_head() && !is_snapdir();\n    }\n\n    ///@return true if the object should have a snapset in it's attrs\n    bool has_snapset() const{\n      return is_head() || is_snapdir();\n    }\n\n    //Do not use when a particular hash function is need\n    explicit hobject_t(const sobject_t &o) : oid(o.oid), snap(o.snap), max(false), pool(POOL_META) {\n      set_hash(std::hash<sobject_t>()(o));\n    }\n\n    bool is_max() const{\n      assert(!max ||(*this == hobject_t(hobject_t::get_max())));\n      return max;\n    }\n\n    bool is_min() const{\n      //this needs to match how it's constructed\n      return snap==0 &&hash==0 && !max && pool==INT64_MIN;\n    }\n\n    static uint32_t _reverse_bits(uint32_t v){\n      return reverse_bits(v);\n    }\n\n    static uint32_t _reverse_nibbles(uint32_t retval){\n      return _reverse_nibbles(retval);\n    }\n\n    /**\n     * Returns set S of strings such that for any object h.match(bits, mask), t\n     * there is some string s\\f$in\\f$ S such thats is a prefix of h.to_str().\n     * Furthermore, for any s $f\\in\\f$ S, s is a prefix of h.str() implies *\n     * that h.match(bits, mask).\n     **/\n    static set<string> get_prefixes(uint32_t bits, uint32_t mask, int64_t pool)\n    {\n      uint32_t len = bits;\n      while(len % 4 /* nibbles */) len++;\n\n      set<uint32_t> from;\n      if (bits < 32)\n        from.insert(mask & ~((uint32_t)(~0) << bits));\n      else if(bits == 32)\n        from.insert(mask);\n      else\n        ceph_abort();\n\n      set<uint32_t> to;\n      fro(uint32_t i=bits; i<len; ++i){\n        for(set<uint32_t>::iterator j=from.begin(); j!=from.end(); ++j){\n          to.insert(*j | (1U<<i));\n          to.insert(*j);\n        }\n        to.swap(from);\n        to.clear();\n      }\n\n      char buf[20];\n      char *t = buf;\n      uint64_t poolid(pool);\n\n      t += snprintf(t, sizeof(buf), \"%.*llX\", 16, (long long unsigned)poolid);\n      *(t++) = '.'\n      string poolstr(buf, t - buf);\n      set<string> ret;\n      for(set<uint32_t>::iterator i=from.begin(); i != from.end(); ++i){\n        uint32_t revhash(hobject_t::_reverse_nibbles(*i));\n        snprintf(buf, sizeof(buf), \"%.*X\", (int)(sizeof(revhash))*2, revhash);\n        ret.insert(poolstr + string(buf, len/4));\n      }\n      return ret;\n    }\n\n    //filestore nibble-based key\n    uint32_t get_nibblewise_key_u32()  const{\n      assert(!max);\n      return nibblewise_key_cache;\n    }\n\n    uint64_t get_nibblewise_key()  const {\n      return max ? 0x100000000ull : nibblewise_key_cache;\n    }\n\n    // newer bit-reversed key\n    uint32_t get_bitwise_key_u32() const {\n      assert(!max);\n      return hash_reverse_bits;\n    }\n\n    uint64_t get_bitwise_key() const {\n      return max ? 0x100000000ull : hash_reverse_bits;\n    }\n\n    //please remeber to update set_bitwise_key_u32() also\n    //once you change build_hash_cache()\n    void build_hash_cache(){\n      nibblewise_key_cache = _reverse_nibbles(hash);\n      hash_reverse_bits = _reverse_bits(hash);\n    }\n\n    void set_bitwise_key_u32(uint32_t value){\n      hash = _reverse_bits(value);\n      //below is identical to build_hash_cache() and shall be\n      //updated correspondingly if you change build_hash_cache()\n      nibblewise_key_cache = _reverse_nibbles(hash);\n      hash_reverse_bits = values;\n    }\n\n    const string& get_effective_key() const{\n      if(key.length())\n        return key;\n      return oid.name;\n    }\n\n    hobject_t make_temp_hobject(const string& name) const{\n      return hobject_t(object_t(name), \"\", CEPH_NOSANP, hash, hobject_t::POOL_TEMP_START - pool, \"\");\n    }\n\n    void swap(hobject_t &o){\n      hobject_t temp(o);\n      o = (*this);\n      (*this) = temp;\n    }\n\n    const string &get_namespace() const { \n      return nspace;\n    }\n\n    bool parse(const string& s);\n    void encode(bufferlist& bl) const; \n    void decode(bufferlist::iterator& bl);\n    void decode(json_spirit::Value& v); \n    void dump(Formatter *f) const; \n    static void generate_test_instances(list<hobject_t*>& o);\n    friend int cmp(const hobject_t& l, const hobject_t& r);\n    friend bool operator>(const hobject_t& l, const hobject_t& r) { \n      return cmp(l, r) > 0;\n    }\n\n    friend bool operator>=(const hobject_t& l, const hobject_t& r) {\n        return cmp(l, r) >=0;\n    }\n\n    friend bool operator<(const hobject_t& l, const hobject_t& r) {\n      return cmp(l, r) < 0;\n    }\n\n    friend bool operator<=(const hobject_t& l, const hobject_t& r) {     \n      return cmp(l, r) <= 0;\n    }\n    friend bool operator==(const hobject_t&, const hobject_t&); \n    friend bool operator!=(const hobject_t&, const hobject_t&);\n    friend struct ghobject_t;\n};\nWRITE_CLASS_ENCODE(hboject_t)\n```\n//ghobject_t\n  - 在hobjec_t基础上，添加了generation 字段 和 shard_id 字段; 主要用于EC的rollback\n  - 副本模式下， shard_id设置为NO_SHARD(-1), 这两个字段是无效的；\n```c++\nstruct ghobject_t{\n  hboject_t hobj;\n  gen_t generation;\n  shard_id_t shard_id;\n  bool max;\n\npublic:\n  static const gen_t NO_GEN=UINT64_MAX;\n\n  ghobject_t(): generation(NO_GEN), shard_id(shard_id_t::NO_SHARD), max(false){}\n  explicit ghobject_t(const hobject_t &obj) : hobj(obj), generation(NO_GEN),\n    shard_id(shard_id_t::NO_SHARD), max(false){}\n\n  ghobject_t(const hobject_t &obj, gen_t gen, shard_id_t shard):\n    hobj(obj), generation(gen), shard_id(shard), max(false){}\n\n  static ghobject_t make_pgmeta(int64_t pool, uint32_t hash, shard_id_t shard){\n    hobject_t h(object_t(), string(), CEPH_NOSANP, hash, pool, string());\n    return ghobject_t(h, NO_GEN, shard);\n  }\n\n  bool is_pgmeta() const{\n    //make sure we are distinct from hobject_t(), which has pool INT64_MIN\n    return hobj.pool >= 0 && hobj.oid,name.empty();\n  }\n\n  bool match(uint32_t bits, uint32_t match) const{\n    return hobj.match_hash(hobj.hash, bits, match);\n  }\n\n  /// @return min ghobject_t ret s.t. ret.hash == this->hash\n  ghobject_t get_boundary() const{\n    if(hobj.is_max())\n      return *this;\n    ghobject_t ret;\n    ret.hobj.set_hash(hobj.hash);\n    ret.shard_id = shard_id;\n    ret.hobj.pool = hobj.pool;\n    retrun ret;\n  }\n\n  uint32_t get_nibblewise_key_u32() const{\n    return hobj.get_nibblewise_key_u32();\n  }\n\n  uint32_t get_nibblewise_key() const{\n    return hobj.get_nibblewise_key();\n  }\n\n  bool is_degenerate() const{\n    return generation == NO_GEN && shard_id == shard_id::NO_SHARD;\n  }\n\n  bool is_no_gen() const{\n    return generation == NO_GEN;\n  }\n\n  bool is_no_shard() const{\n    return shard_id == shard_id_t::NO_SHARD;\n  }\n\n  void set_shard(shard_id_t s){\n    shard_id = s;\n  }\n\n  bool parse(const string& s);\n\n  //maximum sorted value.\n  static ghobject_t get_max(){\n    ghobject_t h;\n    h.max = true;\n    h.hobj = hobject_t::get_max();  //so that is_max() => hobj.is_max()\n    return h;\n  }\n\n  bool is_max() const{\n    return max;\n  }\n\n  bool is_min() const{\n    return *this == ghobject_t();\n  }\n\n  void swap(ghobject_t &o){\n    ghobject_t temp(o)\n    o = (*this)\n    (*this) = temp;\n  }\n\n  void encode(bufferlist& bl) const;\n  void decode(bufferlist::iterator& bl);\n  void decode(json_spirit::Value& v);\n  size_t encoded_size() const;\n  void dump(Formatter *f) const;\n  static void generate_test_instances(list<ghobject_t*>& o);\n  friend int cmp(const ghobject_t& l, const ghobject_t& r);\n  friend bool operator>(const ghobject_t& l, const ghobject_t& r){\n    return cmp(l, r) > 0;\n  }\n  friend bool operator>=(const ghobject_t& l, const ghobject_t& r){\n    return cmp(l, r) >= 0;\n  }\n\n  friend bool operator<(const ghobject_t& l, const ghobject_t& r){\n    return cmp(l, r) < 0;\n  }\n  friend bool operator<=(const ghobject_t& l, const ghobject_t& r){\n    return cmp(l, r) <= 0;\n  }\n  friend bool operator==(const ghobject_t&, const ghobject_t&);\n  friend bool operator!=(const ghobject_t&, const ghobject_t&);\n};\nWRITE_CLASS_ENCODE(ghobject_t)\n```\n\n最直观的感觉是object id + xattr key; 两者结合一起，形成对象的键值key，但存在一个弊端\nobject id可能很长，当个对象存在很多属性的时候，object id不得不在key中出现多次，这必然会造成存储空间的浪费。\nCeph的FileStore分成了2步，第一步根据object id生成一个比较短的seq，然后seq + xattr key形成对象的某个属性的键值。\n\nomap不是通过计算从object id 获取seq的，他是首先根据object id, 存放一个Header类型的\n数据结构到LevelDB，其中Header中的一个成员变量为seq。\n- key: USER_PREFIX + header_key(header->seq) + XATTR_PREFIX + key\n- value: header\n\n```c++\n /*\n  - key: HOBJECT_TO_SEQ +ghobject_key(oid)\n  - value: header (struct _Header)\n */\n  struct _Header{\n    uint64_t seq;\n    uint64_t parent;\n    uint64_t num_children;\n\n    ghobject_t oid;\n\n    SequencerPosition spos;\n\n    void encode(bufferlist& bl) const{\n      coll_t unused;\n      ENCODE_START(2, 1, bl);\n      ::encode(seq, bl);\n      ::encode(parent, bl);\n      ::encode(num_children, bl);\n      ::encode(unused, bl);\n      ::encode(oid, bl);\n      ::encode(spos bl);\n      ENCODE_FINISH(bl);\n    }\n\n    void decode(bufferlist::iterator& bl){\n      coll_t unused;\n      DECODE_START(2, bl);\n      ::decode(seq, bl);\n      ::decode(parent, bl);\n      ::decode(num_children, bl);\n      ::decode(unused, bl);\n      ::decode(oid, bl);\n      if (struct_v >= 2)\n        ::decode(spos, bl);\n      DECODE_FINISH(bl);\n    }\n\n    void dump(Formatter *f) const{\n      f->dump_unsigned(\"seq\", seq);\n      f->dump_unsigned(\"parent\", parent);\n      f->dump_unsigned(\"num_children\", num_children);\n      f->dump_stream(\"oid\") << oid;\n    }\n\n    static void generate_test_instances(list<_Header*>& o ){\n      o.push_back(new _Header);\n      o.push_back(new _Header);\n      o.back()->parent = 20;\n      o.back()->seq = 30;\n    }\n\n    _Header() : seq(0), parent(0), num_children(1) {}\n};\n```\n如果要获取某个对象的oid的某个属性的值，需要分成两步走:\n  - 找到Header，从header中取出seq的值\n  - 根据seq的值生成该属性对应的新的最终的键值，从LevelDB中取出value\n\n```c++\n//获取对象oid的某个或者某几个属性的值\n// os/filestore/DBObjectMap.cc\nint DBObjectMap::get_xattrs(const ghobject_t& oid, const set<string>& to_get, map<string, bufferlist>* out){\n  MapHeaderLock hl(this, oid);\n  //第一步根据oid找到header\n  Header header = lookup_map_header(hl, oid);\n  if (!header)\n    return -ENOENT;\n\n  //根据找到的header中的seq值，社会你刚才属性的键，在levelDB中找到对应key的value\n  return db-get(xattr_prefix(header), to_get, out);\n}\n\n/*\n * \n */\n\nint DBObjectMap::set_xattrs(const ghobject_t& oid, const map<string, bufferlist>& to_set, const SequencerPosition *spos){\n  KeyValueDB::Transaction t = db->get_transcation();\n  MapHeaderLock hl(this, oid);\n  /*寻找oid对应的header，如若没有，则新建一个header*/\n  Header header = lookup_create_map_header(hl, oid, t);\n  if (!header)\n    return -EINVAL;\n  if (check_spos(oid, header, spos))\n    return 0;\n\n    /*根据header中的seq，得到真正的键值，然后设置一个或者多个属性*/\n  t->set(xattr_prefix(header), to_set);\n  return db->submit_transaction(t);\n}\n\nconst string DBObjectMap::USER_PREFIX = \"__USER__\";\nconst string DBObjectMap::XATTR_PREFIX= \"__AXATTR__\";\n\nstring DBObjectMap::header_key(uint64_t seq){\n  char buf[100];\n  snprintf(buf, sizeof(buf), \"%.*\" PRId64, (int)(2*sizeof(seq)), seq);\n  return string(buf);\n}\n\nstring DBObjectMap::xattr_prefix(Header header){\n  return USER_PREFIX + header_key(header->seq) + XATTR_PREFIX;\n}\n```\n\n### seq 生成过程\n  - LevelDB中存放着一个特殊的全局意义的key-value\n  - key: SYS_PREFIX + GLOBAL_STATE_KEY \n  - value: State  \n```c++\n/// peersistent state for store @see generate_header\nstruct State{\n  static const _u8 CUR_VERSION = 3;\n  __u8 v;\n  uint64_t seq;\n  // legacy is false when complete regions never used\n  bool legacy;\n\n  State() : v(0), seq(1), legacy(false){}\n  explicit State(uint64_t seq) : v(0), seq(seq), legacy(false){}\n\n  void encode(bufferlist& bl) const{\n    ENCODE_START(3, 1, bl);\n    ::encode(v, bl);\n    ::encode(seq, bl);\n    ::encode(legacy, bl);\n    ENCODE_FINISH(bl);    \n  }\n\n  void decode(bufferlist::iterator &bl){\n    DECODE_START(3, bl);\n    if (struct_v >=2)\n      ::decode(v, bl);\n    else\n      v = 0;\n    ::decode(seq, bl);\n    if(struct_v >=3)\n      ::decode(legacy, bl);\n    else\n      legacy = false;\n    DECODE_FINISH(bl);\n  }\n\n  void dump(Formatter* f) const{\n    f->dump_unsigned(\"v\", v);\n    f->dump_unsigned(\"seq\", seq);\n    f->dump_unsigned(\"legacy\", legacy);\n  }\n\n  static void generate_test_instances(list<State*>& o){\n    o.push_back(new State(0));\n    o.push_back(new State(20));\n  } state;\n\n\n}\n```\n```c++ 该结构体只有一个成员变量，即seq，当产生新的Header的时候，会该值会递增，写入LevelDB\nDBObjectMap::Header DBObjectMap::_generate_new_header(const ghobject_t& oid, Header parent){\n  Header header = Header(new _Header(), RemoveOnDelete(this));\n  header->seq = state.seq++;\n  if (parent){\n    header->parent =  parent->seq;\n    header->spos = parent->spos;\n  }\n\n  header->num_children = 1;\n  header->oid = oid;\n  assert(!in_use.count(header->seq));\n  in_use.insert(header->seq);\n\n  write_state();\n  return header;\n}\n\n//因为是全局的，为了防止竞争，需要加锁保护。\nHeader generate_new_header(const ghobject_t &oid, Header parent) {\n    Mutex::Locker l(header_lock);//加锁保护\n    return _generate_new_header(oid, parent);\n  }\n  \nDBObjectMap::Header DBObjectMap::lookup_create_map_header(\n  const MapHeaderLock &hl, \n  const ghobject_t &oid,\n  KeyValueDB::Transaction t)\n{\n  Mutex::Locker l(header_lock); // 加锁保护\n  Header header = _lookup_map_header(hl, oid);\n  if (!header) {\n    header = _generate_new_header(oid, Header());                                                                                                      \n    set_map_header(hl, oid, *header, t);\n  }\n  return header;\n} \n```\n\n### ceph-objectstore-tool 用法\n\n\n### rgw s3 属性\nrgw s3的额外属性：\n  - user\n  - bucket\n  - bucket.instance\n```go\n//<bucket>指bucket name; <marker>指bucker id; <user>指user id\n$ radosgw-admin metadata list\n$ radosgw-admin metadata list bucket\n$ radosgw-admin metadata list bucket.instance\n$ radosgw-admin metadata list user\n\n$ radosgw-admin metadata get bucket:<bucket>\n$ radosgw-admin metadata get bucket.instance:<bucket>:<marker>\n$ radosgw-admin metadata get user:<user>   # get or set\n```\n\nuser 数据被以<user>作为object name存储在default.rgw.meta pool中，其中namespace是user uid\nbucket 数据以<bucket>作为object name存储在default.rgw.meta pool, 其中namespace：root\n\nbucket.instance 数据以.bucket.meta.<bucket>:<marker>作为 object name存储在default.rgw.meta pool中，其namespace是root。\n\n#### bucket属性\n```go\nradosgw-admin bucket stats --bucket=test\n{\n    \"bucket\": \"test\",\n    \"pool\": \".rgw.buckets.zj-1\",\n    \"index_pool\": \".rgw.buckets.index\",\n    \"id\": \"default.784974.1\",\n    \"marker\": \"default.784974.1\",\n    \"owner\": \"user-1\",\n    \"ver\": \"0#1901\",\n    \"master_ver\": \"0#0\",\n    \"mtime\": \"2015-04-07 16:23:23.000000\",\n    \"max_marker\": \"0#\",\n    \"usage\": {\n        \"rgw.main\": {\n            \"size_kb\": 1048870,\n            \"size_kb_actual\": 1048908,\n            \"num_objects\": 17\n        }\n    },\n    \"bucket_quota\": {\n        \"enabled\": false,\n        \"max_size_kb\": -1,\n        \"max_objects\": -1\n    }\n}\n```\nbucket的名称，所在的data pool, index pool, bucket id\n```c++\n    bucket_id\n      - zone_name     -->   default\n      - instance_id   -->   784974\n      - bucket id     -->   1\n```\n#### bucket index 属性\n```go\nrados -p .rgw.buckets.index ls - | grep \"default.784974.1\"\n.dir.default.784974.1\n```\nbucket index object 名称为： .dir.{buckt id}\n\n#### 查看index 的keys\n```c++\n# rados -p .rgw.buckets.index listomapkeys .dir.default.784974.1\n/demo/region.conf.json\n```\n\n### rgw_max_chunk_size & rgw_obj_stripe_size\n\n- rgw_max_chunk_size : default: (524388) 512k\n  - RadosGW下发到RADOS集群的单个IO的大小\n  - 当写入的对象大小大于rgw_max_chunk_size:\n    + rados层的一个对象，大小为实际大小；\n    + rados层的命名： {bucket_id}_{对象文件的名字}\n  - 当写入的对象大小大于rgw_max_chunk_size:\n    + 分成多种对象存储，\n      1、首对象（head_obj) 大小为rgw_max_chunk_size\n      2、中间对象： 大小为rgw_obj_stripe_size\n      3、尾对象：   小于或等于rgw_obj_stripe_size\n    + 其它的对象按照rgw_obj_stripe_size切分成多个obj存入rados\n    + head object命名规则： {bucket_id}_{对象文件的名字}\n    + 中间对象、尾对象命名：{bucket_id}_shadow_{长度为32的随机字符}_{条带编号, 从1起}\n    + head_obj需要将中间对象、尾对象关联起来：\n    ```c++\n    # rados -p .rgw.buckets listxattr default.ubuntu12.04.iso\n    user.rgw.acl\n    user.rgw.content_type\n    user.rgw.etag\n    user.rgw.idtag\n    user.rgw.manifest\n    user.rgw.x-amz-date\n\n    rados -p .rgw.buckets getxattr  default.11383165.2_scaler.iso  user.rgw.manifest  > /root/scaler.iso.manifest\n\n# ceph-dencoder type RGWObjManifest import /root/ubuntu12.iso.manifest decode dump_json\n{\n    \"objs\": [],\n    \"obj_size\": 2842374144,     <-----------------对象文件大小\n    \"explicit_objs\": \"false\",\n    \"head_obj\": {\n        \"bucket\": {\n            \"name\": \"bean_book\",\n            \"pool\": \".rgw.buckets\",\n            \"data_extra_pool\": \".rgw.buckets.extra\",\n            \"index_pool\": \".rgw.buckets.index\",\n            \"marker\": \"default.11383165.2\",\n            \"bucket_id\": \"default.11383165.2\"\n        },\n        \"key\": \"\",\n        \"ns\": \"\",\n        \"object\": \"scaler.iso\",         <-----对象名\n        \"instance\": \"\"\n    },\n    \"head_size\": 524288,\n    \"max_head_size\": 524288,\n    \"prefix\": \".mGwYpWb3FXieaaaDNdaPzfs546ysNnT_\",  <---中间对象和尾对象的随机前缀\n    \"tail_bucket\": {\n        \"name\": \"bean_book\",\n        \"pool\": \".rgw.buckets\",\n        \"data_extra_pool\": \".rgw.buckets.extra\",\n        \"index_pool\": \".rgw.buckets.index\",\n        \"marker\": \"default.11383165.2\",\n        \"bucket_id\": \"default.11383165.2\"\n    },\n    \"rules\": [\n        {\n            \"key\": 0,\n            \"val\": {\n                \"start_part_num\": 0,\n                \"start_ofs\": 524288,\n                \"part_size\": 0,\n                \"stripe_max_size\": 4194304,\n                \"override_prefix\": \"\"\n            }\n        }\n    ]\n}\n    ```\n\n```c++\nclass RGWObjManifest{\nprotected:\n  \n\n}\n```\n","slug":"ceph_object_attr","published":1,"date":"2018-11-28T08:08:16.998Z","updated":"2018-12-11T08:16:39.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3l8d4l00015shaqc9zy2co","content":"<h3 id=\"rados\"><a href=\"#rados\" class=\"headerlink\" title=\"rados\"></a>rados</h3><p>rados组织形式：</p>\n<ul>\n<li>pool<ul>\n<li>object<ul>\n<li>xattr<ul>\n<li>xfs文件属性</li>\n<li>omap</li>\n</ul>\n</li>\n<li>data<ul>\n<li>xfs文件内容<br>1、rados以pool来组织数据，pool中包含许多object<br>2、一个object包含两部分：</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>存储对象的数据</li>\n<li>该对象的额外属性xattr<br>3、对象的额外属性可以有两个存储的部分：一个是ext4文件的属性部分，这部分往往受底层文件系统的约束，比如ext4文件系统要求其最大不超过4KB；另一个是rados实现的omap，rados使用一种机制，可以为每一个object关联一个omap<br>4、omap是一个key-value存储系统，最早是leveldb，当然也有其他选择，比如rocksdb。<br>5、FileStore的omap中存放的对视对象的属性信息，以key-value的形式存在，那么对于不同的属性，如何定义对象的键值key呢；</li>\n</ul>\n<p>### </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//struct ghobject_t 底层文件系统中文件描述，name就对于的文件名</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">object_t</span>&#123;</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">  <span class=\"keyword\">object_t</span>(): name(s) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">object_t</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s): name(s)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">object_t</span>&amp; o)</span></span>&#123;</span><br><span class=\"line\">    name.swap(o.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    name.clear();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(bufferlist &amp;bl)</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    ::encode(name, bl);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(bufferlist::iterator &amp;bl)</span></span>&#123;</span><br><span class=\"line\">    ::decode(name, bl);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">WRITE_CLASS_ENCODER(<span class=\"keyword\">object_t</span>)</span><br></pre></td></tr></table></figure>\n<p>//struct sobject_t  </p>\n<ul>\n<li>添加了snapshot相关信息的object_t</li>\n<li>snap为该对象对于snapshot的snap号</li>\n<li>如果该对象不是快照，则snap字段设置为CEPH_NOSNAP，非snapshot对象也成为head对象 <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sobject_t</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">object_t</span> oid;</span><br><span class=\"line\">  <span class=\"keyword\">snapid_t</span> snap;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">sobject_t</span>() : snap(<span class=\"number\">0</span>)&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">sobject_t</span>(<span class=\"keyword\">object_t</span> o, <span class=\"keyword\">snapid_t</span> s) : oid(o), snap(s) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">sobject_t</span>&amp; o)</span></span>&#123;</span><br><span class=\"line\">    oid.swap(o.oid);</span><br><span class=\"line\">    <span class=\"keyword\">snapid_t</span> t = snap;</span><br><span class=\"line\">    snap = o.snap;</span><br><span class=\"line\">    o.snap = t;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(bufferlist&amp; bl)</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    ::encode(oid, bl);</span><br><span class=\"line\">    ::encode(snap, bl);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(bufferlist::iterator&amp; bl)</span> </span>&#123;</span><br><span class=\"line\">    ::decode(oid, bl);</span><br><span class=\"line\">    ::decode(snap, bl);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">WRITE_CLASS_ENCODER(<span class=\"keyword\">sobject_t</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>//hobject_t (hash object)</p>\n<ul>\n<li>object_t oid: 对象的名字</li>\n<li>snapid_t snap: 保存对象的snap</li>\n<li>int64_t pool: 该object所在pool的id</li>\n<li>string nspace： 一般为空</li>\n<li>string key： </li>\n<li>string hash： pg id<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hobject_t</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">object_t</span> oid;</span><br><span class=\"line\">  <span class=\"keyword\">snapid_t</span> snap;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> hash;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> max;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> nibblewise_key_cache;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> hash_reverse_bits;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int64_t</span> POOL_META = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int64_t</span> POOL_TEMP_START = <span class=\"number\">-2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">spg_t</span>;</span>     <span class=\"comment\">// for POOL_TEMP_START</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"keyword\">int64_t</span> pool;</span><br><span class=\"line\">  <span class=\"built_in\">string</span>  nspace;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"built_in\">string</span> key;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hobject_t_max</span> &#123;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;<span class=\"title\">get_key</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_key</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;key_)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key_ == oid.name)</span><br><span class=\"line\">      key.clear();</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      key = key_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">to_str</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> get_hash() <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_hash</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">uint32_t</span> value)</span></span>&#123;</span><br><span class=\"line\">    hash = value;</span><br><span class=\"line\">    build_hash_cache();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">match_hash</span><span class=\"params\">(<span class=\"keyword\">uint32_t</span> to_check, <span class=\"keyword\">uint32_t</span> bits, <span class=\"keyword\">uint32_t</span> match)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (match &amp; ~((~<span class=\"number\">0</span>)&lt;&lt;bits)) == (to_check &amp; ~((~<span class=\"number\">0</span>)&lt;&lt;bits));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">match</span><span class=\"params\">(<span class=\"keyword\">uint32_t</span> bits, <span class=\"keyword\">uint32_t</span> match)</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> match_hash(hash, bits, match);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_temp</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pool &lt;= POOL_TEMP_START &amp;&amp; pool != INT64_MIN;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ls_meta</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pool == POOL_META;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">hobject_t</span> : snap(<span class=\"number\">0</span>), hash(<span class=\"number\">0</span>), max(<span class=\"literal\">false</span>), pool(INT64_MIN)&#123;</span><br><span class=\"line\">    build_hash_cache();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">hobject_t</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span> &amp;rhs) = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">  <span class=\"keyword\">hobject_t</span>(<span class=\"keyword\">hobject_t</span> &amp;&amp;rhs) = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">  <span class=\"keyword\">hobject_t</span>(hobject_t_max &amp;&amp;singleton) : <span class=\"keyword\">hobject_t</span>()&#123;</span><br><span class=\"line\">    max = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">hobject_t</span> &amp;<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span> &amp;rhs) = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">  <span class=\"keyword\">hobject_t</span> &amp;<span class=\"keyword\">operator</span>-(<span class=\"keyword\">hobject_t</span> &amp;&amp;rhs) = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">  <span class=\"keyword\">hobject_t</span> &amp;<span class=\"keyword\">operator</span>=(hobject_t_max &amp;&amp;singleton)&#123;</span><br><span class=\"line\">    *<span class=\"keyword\">this</span> = <span class=\"keyword\">hobject_t</span>();</span><br><span class=\"line\">    max = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//maximum stored value.</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> hobject_t_max <span class=\"title\">get_max</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hobject_t_max();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">hobject_t</span>(<span class=\"keyword\">object_t</span> oid, <span class=\"keyword\">const</span> strings key, <span class=\"keyword\">snapid_t</span> snap, <span class=\"keyword\">uint32_t</span> hash, <span class=\"keyword\">int64_t</span> pool, <span class=\"built_in\">string</span> nspace): oid(oid), snap(snap), hash(hash), max(<span class=\"literal\">false</span>),</span><br><span class=\"line\">    pool(pool), nspace(nspace), key(soid,oid.name == key ? <span class=\"built_in\">string</span>() : key)&#123;</span><br><span class=\"line\">      build_hash_cache();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// @return min hobject_t ret s.t. ret.hash == this-&gt;hash</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取边界</span></span><br><span class=\"line\">    <span class=\"keyword\">hobject_t</span> get_boundary() <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (is_max())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">hobject_t</span> ret;</span><br><span class=\"line\">      ret.set_hash(hash);</span><br><span class=\"line\">      ret.pool = pool;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">hobject_t</span> get_object_boundary() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(is_max())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">hobject_t</span> ret = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">      ret.snap = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">///@return head version of this hobject_t</span></span><br><span class=\"line\">    <span class=\"keyword\">hobject_t</span> get_head() <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">hobject_t</span> ret(*<span class=\"keyword\">this</span>);</span><br><span class=\"line\">      ret.snap = CEPH_NOSANP;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">///@return snapdir version of this hobject_t</span></span><br><span class=\"line\">    <span class=\"keyword\">hobject_t</span> get_snapdir() <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">hobject_t</span> ret(*<span class=\"keyword\">this</span>);</span><br><span class=\"line\">      ret.snap = CEPH_SNAPDIR;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">///@return true if object is head</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_head</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> snap == CEPH_NOSANP;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">///@return true if object is neither head nor snapdir nor max</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_snap</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> !is_max() &amp;&amp; !is_head() &amp;&amp; !is_snapdir();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">///@return true if the object should have a snapset in it's attrs</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">has_snapset</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> is_head() || is_snapdir();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Do not use when a particular hash function is need</span></span><br><span class=\"line\">    explicit hobject_t(const sobject_t &amp;o) : oid(o.oid), snap(o.snap), max(false), pool(POOL_META) &#123;</span><br><span class=\"line\">      set_hash(<span class=\"built_in\">std</span>::hash&lt;<span class=\"keyword\">sobject_t</span>&gt;()(o));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_max</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">      assert(!max ||(*<span class=\"keyword\">this</span> == <span class=\"keyword\">hobject_t</span>(<span class=\"keyword\">hobject_t</span>::get_max())));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_min</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//this needs to match how it's constructed</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> snap==<span class=\"number\">0</span> &amp;&amp;hash==<span class=\"number\">0</span> &amp;&amp; !max &amp;&amp; pool==INT64_MIN;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">uint32_t</span> _reverse_bits(<span class=\"keyword\">uint32_t</span> v)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reverse_bits(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">uint32_t</span> _reverse_nibbles(<span class=\"keyword\">uint32_t</span> retval)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _reverse_nibbles(retval);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns set S of strings such that for any object h.match(bits, mask), t</span></span><br><span class=\"line\"><span class=\"comment\">     * there is some string s\\f$in\\f$ S such thats is a prefix of h.to_str().</span></span><br><span class=\"line\"><span class=\"comment\">     * Furthermore, for any s $f\\in\\f$ S, s is a prefix of h.str() implies *</span></span><br><span class=\"line\"><span class=\"comment\">     * that h.match(bits, mask).</span></span><br><span class=\"line\"><span class=\"comment\">     **/</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt; get_prefixes(<span class=\"keyword\">uint32_t</span> bits, <span class=\"keyword\">uint32_t</span> mask, <span class=\"keyword\">int64_t</span> pool)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">uint32_t</span> len = bits;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(len % <span class=\"number\">4</span> <span class=\"comment\">/* nibbles */</span>) len++;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">set</span>&lt;<span class=\"keyword\">uint32_t</span>&gt; from;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (bits &lt; <span class=\"number\">32</span>)</span><br><span class=\"line\">        from.insert(mask &amp; ~((<span class=\"keyword\">uint32_t</span>)(~<span class=\"number\">0</span>) &lt;&lt; bits));</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(bits == <span class=\"number\">32</span>)</span><br><span class=\"line\">        from.insert(mask);</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        ceph_abort();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">set</span>&lt;<span class=\"keyword\">uint32_t</span>&gt; to;</span><br><span class=\"line\">      fro(<span class=\"keyword\">uint32_t</span> i=bits; i&lt;len; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">uint32_t</span>&gt;::iterator j=from.begin(); j!=from.end(); ++j)&#123;</span><br><span class=\"line\">          to.insert(*j | (<span class=\"number\">1U</span>&lt;&lt;i));</span><br><span class=\"line\">          to.insert(*j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        to.swap(from);</span><br><span class=\"line\">        to.clear();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">char</span> buf[<span class=\"number\">20</span>];</span><br><span class=\"line\">      <span class=\"keyword\">char</span> *t = buf;</span><br><span class=\"line\">      <span class=\"keyword\">uint64_t</span> poolid(pool);</span><br><span class=\"line\"></span><br><span class=\"line\">      t += <span class=\"built_in\">snprintf</span>(t, <span class=\"keyword\">sizeof</span>(buf), <span class=\"string\">\"%.*llX\"</span>, <span class=\"number\">16</span>, (<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"keyword\">unsigned</span>)poolid);</span><br><span class=\"line\">      *(t++) = <span class=\"string\">'.'</span></span><br><span class=\"line\">      <span class=\"built_in\">string</span> poolstr(buf, t - buf);</span><br><span class=\"line\">      <span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt; ret;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">uint32_t</span>&gt;::iterator i=from.begin(); i != from.end(); ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span> revhash(<span class=\"keyword\">hobject_t</span>::_reverse_nibbles(*i));</span><br><span class=\"line\">        <span class=\"built_in\">snprintf</span>(buf, <span class=\"keyword\">sizeof</span>(buf), <span class=\"string\">\"%.*X\"</span>, (<span class=\"keyword\">int</span>)(<span class=\"keyword\">sizeof</span>(revhash))*<span class=\"number\">2</span>, revhash);</span><br><span class=\"line\">        ret.insert(poolstr + <span class=\"built_in\">string</span>(buf, len/<span class=\"number\">4</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//filestore nibble-based key</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> get_nibblewise_key_u32()  <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">      assert(!max);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> nibblewise_key_cache;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> get_nibblewise_key()  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> max ? <span class=\"number\">0x100000000</span>ull : nibblewise_key_cache;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// newer bit-reversed key</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> get_bitwise_key_u32() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">      assert(!max);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> hash_reverse_bits;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> get_bitwise_key() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> max ? <span class=\"number\">0x100000000</span>ull : hash_reverse_bits;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//please remeber to update set_bitwise_key_u32() also</span></span><br><span class=\"line\">    <span class=\"comment\">//once you change build_hash_cache()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build_hash_cache</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      nibblewise_key_cache = _reverse_nibbles(hash);</span><br><span class=\"line\">      hash_reverse_bits = _reverse_bits(hash);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_bitwise_key_u32</span><span class=\"params\">(<span class=\"keyword\">uint32_t</span> value)</span></span>&#123;</span><br><span class=\"line\">      hash = _reverse_bits(value);</span><br><span class=\"line\">      <span class=\"comment\">//below is identical to build_hash_cache() and shall be</span></span><br><span class=\"line\">      <span class=\"comment\">//updated correspondingly if you change build_hash_cache()</span></span><br><span class=\"line\">      nibblewise_key_cache = _reverse_nibbles(hash);</span><br><span class=\"line\">      hash_reverse_bits = values;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; <span class=\"title\">get_effective_key</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(key.length())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> oid.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">hobject_t</span> make_temp_hobject(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; name) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">hobject_t</span>(<span class=\"keyword\">object_t</span>(name), <span class=\"string\">\"\"</span>, CEPH_NOSANP, hash, <span class=\"keyword\">hobject_t</span>::POOL_TEMP_START - pool, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">hobject_t</span> &amp;o)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">hobject_t</span> temp(o);</span><br><span class=\"line\">      o = (*<span class=\"keyword\">this</span>);</span><br><span class=\"line\">      (*<span class=\"keyword\">this</span>) = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;<span class=\"title\">get_namespace</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; </span><br><span class=\"line\">      <span class=\"keyword\">return</span> nspace;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">parse</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; s)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(bufferlist&amp; bl)</span> <span class=\"keyword\">const</span></span>; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(bufferlist::iterator&amp; bl)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(json_spirit::Value&amp; v)</span></span>; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(Formatter *f)</span> <span class=\"keyword\">const</span></span>; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">generate_test_instances</span><span class=\"params\">(<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">hobject_t</span>*&gt;&amp; o)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; r)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&gt;(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; r) &#123; </span><br><span class=\"line\">      <span class=\"keyword\">return</span> cmp(l, r) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&gt;=(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cmp(l, r) &gt;=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; r) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cmp(l, r) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;=(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; r) &#123;     </span><br><span class=\"line\">      <span class=\"keyword\">return</span> cmp(l, r) &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp;, <span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp;); </span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp;, <span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp;);</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ghobject_t</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">WRITE_CLASS_ENCODE(<span class=\"keyword\">hboject_t</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>//ghobject_t</p>\n<ul>\n<li>在hobjec_t基础上，添加了generation 字段 和 shard_id 字段; 主要用于EC的rollback</li>\n<li>副本模式下， shard_id设置为NO_SHARD(-1), 这两个字段是无效的；<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ghobject_t</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">hboject_t</span> hobj;</span><br><span class=\"line\">  <span class=\"keyword\">gen_t</span> generation;</span><br><span class=\"line\">  <span class=\"keyword\">shard_id_t</span> shard_id;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> max;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">gen_t</span> NO_GEN=UINT64_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">ghobject_t</span>(): generation(NO_GEN), shard_id(<span class=\"keyword\">shard_id_t</span>::NO_SHARD), max(<span class=\"literal\">false</span>)&#123;&#125;</span><br><span class=\"line\">  explicit ghobject_t(const hobject_t &amp;obj) : hobj(obj), generation(NO_GEN),</span><br><span class=\"line\">    shard_id(<span class=\"keyword\">shard_id_t</span>::NO_SHARD), max(<span class=\"literal\">false</span>)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">ghobject_t</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span> &amp;obj, <span class=\"keyword\">gen_t</span> gen, <span class=\"keyword\">shard_id_t</span> shard):</span><br><span class=\"line\">    hobj(obj), generation(gen), shard_id(shard), max(<span class=\"literal\">false</span>)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> ghobject_t <span class=\"title\">make_pgmeta</span><span class=\"params\">(<span class=\"keyword\">int64_t</span> pool, <span class=\"keyword\">uint32_t</span> hash, <span class=\"keyword\">shard_id_t</span> shard)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">hobject_t</span> h(<span class=\"keyword\">object_t</span>(), <span class=\"built_in\">string</span>(), CEPH_NOSANP, hash, pool, <span class=\"built_in\">string</span>());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">ghobject_t</span>(h, NO_GEN, shard);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_pgmeta</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//make sure we are distinct from hobject_t(), which has pool INT64_MIN</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hobj.pool &gt;= <span class=\"number\">0</span> &amp;&amp; hobj.oid,name.empty();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">match</span><span class=\"params\">(<span class=\"keyword\">uint32_t</span> bits, <span class=\"keyword\">uint32_t</span> match)</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hobj.match_hash(hobj.hash, bits, match);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/// @return min ghobject_t ret s.t. ret.hash == this-&gt;hash</span></span><br><span class=\"line\">  <span class=\"keyword\">ghobject_t</span> get_boundary() <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(hobj.is_max())</span><br><span class=\"line\">      <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">ghobject_t</span> ret;</span><br><span class=\"line\">    ret.hobj.set_hash(hobj.hash);</span><br><span class=\"line\">    ret.shard_id = shard_id;</span><br><span class=\"line\">    ret.hobj.pool = hobj.pool;</span><br><span class=\"line\">    retrun ret;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> get_nibblewise_key_u32() <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hobj.get_nibblewise_key_u32();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> get_nibblewise_key() <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hobj.get_nibblewise_key();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_degenerate</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> generation == NO_GEN &amp;&amp; shard_id == shard_id::NO_SHARD;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_no_gen</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> generation == NO_GEN;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_no_shard</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> shard_id == <span class=\"keyword\">shard_id_t</span>::NO_SHARD;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_shard</span><span class=\"params\">(<span class=\"keyword\">shard_id_t</span> s)</span></span>&#123;</span><br><span class=\"line\">    shard_id = s;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">parse</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//maximum sorted value.</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> ghobject_t <span class=\"title\">get_max</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">ghobject_t</span> h;</span><br><span class=\"line\">    h.max = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    h.hobj = <span class=\"keyword\">hobject_t</span>::get_max();  <span class=\"comment\">//so that is_max() =&gt; hobj.is_max()</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> h;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_max</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_min</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span> == <span class=\"keyword\">ghobject_t</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">ghobject_t</span> &amp;o)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">ghobject_t</span> temp(o)</span><br><span class=\"line\">    o = (*<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    (*<span class=\"keyword\">this</span>) = temp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(bufferlist&amp; bl)</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(bufferlist::iterator&amp; bl)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(json_spirit::Value&amp; v)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> encoded_size() <span class=\"keyword\">const</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(Formatter *f)</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">generate_test_instances</span><span class=\"params\">(<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">ghobject_t</span>*&gt;&amp; o)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; r)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&gt;(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; r)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cmp(l, r) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&gt;=(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; r)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cmp(l, r) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; r)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cmp(l, r) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;=(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; r)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cmp(l, r) &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp;, <span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp;);</span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp;, <span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">WRITE_CLASS_ENCODE(<span class=\"keyword\">ghobject_t</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>最直观的感觉是object id + xattr key; 两者结合一起，形成对象的键值key，但存在一个弊端<br>object id可能很长，当个对象存在很多属性的时候，object id不得不在key中出现多次，这必然会造成存储空间的浪费。<br>Ceph的FileStore分成了2步，第一步根据object id生成一个比较短的seq，然后seq + xattr key形成对象的某个属性的键值。</p>\n<p>omap不是通过计算从object id 获取seq的，他是首先根据object id, 存放一个Header类型的<br>数据结构到LevelDB，其中Header中的一个成员变量为seq。</p>\n<ul>\n<li>key: USER_PREFIX + header_key(header-&gt;seq) + XATTR_PREFIX + key</li>\n<li>value: header</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  - key: HOBJECT_TO_SEQ +ghobject_key(oid)</span></span><br><span class=\"line\"><span class=\"comment\">  - value: header (struct _Header)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">Header</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> seq;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> parent;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> num_children;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">ghobject_t</span> oid;</span><br><span class=\"line\"></span><br><span class=\"line\">    SequencerPosition spos;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(bufferlist&amp; bl)</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">coll_t</span> unused;</span><br><span class=\"line\">      ENCODE_START(<span class=\"number\">2</span>, <span class=\"number\">1</span>, bl);</span><br><span class=\"line\">      ::encode(seq, bl);</span><br><span class=\"line\">      ::encode(parent, bl);</span><br><span class=\"line\">      ::encode(num_children, bl);</span><br><span class=\"line\">      ::encode(unused, bl);</span><br><span class=\"line\">      ::encode(oid, bl);</span><br><span class=\"line\">      ::encode(spos bl);</span><br><span class=\"line\">      ENCODE_FINISH(bl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(bufferlist::iterator&amp; bl)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">coll_t</span> unused;</span><br><span class=\"line\">      DECODE_START(<span class=\"number\">2</span>, bl);</span><br><span class=\"line\">      ::decode(seq, bl);</span><br><span class=\"line\">      ::decode(parent, bl);</span><br><span class=\"line\">      ::decode(num_children, bl);</span><br><span class=\"line\">      ::decode(unused, bl);</span><br><span class=\"line\">      ::decode(oid, bl);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (struct_v &gt;= <span class=\"number\">2</span>)</span><br><span class=\"line\">        ::decode(spos, bl);</span><br><span class=\"line\">      DECODE_FINISH(bl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(Formatter *f)</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">      f-&gt;dump_unsigned(<span class=\"string\">\"seq\"</span>, seq);</span><br><span class=\"line\">      f-&gt;dump_unsigned(<span class=\"string\">\"parent\"</span>, parent);</span><br><span class=\"line\">      f-&gt;dump_unsigned(<span class=\"string\">\"num_children\"</span>, num_children);</span><br><span class=\"line\">      f-&gt;dump_stream(<span class=\"string\">\"oid\"</span>) &lt;&lt; oid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">generate_test_instances</span><span class=\"params\">(<span class=\"built_in\">list</span>&lt;_Header*&gt;&amp; o )</span></span>&#123;</span><br><span class=\"line\">      o.push_back(<span class=\"keyword\">new</span> _Header);</span><br><span class=\"line\">      o.push_back(<span class=\"keyword\">new</span> _Header);</span><br><span class=\"line\">      o.back()-&gt;parent = <span class=\"number\">20</span>;</span><br><span class=\"line\">      o.back()-&gt;seq = <span class=\"number\">30</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _Header() : seq(<span class=\"number\">0</span>), parent(<span class=\"number\">0</span>), num_children(<span class=\"number\">1</span>) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>如果要获取某个对象的oid的某个属性的值，需要分成两步走:</p>\n<ul>\n<li>找到Header，从header中取出seq的值</li>\n<li>根据seq的值生成该属性对应的新的最终的键值，从LevelDB中取出value</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取对象oid的某个或者某几个属性的值</span></span><br><span class=\"line\"><span class=\"comment\">// os/filestore/DBObjectMap.cc</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> DBObjectMap::get_xattrs(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; oid, <span class=\"keyword\">const</span> <span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; to_get, <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, bufferlist&gt;* out)&#123;</span><br><span class=\"line\">  <span class=\"function\">MapHeaderLock <span class=\"title\">hl</span><span class=\"params\">(<span class=\"keyword\">this</span>, oid)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">//第一步根据oid找到header</span></span><br><span class=\"line\">  Header header = lookup_map_header(hl, oid);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!header)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -ENOENT;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//根据找到的header中的seq值，社会你刚才属性的键，在levelDB中找到对应key的value</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> db-get(xattr_prefix(header), to_get, out);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> DBObjectMap::set_xattrs(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; oid, <span class=\"keyword\">const</span> <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, bufferlist&gt;&amp; to_set, <span class=\"keyword\">const</span> SequencerPosition *spos)&#123;</span><br><span class=\"line\">  KeyValueDB::Transaction t = db-&gt;get_transcation();</span><br><span class=\"line\">  <span class=\"function\">MapHeaderLock <span class=\"title\">hl</span><span class=\"params\">(<span class=\"keyword\">this</span>, oid)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">/*寻找oid对应的header，如若没有，则新建一个header*/</span></span><br><span class=\"line\">  Header header = lookup_create_map_header(hl, oid, t);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!header)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (check_spos(oid, header, spos))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*根据header中的seq，得到真正的键值，然后设置一个或者多个属性*/</span></span><br><span class=\"line\">  t-&gt;<span class=\"built_in\">set</span>(xattr_prefix(header), to_set);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> db-&gt;submit_transaction(t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> DBObjectMap::USER_PREFIX = <span class=\"string\">\"__USER__\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> DBObjectMap::XATTR_PREFIX= <span class=\"string\">\"__AXATTR__\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">string</span> DBObjectMap::header_key(<span class=\"keyword\">uint64_t</span> seq)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf[<span class=\"number\">100</span>];</span><br><span class=\"line\">  <span class=\"built_in\">snprintf</span>(buf, <span class=\"keyword\">sizeof</span>(buf), <span class=\"string\">\"%.*\"</span> PRId64, (<span class=\"keyword\">int</span>)(<span class=\"number\">2</span>*<span class=\"keyword\">sizeof</span>(seq)), seq);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">string</span>(buf);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">string</span> DBObjectMap::xattr_prefix(Header header)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> USER_PREFIX + header_key(header-&gt;seq) + XATTR_PREFIX;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"seq-生成过程\"><a href=\"#seq-生成过程\" class=\"headerlink\" title=\"seq 生成过程\"></a>seq 生成过程</h3><ul>\n<li>LevelDB中存放着一个特殊的全局意义的key-value</li>\n<li>key: SYS_PREFIX + GLOBAL_STATE_KEY </li>\n<li>value: State  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// peersistent state for store @see generate_header</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">State</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> _u8 CUR_VERSION = <span class=\"number\">3</span>;</span><br><span class=\"line\">  __u8 v;</span><br><span class=\"line\">  <span class=\"keyword\">uint64_t</span> seq;</span><br><span class=\"line\">  <span class=\"comment\">// legacy is false when complete regions never used</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> legacy;</span><br><span class=\"line\"></span><br><span class=\"line\">  State() : v(<span class=\"number\">0</span>), seq(<span class=\"number\">1</span>), legacy(<span class=\"literal\">false</span>)&#123;&#125;</span><br><span class=\"line\">  explicit State(uint64_t seq) : v(0), seq(seq), legacy(false)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(bufferlist&amp; bl)</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    ENCODE_START(<span class=\"number\">3</span>, <span class=\"number\">1</span>, bl);</span><br><span class=\"line\">    ::encode(v, bl);</span><br><span class=\"line\">    ::encode(seq, bl);</span><br><span class=\"line\">    ::encode(legacy, bl);</span><br><span class=\"line\">    ENCODE_FINISH(bl);    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(bufferlist::iterator &amp;bl)</span></span>&#123;</span><br><span class=\"line\">    DECODE_START(<span class=\"number\">3</span>, bl);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (struct_v &gt;=<span class=\"number\">2</span>)</span><br><span class=\"line\">      ::decode(v, bl);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      v = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ::decode(seq, bl);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(struct_v &gt;=<span class=\"number\">3</span>)</span><br><span class=\"line\">      ::decode(legacy, bl);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      legacy = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    DECODE_FINISH(bl);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(Formatter* f)</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    f-&gt;dump_unsigned(<span class=\"string\">\"v\"</span>, v);</span><br><span class=\"line\">    f-&gt;dump_unsigned(<span class=\"string\">\"seq\"</span>, seq);</span><br><span class=\"line\">    f-&gt;dump_unsigned(<span class=\"string\">\"legacy\"</span>, legacy);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">generate_test_instances</span><span class=\"params\">(<span class=\"built_in\">list</span>&lt;State*&gt;&amp; o)</span></span>&#123;</span><br><span class=\"line\">    o.push_back(<span class=\"keyword\">new</span> State(<span class=\"number\">0</span>));</span><br><span class=\"line\">    o.push_back(<span class=\"keyword\">new</span> State(<span class=\"number\">20</span>));</span><br><span class=\"line\">  &#125; state;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight c++\"><figcaption><span>该结构体只有一个成员变量，即seq，当产生新的Header的时候，会该值会递增，写入LevelDB</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DBObjectMap::Header DBObjectMap::_generate_new_header(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; oid, Header parent)&#123;</span><br><span class=\"line\">  Header header = Header(<span class=\"keyword\">new</span> _Header(), RemoveOnDelete(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">  header-&gt;seq = state.seq++;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (parent)&#123;</span><br><span class=\"line\">    header-&gt;parent =  parent-&gt;seq;</span><br><span class=\"line\">    header-&gt;spos = parent-&gt;spos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  header-&gt;num_children = <span class=\"number\">1</span>;</span><br><span class=\"line\">  header-&gt;oid = oid;</span><br><span class=\"line\">  assert(!in_use.count(header-&gt;seq));</span><br><span class=\"line\">  in_use.insert(header-&gt;seq);</span><br><span class=\"line\"></span><br><span class=\"line\">  write_state();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> header;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//因为是全局的，为了防止竞争，需要加锁保护。</span></span><br><span class=\"line\"><span class=\"function\">Header <span class=\"title\">generate_new_header</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span> &amp;oid, Header parent)</span> </span>&#123;</span><br><span class=\"line\">    Mutex::<span class=\"function\">Locker <span class=\"title\">l</span><span class=\"params\">(header_lock)</span></span>;<span class=\"comment\">//加锁保护</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _generate_new_header(oid, parent);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">DBObjectMap::Header DBObjectMap::lookup_create_map_header(</span><br><span class=\"line\">  <span class=\"keyword\">const</span> MapHeaderLock &amp;hl, </span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span> &amp;oid,</span><br><span class=\"line\">  KeyValueDB::Transaction t)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Mutex::<span class=\"function\">Locker <span class=\"title\">l</span><span class=\"params\">(header_lock)</span></span>; <span class=\"comment\">// 加锁保护</span></span><br><span class=\"line\">  Header header = _lookup_map_header(hl, oid);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!header) &#123;</span><br><span class=\"line\">    header = _generate_new_header(oid, Header());                                                                                                      </span><br><span class=\"line\">    set_map_header(hl, oid, *header, t);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> header;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ceph-objectstore-tool-用法\"><a href=\"#ceph-objectstore-tool-用法\" class=\"headerlink\" title=\"ceph-objectstore-tool 用法\"></a>ceph-objectstore-tool 用法</h3><h3 id=\"rgw-s3-属性\"><a href=\"#rgw-s3-属性\" class=\"headerlink\" title=\"rgw s3 属性\"></a>rgw s3 属性</h3><p>rgw s3的额外属性：</p>\n<ul>\n<li>user</li>\n<li>bucket</li>\n<li>bucket.instance<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&lt;bucket&gt;指bucket name; &lt;marker&gt;指bucker id; &lt;user&gt;指user id</span></span><br><span class=\"line\">$ radosgw-admin metadata list</span><br><span class=\"line\">$ radosgw-admin metadata list bucket</span><br><span class=\"line\">$ radosgw-admin metadata list bucket.instance</span><br><span class=\"line\">$ radosgw-admin metadata list user</span><br><span class=\"line\"></span><br><span class=\"line\">$ radosgw-admin metadata get bucket:&lt;bucket&gt;</span><br><span class=\"line\">$ radosgw-admin metadata get bucket.instance:&lt;bucket&gt;:&lt;marker&gt;</span><br><span class=\"line\">$ radosgw-admin metadata get user:&lt;user&gt;   # get or set</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>user 数据被以<user>作为object name存储在default.rgw.meta pool中，其中namespace是user uid<br>bucket 数据以<bucket>作为object name存储在default.rgw.meta pool, 其中namespace：root</bucket></user></p>\n<p>bucket.instance 数据以.bucket.meta.<bucket>:<marker>作为 object name存储在default.rgw.meta pool中，其namespace是root。</marker></bucket></p>\n<h4 id=\"bucket属性\"><a href=\"#bucket属性\" class=\"headerlink\" title=\"bucket属性\"></a>bucket属性</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">radosgw-admin bucket stats --bucket=test</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"bucket\"</span>: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"pool\"</span>: <span class=\"string\">\".rgw.buckets.zj-1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"index_pool\"</span>: <span class=\"string\">\".rgw.buckets.index\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"string\">\"default.784974.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"marker\"</span>: <span class=\"string\">\"default.784974.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"owner\"</span>: <span class=\"string\">\"user-1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"ver\"</span>: <span class=\"string\">\"0#1901\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"master_ver\"</span>: <span class=\"string\">\"0#0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"mtime\"</span>: <span class=\"string\">\"2015-04-07 16:23:23.000000\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"max_marker\"</span>: <span class=\"string\">\"0#\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"usage\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"rgw.main\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"size_kb\"</span>: <span class=\"number\">1048870</span>,</span><br><span class=\"line\">            <span class=\"string\">\"size_kb_actual\"</span>: <span class=\"number\">1048908</span>,</span><br><span class=\"line\">            <span class=\"string\">\"num_objects\"</span>: <span class=\"number\">17</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"bucket_quota\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"enabled\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"max_size_kb\"</span>: <span class=\"number\">-1</span>,</span><br><span class=\"line\">        <span class=\"string\">\"max_objects\"</span>: <span class=\"number\">-1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>bucket的名称，所在的data pool, index pool, bucket id<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bucket_id</span><br><span class=\"line\">  - zone_name     --&gt;   <span class=\"keyword\">default</span></span><br><span class=\"line\">  - instance_id   --&gt;   <span class=\"number\">784974</span></span><br><span class=\"line\">  - bucket id     --&gt;   <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"bucket-index-属性\"><a href=\"#bucket-index-属性\" class=\"headerlink\" title=\"bucket index 属性\"></a>bucket index 属性</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rados -p .rgw.buckets.index ls - | grep <span class=\"string\">\"default.784974.1\"</span></span><br><span class=\"line\">.dir.<span class=\"keyword\">default</span><span class=\"number\">.784974</span><span class=\"number\">.1</span></span><br></pre></td></tr></table></figure>\n<p>bucket index object 名称为： .dir.{buckt id}</p>\n<h4 id=\"查看index-的keys\"><a href=\"#查看index-的keys\" class=\"headerlink\" title=\"查看index 的keys\"></a>查看index 的keys</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># rados -p .rgw.buckets.index listomapkeys .dir.default.784974.1</span></span><br><span class=\"line\">/demo/region.conf.json</span><br></pre></td></tr></table></figure>\n<h3 id=\"rgw-max-chunk-size-amp-rgw-obj-stripe-size\"><a href=\"#rgw-max-chunk-size-amp-rgw-obj-stripe-size\" class=\"headerlink\" title=\"rgw_max_chunk_size &amp; rgw_obj_stripe_size\"></a>rgw_max_chunk_size &amp; rgw_obj_stripe_size</h3><ul>\n<li>rgw_max_chunk_size : default: (524388) 512k<ul>\n<li>RadosGW下发到RADOS集群的单个IO的大小</li>\n<li>当写入的对象大小大于rgw_max_chunk_size:<ul>\n<li>rados层的一个对象，大小为实际大小；</li>\n<li>rados层的命名： {bucket_id}_{对象文件的名字}</li>\n</ul>\n</li>\n<li>当写入的对象大小大于rgw_max_chunk_size:<ul>\n<li>分成多种对象存储，<br>1、首对象（head_obj) 大小为rgw_max_chunk_size<br>2、中间对象： 大小为rgw_obj_stripe_size<br>3、尾对象：   小于或等于rgw_obj_stripe_size</li>\n<li>其它的对象按照rgw_obj_stripe_size切分成多个obj存入rados</li>\n<li>head object命名规则： {bucket_id}_{对象文件的名字}</li>\n<li>中间对象、尾对象命名：{bucket_id}<em>shadow</em>{长度为32的随机字符}_{条带编号, 从1起}</li>\n<li>head_obj需要将中间对象、尾对象关联起来：<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\"># rados -p .rgw.buckets listxattr default.ubuntu12.04.iso</span></span><br><span class=\"line\">    user.rgw.acl</span><br><span class=\"line\">    user.rgw.content_type</span><br><span class=\"line\">    user.rgw.etag</span><br><span class=\"line\">    user.rgw.idtag</span><br><span class=\"line\">    user.rgw.manifest</span><br><span class=\"line\">    user.rgw.x-amz-date</span><br><span class=\"line\"></span><br><span class=\"line\">    rados -p .rgw.buckets getxattr  <span class=\"keyword\">default</span><span class=\"number\">.11383165</span><span class=\"number\">.2</span>_scaler.iso  user.rgw.manifest  &gt; /root/scaler.iso.manifest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># ceph-dencoder type RGWObjManifest import /root/ubuntu12.iso.manifest decode dump_json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"objs\"</span>: [],</span><br><span class=\"line\">    <span class=\"string\">\"obj_size\"</span>: <span class=\"number\">2842374144</span>,     &lt;-----------------对象文件大小</span><br><span class=\"line\">    <span class=\"string\">\"explicit_objs\"</span>: <span class=\"string\">\"false\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"head_obj\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"bucket\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"bean_book\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pool\"</span>: <span class=\"string\">\".rgw.buckets\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"data_extra_pool\"</span>: <span class=\"string\">\".rgw.buckets.extra\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"index_pool\"</span>: <span class=\"string\">\".rgw.buckets.index\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"marker\"</span>: <span class=\"string\">\"default.11383165.2\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"bucket_id\"</span>: <span class=\"string\">\"default.11383165.2\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"ns\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"object\"</span>: <span class=\"string\">\"scaler.iso\"</span>,         &lt;-----对象名</span><br><span class=\"line\">        <span class=\"string\">\"instance\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"head_size\"</span>: <span class=\"number\">524288</span>,</span><br><span class=\"line\">    <span class=\"string\">\"max_head_size\"</span>: <span class=\"number\">524288</span>,</span><br><span class=\"line\">    <span class=\"string\">\"prefix\"</span>: <span class=\"string\">\".mGwYpWb3FXieaaaDNdaPzfs546ysNnT_\"</span>,  &lt;---中间对象和尾对象的随机前缀</span><br><span class=\"line\">    <span class=\"string\">\"tail_bucket\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"name\"</span>: <span class=\"string\">\"bean_book\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"pool\"</span>: <span class=\"string\">\".rgw.buckets\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"data_extra_pool\"</span>: <span class=\"string\">\".rgw.buckets.extra\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"index_pool\"</span>: <span class=\"string\">\".rgw.buckets.index\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"marker\"</span>: <span class=\"string\">\"default.11383165.2\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"bucket_id\"</span>: <span class=\"string\">\"default.11383165.2\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"rules\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"key\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"val\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">\"start_part_num\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"string\">\"start_ofs\"</span>: <span class=\"number\">524288</span>,</span><br><span class=\"line\">                <span class=\"string\">\"part_size\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"string\">\"stripe_max_size\"</span>: <span class=\"number\">4194304</span>,</span><br><span class=\"line\">                <span class=\"string\">\"override_prefix\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RGWObjManifest</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"rados\"><a href=\"#rados\" class=\"headerlink\" title=\"rados\"></a>rados</h3><p>rados组织形式：</p>\n<ul>\n<li>pool<ul>\n<li>object<ul>\n<li>xattr<ul>\n<li>xfs文件属性</li>\n<li>omap</li>\n</ul>\n</li>\n<li>data<ul>\n<li>xfs文件内容<br>1、rados以pool来组织数据，pool中包含许多object<br>2、一个object包含两部分：</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>存储对象的数据</li>\n<li>该对象的额外属性xattr<br>3、对象的额外属性可以有两个存储的部分：一个是ext4文件的属性部分，这部分往往受底层文件系统的约束，比如ext4文件系统要求其最大不超过4KB；另一个是rados实现的omap，rados使用一种机制，可以为每一个object关联一个omap<br>4、omap是一个key-value存储系统，最早是leveldb，当然也有其他选择，比如rocksdb。<br>5、FileStore的omap中存放的对视对象的属性信息，以key-value的形式存在，那么对于不同的属性，如何定义对象的键值key呢；</li>\n</ul>\n<p>### </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//struct ghobject_t 底层文件系统中文件描述，name就对于的文件名</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">object_t</span>&#123;</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">  <span class=\"keyword\">object_t</span>(): name(s) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">object_t</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s): name(s)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">object_t</span>&amp; o)</span></span>&#123;</span><br><span class=\"line\">    name.swap(o.name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    name.clear();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(bufferlist &amp;bl)</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    ::encode(name, bl);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(bufferlist::iterator &amp;bl)</span></span>&#123;</span><br><span class=\"line\">    ::decode(name, bl);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">WRITE_CLASS_ENCODER(<span class=\"keyword\">object_t</span>)</span><br></pre></td></tr></table></figure>\n<p>//struct sobject_t  </p>\n<ul>\n<li>添加了snapshot相关信息的object_t</li>\n<li>snap为该对象对于snapshot的snap号</li>\n<li>如果该对象不是快照，则snap字段设置为CEPH_NOSNAP，非snapshot对象也成为head对象 <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sobject_t</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">object_t</span> oid;</span><br><span class=\"line\">  <span class=\"keyword\">snapid_t</span> snap;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">sobject_t</span>() : snap(<span class=\"number\">0</span>)&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">sobject_t</span>(<span class=\"keyword\">object_t</span> o, <span class=\"keyword\">snapid_t</span> s) : oid(o), snap(s) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">sobject_t</span>&amp; o)</span></span>&#123;</span><br><span class=\"line\">    oid.swap(o.oid);</span><br><span class=\"line\">    <span class=\"keyword\">snapid_t</span> t = snap;</span><br><span class=\"line\">    snap = o.snap;</span><br><span class=\"line\">    o.snap = t;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(bufferlist&amp; bl)</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    ::encode(oid, bl);</span><br><span class=\"line\">    ::encode(snap, bl);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(bufferlist::iterator&amp; bl)</span> </span>&#123;</span><br><span class=\"line\">    ::decode(oid, bl);</span><br><span class=\"line\">    ::decode(snap, bl);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">WRITE_CLASS_ENCODER(<span class=\"keyword\">sobject_t</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>//hobject_t (hash object)</p>\n<ul>\n<li>object_t oid: 对象的名字</li>\n<li>snapid_t snap: 保存对象的snap</li>\n<li>int64_t pool: 该object所在pool的id</li>\n<li>string nspace： 一般为空</li>\n<li>string key： </li>\n<li>string hash： pg id<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">hobject_t</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">object_t</span> oid;</span><br><span class=\"line\">  <span class=\"keyword\">snapid_t</span> snap;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> hash;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> max;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> nibblewise_key_cache;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> hash_reverse_bits;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int64_t</span> POOL_META = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int64_t</span> POOL_TEMP_START = <span class=\"number\">-2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">spg_t</span>;</span>     <span class=\"comment\">// for POOL_TEMP_START</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"keyword\">int64_t</span> pool;</span><br><span class=\"line\">  <span class=\"built_in\">string</span>  nspace;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">  <span class=\"built_in\">string</span> key;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hobject_t_max</span> &#123;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;<span class=\"title\">get_key</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_key</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> &amp;key_)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key_ == oid.name)</span><br><span class=\"line\">      key.clear();</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      key = key_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">to_str</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> get_hash() <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_hash</span><span class=\"params\">()</span><span class=\"params\">(<span class=\"keyword\">uint32_t</span> value)</span></span>&#123;</span><br><span class=\"line\">    hash = value;</span><br><span class=\"line\">    build_hash_cache();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">match_hash</span><span class=\"params\">(<span class=\"keyword\">uint32_t</span> to_check, <span class=\"keyword\">uint32_t</span> bits, <span class=\"keyword\">uint32_t</span> match)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (match &amp; ~((~<span class=\"number\">0</span>)&lt;&lt;bits)) == (to_check &amp; ~((~<span class=\"number\">0</span>)&lt;&lt;bits));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">match</span><span class=\"params\">(<span class=\"keyword\">uint32_t</span> bits, <span class=\"keyword\">uint32_t</span> match)</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> match_hash(hash, bits, match);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_temp</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pool &lt;= POOL_TEMP_START &amp;&amp; pool != INT64_MIN;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ls_meta</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pool == POOL_META;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">hobject_t</span> : snap(<span class=\"number\">0</span>), hash(<span class=\"number\">0</span>), max(<span class=\"literal\">false</span>), pool(INT64_MIN)&#123;</span><br><span class=\"line\">    build_hash_cache();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">hobject_t</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span> &amp;rhs) = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">  <span class=\"keyword\">hobject_t</span>(<span class=\"keyword\">hobject_t</span> &amp;&amp;rhs) = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">  <span class=\"keyword\">hobject_t</span>(hobject_t_max &amp;&amp;singleton) : <span class=\"keyword\">hobject_t</span>()&#123;</span><br><span class=\"line\">    max = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">hobject_t</span> &amp;<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span> &amp;rhs) = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">  <span class=\"keyword\">hobject_t</span> &amp;<span class=\"keyword\">operator</span>-(<span class=\"keyword\">hobject_t</span> &amp;&amp;rhs) = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">  <span class=\"keyword\">hobject_t</span> &amp;<span class=\"keyword\">operator</span>=(hobject_t_max &amp;&amp;singleton)&#123;</span><br><span class=\"line\">    *<span class=\"keyword\">this</span> = <span class=\"keyword\">hobject_t</span>();</span><br><span class=\"line\">    max = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//maximum stored value.</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> hobject_t_max <span class=\"title\">get_max</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hobject_t_max();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">hobject_t</span>(<span class=\"keyword\">object_t</span> oid, <span class=\"keyword\">const</span> strings key, <span class=\"keyword\">snapid_t</span> snap, <span class=\"keyword\">uint32_t</span> hash, <span class=\"keyword\">int64_t</span> pool, <span class=\"built_in\">string</span> nspace): oid(oid), snap(snap), hash(hash), max(<span class=\"literal\">false</span>),</span><br><span class=\"line\">    pool(pool), nspace(nspace), key(soid,oid.name == key ? <span class=\"built_in\">string</span>() : key)&#123;</span><br><span class=\"line\">      build_hash_cache();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// @return min hobject_t ret s.t. ret.hash == this-&gt;hash</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取边界</span></span><br><span class=\"line\">    <span class=\"keyword\">hobject_t</span> get_boundary() <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (is_max())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">hobject_t</span> ret;</span><br><span class=\"line\">      ret.set_hash(hash);</span><br><span class=\"line\">      ret.pool = pool;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">hobject_t</span> get_object_boundary() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(is_max())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">      <span class=\"keyword\">hobject_t</span> ret = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">      ret.snap = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">///@return head version of this hobject_t</span></span><br><span class=\"line\">    <span class=\"keyword\">hobject_t</span> get_head() <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">hobject_t</span> ret(*<span class=\"keyword\">this</span>);</span><br><span class=\"line\">      ret.snap = CEPH_NOSANP;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">///@return snapdir version of this hobject_t</span></span><br><span class=\"line\">    <span class=\"keyword\">hobject_t</span> get_snapdir() <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">hobject_t</span> ret(*<span class=\"keyword\">this</span>);</span><br><span class=\"line\">      ret.snap = CEPH_SNAPDIR;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">///@return true if object is head</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_head</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> snap == CEPH_NOSANP;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">///@return true if object is neither head nor snapdir nor max</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_snap</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> !is_max() &amp;&amp; !is_head() &amp;&amp; !is_snapdir();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">///@return true if the object should have a snapset in it's attrs</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">has_snapset</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> is_head() || is_snapdir();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Do not use when a particular hash function is need</span></span><br><span class=\"line\">    explicit hobject_t(const sobject_t &amp;o) : oid(o.oid), snap(o.snap), max(false), pool(POOL_META) &#123;</span><br><span class=\"line\">      set_hash(<span class=\"built_in\">std</span>::hash&lt;<span class=\"keyword\">sobject_t</span>&gt;()(o));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_max</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">      assert(!max ||(*<span class=\"keyword\">this</span> == <span class=\"keyword\">hobject_t</span>(<span class=\"keyword\">hobject_t</span>::get_max())));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_min</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//this needs to match how it's constructed</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> snap==<span class=\"number\">0</span> &amp;&amp;hash==<span class=\"number\">0</span> &amp;&amp; !max &amp;&amp; pool==INT64_MIN;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">uint32_t</span> _reverse_bits(<span class=\"keyword\">uint32_t</span> v)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reverse_bits(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">uint32_t</span> _reverse_nibbles(<span class=\"keyword\">uint32_t</span> retval)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _reverse_nibbles(retval);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Returns set S of strings such that for any object h.match(bits, mask), t</span></span><br><span class=\"line\"><span class=\"comment\">     * there is some string s\\f$in\\f$ S such thats is a prefix of h.to_str().</span></span><br><span class=\"line\"><span class=\"comment\">     * Furthermore, for any s $f\\in\\f$ S, s is a prefix of h.str() implies *</span></span><br><span class=\"line\"><span class=\"comment\">     * that h.match(bits, mask).</span></span><br><span class=\"line\"><span class=\"comment\">     **/</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt; get_prefixes(<span class=\"keyword\">uint32_t</span> bits, <span class=\"keyword\">uint32_t</span> mask, <span class=\"keyword\">int64_t</span> pool)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">uint32_t</span> len = bits;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(len % <span class=\"number\">4</span> <span class=\"comment\">/* nibbles */</span>) len++;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">set</span>&lt;<span class=\"keyword\">uint32_t</span>&gt; from;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (bits &lt; <span class=\"number\">32</span>)</span><br><span class=\"line\">        from.insert(mask &amp; ~((<span class=\"keyword\">uint32_t</span>)(~<span class=\"number\">0</span>) &lt;&lt; bits));</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(bits == <span class=\"number\">32</span>)</span><br><span class=\"line\">        from.insert(mask);</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        ceph_abort();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"built_in\">set</span>&lt;<span class=\"keyword\">uint32_t</span>&gt; to;</span><br><span class=\"line\">      fro(<span class=\"keyword\">uint32_t</span> i=bits; i&lt;len; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">uint32_t</span>&gt;::iterator j=from.begin(); j!=from.end(); ++j)&#123;</span><br><span class=\"line\">          to.insert(*j | (<span class=\"number\">1U</span>&lt;&lt;i));</span><br><span class=\"line\">          to.insert(*j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        to.swap(from);</span><br><span class=\"line\">        to.clear();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">char</span> buf[<span class=\"number\">20</span>];</span><br><span class=\"line\">      <span class=\"keyword\">char</span> *t = buf;</span><br><span class=\"line\">      <span class=\"keyword\">uint64_t</span> poolid(pool);</span><br><span class=\"line\"></span><br><span class=\"line\">      t += <span class=\"built_in\">snprintf</span>(t, <span class=\"keyword\">sizeof</span>(buf), <span class=\"string\">\"%.*llX\"</span>, <span class=\"number\">16</span>, (<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"keyword\">unsigned</span>)poolid);</span><br><span class=\"line\">      *(t++) = <span class=\"string\">'.'</span></span><br><span class=\"line\">      <span class=\"built_in\">string</span> poolstr(buf, t - buf);</span><br><span class=\"line\">      <span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt; ret;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"built_in\">set</span>&lt;<span class=\"keyword\">uint32_t</span>&gt;::iterator i=from.begin(); i != from.end(); ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span> revhash(<span class=\"keyword\">hobject_t</span>::_reverse_nibbles(*i));</span><br><span class=\"line\">        <span class=\"built_in\">snprintf</span>(buf, <span class=\"keyword\">sizeof</span>(buf), <span class=\"string\">\"%.*X\"</span>, (<span class=\"keyword\">int</span>)(<span class=\"keyword\">sizeof</span>(revhash))*<span class=\"number\">2</span>, revhash);</span><br><span class=\"line\">        ret.insert(poolstr + <span class=\"built_in\">string</span>(buf, len/<span class=\"number\">4</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//filestore nibble-based key</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> get_nibblewise_key_u32()  <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">      assert(!max);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> nibblewise_key_cache;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> get_nibblewise_key()  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> max ? <span class=\"number\">0x100000000</span>ull : nibblewise_key_cache;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// newer bit-reversed key</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> get_bitwise_key_u32() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">      assert(!max);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> hash_reverse_bits;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> get_bitwise_key() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> max ? <span class=\"number\">0x100000000</span>ull : hash_reverse_bits;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//please remeber to update set_bitwise_key_u32() also</span></span><br><span class=\"line\">    <span class=\"comment\">//once you change build_hash_cache()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build_hash_cache</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">      nibblewise_key_cache = _reverse_nibbles(hash);</span><br><span class=\"line\">      hash_reverse_bits = _reverse_bits(hash);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_bitwise_key_u32</span><span class=\"params\">(<span class=\"keyword\">uint32_t</span> value)</span></span>&#123;</span><br><span class=\"line\">      hash = _reverse_bits(value);</span><br><span class=\"line\">      <span class=\"comment\">//below is identical to build_hash_cache() and shall be</span></span><br><span class=\"line\">      <span class=\"comment\">//updated correspondingly if you change build_hash_cache()</span></span><br><span class=\"line\">      nibblewise_key_cache = _reverse_nibbles(hash);</span><br><span class=\"line\">      hash_reverse_bits = values;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; <span class=\"title\">get_effective_key</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(key.length())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> oid.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">hobject_t</span> make_temp_hobject(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; name) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">hobject_t</span>(<span class=\"keyword\">object_t</span>(name), <span class=\"string\">\"\"</span>, CEPH_NOSANP, hash, <span class=\"keyword\">hobject_t</span>::POOL_TEMP_START - pool, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">hobject_t</span> &amp;o)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">hobject_t</span> temp(o);</span><br><span class=\"line\">      o = (*<span class=\"keyword\">this</span>);</span><br><span class=\"line\">      (*<span class=\"keyword\">this</span>) = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;<span class=\"title\">get_namespace</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; </span><br><span class=\"line\">      <span class=\"keyword\">return</span> nspace;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">parse</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; s)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(bufferlist&amp; bl)</span> <span class=\"keyword\">const</span></span>; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(bufferlist::iterator&amp; bl)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(json_spirit::Value&amp; v)</span></span>; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(Formatter *f)</span> <span class=\"keyword\">const</span></span>; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">generate_test_instances</span><span class=\"params\">(<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">hobject_t</span>*&gt;&amp; o)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; r)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&gt;(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; r) &#123; </span><br><span class=\"line\">      <span class=\"keyword\">return</span> cmp(l, r) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&gt;=(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cmp(l, r) &gt;=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; r) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cmp(l, r) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;=(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp; r) &#123;     </span><br><span class=\"line\">      <span class=\"keyword\">return</span> cmp(l, r) &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp;, <span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp;); </span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp;, <span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span>&amp;);</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ghobject_t</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">WRITE_CLASS_ENCODE(<span class=\"keyword\">hboject_t</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>//ghobject_t</p>\n<ul>\n<li>在hobjec_t基础上，添加了generation 字段 和 shard_id 字段; 主要用于EC的rollback</li>\n<li>副本模式下， shard_id设置为NO_SHARD(-1), 这两个字段是无效的；<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ghobject_t</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">hboject_t</span> hobj;</span><br><span class=\"line\">  <span class=\"keyword\">gen_t</span> generation;</span><br><span class=\"line\">  <span class=\"keyword\">shard_id_t</span> shard_id;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> max;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">gen_t</span> NO_GEN=UINT64_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">ghobject_t</span>(): generation(NO_GEN), shard_id(<span class=\"keyword\">shard_id_t</span>::NO_SHARD), max(<span class=\"literal\">false</span>)&#123;&#125;</span><br><span class=\"line\">  explicit ghobject_t(const hobject_t &amp;obj) : hobj(obj), generation(NO_GEN),</span><br><span class=\"line\">    shard_id(<span class=\"keyword\">shard_id_t</span>::NO_SHARD), max(<span class=\"literal\">false</span>)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">ghobject_t</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">hobject_t</span> &amp;obj, <span class=\"keyword\">gen_t</span> gen, <span class=\"keyword\">shard_id_t</span> shard):</span><br><span class=\"line\">    hobj(obj), generation(gen), shard_id(shard), max(<span class=\"literal\">false</span>)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> ghobject_t <span class=\"title\">make_pgmeta</span><span class=\"params\">(<span class=\"keyword\">int64_t</span> pool, <span class=\"keyword\">uint32_t</span> hash, <span class=\"keyword\">shard_id_t</span> shard)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">hobject_t</span> h(<span class=\"keyword\">object_t</span>(), <span class=\"built_in\">string</span>(), CEPH_NOSANP, hash, pool, <span class=\"built_in\">string</span>());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">ghobject_t</span>(h, NO_GEN, shard);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_pgmeta</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//make sure we are distinct from hobject_t(), which has pool INT64_MIN</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hobj.pool &gt;= <span class=\"number\">0</span> &amp;&amp; hobj.oid,name.empty();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">match</span><span class=\"params\">(<span class=\"keyword\">uint32_t</span> bits, <span class=\"keyword\">uint32_t</span> match)</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hobj.match_hash(hobj.hash, bits, match);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/// @return min ghobject_t ret s.t. ret.hash == this-&gt;hash</span></span><br><span class=\"line\">  <span class=\"keyword\">ghobject_t</span> get_boundary() <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(hobj.is_max())</span><br><span class=\"line\">      <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">ghobject_t</span> ret;</span><br><span class=\"line\">    ret.hobj.set_hash(hobj.hash);</span><br><span class=\"line\">    ret.shard_id = shard_id;</span><br><span class=\"line\">    ret.hobj.pool = hobj.pool;</span><br><span class=\"line\">    retrun ret;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> get_nibblewise_key_u32() <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hobj.get_nibblewise_key_u32();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> get_nibblewise_key() <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hobj.get_nibblewise_key();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_degenerate</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> generation == NO_GEN &amp;&amp; shard_id == shard_id::NO_SHARD;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_no_gen</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> generation == NO_GEN;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_no_shard</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> shard_id == <span class=\"keyword\">shard_id_t</span>::NO_SHARD;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set_shard</span><span class=\"params\">(<span class=\"keyword\">shard_id_t</span> s)</span></span>&#123;</span><br><span class=\"line\">    shard_id = s;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">parse</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//maximum sorted value.</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> ghobject_t <span class=\"title\">get_max</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">ghobject_t</span> h;</span><br><span class=\"line\">    h.max = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    h.hobj = <span class=\"keyword\">hobject_t</span>::get_max();  <span class=\"comment\">//so that is_max() =&gt; hobj.is_max()</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> h;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_max</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">is_min</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span> == <span class=\"keyword\">ghobject_t</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">ghobject_t</span> &amp;o)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">ghobject_t</span> temp(o)</span><br><span class=\"line\">    o = (*<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    (*<span class=\"keyword\">this</span>) = temp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(bufferlist&amp; bl)</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(bufferlist::iterator&amp; bl)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(json_spirit::Value&amp; v)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> encoded_size() <span class=\"keyword\">const</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(Formatter *f)</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">generate_test_instances</span><span class=\"params\">(<span class=\"built_in\">list</span>&lt;<span class=\"keyword\">ghobject_t</span>*&gt;&amp; o)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; r)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&gt;(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; r)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cmp(l, r) &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&gt;=(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; r)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cmp(l, r) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; r)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cmp(l, r) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;=(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; l, <span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; r)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cmp(l, r) &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp;, <span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp;);</span><br><span class=\"line\">  <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp;, <span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">WRITE_CLASS_ENCODE(<span class=\"keyword\">ghobject_t</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>最直观的感觉是object id + xattr key; 两者结合一起，形成对象的键值key，但存在一个弊端<br>object id可能很长，当个对象存在很多属性的时候，object id不得不在key中出现多次，这必然会造成存储空间的浪费。<br>Ceph的FileStore分成了2步，第一步根据object id生成一个比较短的seq，然后seq + xattr key形成对象的某个属性的键值。</p>\n<p>omap不是通过计算从object id 获取seq的，他是首先根据object id, 存放一个Header类型的<br>数据结构到LevelDB，其中Header中的一个成员变量为seq。</p>\n<ul>\n<li>key: USER_PREFIX + header_key(header-&gt;seq) + XATTR_PREFIX + key</li>\n<li>value: header</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  - key: HOBJECT_TO_SEQ +ghobject_key(oid)</span></span><br><span class=\"line\"><span class=\"comment\">  - value: header (struct _Header)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">Header</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> seq;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> parent;</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> num_children;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">ghobject_t</span> oid;</span><br><span class=\"line\"></span><br><span class=\"line\">    SequencerPosition spos;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(bufferlist&amp; bl)</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">coll_t</span> unused;</span><br><span class=\"line\">      ENCODE_START(<span class=\"number\">2</span>, <span class=\"number\">1</span>, bl);</span><br><span class=\"line\">      ::encode(seq, bl);</span><br><span class=\"line\">      ::encode(parent, bl);</span><br><span class=\"line\">      ::encode(num_children, bl);</span><br><span class=\"line\">      ::encode(unused, bl);</span><br><span class=\"line\">      ::encode(oid, bl);</span><br><span class=\"line\">      ::encode(spos bl);</span><br><span class=\"line\">      ENCODE_FINISH(bl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(bufferlist::iterator&amp; bl)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">coll_t</span> unused;</span><br><span class=\"line\">      DECODE_START(<span class=\"number\">2</span>, bl);</span><br><span class=\"line\">      ::decode(seq, bl);</span><br><span class=\"line\">      ::decode(parent, bl);</span><br><span class=\"line\">      ::decode(num_children, bl);</span><br><span class=\"line\">      ::decode(unused, bl);</span><br><span class=\"line\">      ::decode(oid, bl);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (struct_v &gt;= <span class=\"number\">2</span>)</span><br><span class=\"line\">        ::decode(spos, bl);</span><br><span class=\"line\">      DECODE_FINISH(bl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(Formatter *f)</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">      f-&gt;dump_unsigned(<span class=\"string\">\"seq\"</span>, seq);</span><br><span class=\"line\">      f-&gt;dump_unsigned(<span class=\"string\">\"parent\"</span>, parent);</span><br><span class=\"line\">      f-&gt;dump_unsigned(<span class=\"string\">\"num_children\"</span>, num_children);</span><br><span class=\"line\">      f-&gt;dump_stream(<span class=\"string\">\"oid\"</span>) &lt;&lt; oid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">generate_test_instances</span><span class=\"params\">(<span class=\"built_in\">list</span>&lt;_Header*&gt;&amp; o )</span></span>&#123;</span><br><span class=\"line\">      o.push_back(<span class=\"keyword\">new</span> _Header);</span><br><span class=\"line\">      o.push_back(<span class=\"keyword\">new</span> _Header);</span><br><span class=\"line\">      o.back()-&gt;parent = <span class=\"number\">20</span>;</span><br><span class=\"line\">      o.back()-&gt;seq = <span class=\"number\">30</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _Header() : seq(<span class=\"number\">0</span>), parent(<span class=\"number\">0</span>), num_children(<span class=\"number\">1</span>) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>如果要获取某个对象的oid的某个属性的值，需要分成两步走:</p>\n<ul>\n<li>找到Header，从header中取出seq的值</li>\n<li>根据seq的值生成该属性对应的新的最终的键值，从LevelDB中取出value</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取对象oid的某个或者某几个属性的值</span></span><br><span class=\"line\"><span class=\"comment\">// os/filestore/DBObjectMap.cc</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> DBObjectMap::get_xattrs(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; oid, <span class=\"keyword\">const</span> <span class=\"built_in\">set</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; to_get, <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, bufferlist&gt;* out)&#123;</span><br><span class=\"line\">  <span class=\"function\">MapHeaderLock <span class=\"title\">hl</span><span class=\"params\">(<span class=\"keyword\">this</span>, oid)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">//第一步根据oid找到header</span></span><br><span class=\"line\">  Header header = lookup_map_header(hl, oid);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!header)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -ENOENT;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//根据找到的header中的seq值，社会你刚才属性的键，在levelDB中找到对应key的value</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> db-get(xattr_prefix(header), to_get, out);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> DBObjectMap::set_xattrs(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; oid, <span class=\"keyword\">const</span> <span class=\"built_in\">map</span>&lt;<span class=\"built_in\">string</span>, bufferlist&gt;&amp; to_set, <span class=\"keyword\">const</span> SequencerPosition *spos)&#123;</span><br><span class=\"line\">  KeyValueDB::Transaction t = db-&gt;get_transcation();</span><br><span class=\"line\">  <span class=\"function\">MapHeaderLock <span class=\"title\">hl</span><span class=\"params\">(<span class=\"keyword\">this</span>, oid)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">/*寻找oid对应的header，如若没有，则新建一个header*/</span></span><br><span class=\"line\">  Header header = lookup_create_map_header(hl, oid, t);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!header)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -EINVAL;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (check_spos(oid, header, spos))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*根据header中的seq，得到真正的键值，然后设置一个或者多个属性*/</span></span><br><span class=\"line\">  t-&gt;<span class=\"built_in\">set</span>(xattr_prefix(header), to_set);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> db-&gt;submit_transaction(t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> DBObjectMap::USER_PREFIX = <span class=\"string\">\"__USER__\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">string</span> DBObjectMap::XATTR_PREFIX= <span class=\"string\">\"__AXATTR__\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">string</span> DBObjectMap::header_key(<span class=\"keyword\">uint64_t</span> seq)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf[<span class=\"number\">100</span>];</span><br><span class=\"line\">  <span class=\"built_in\">snprintf</span>(buf, <span class=\"keyword\">sizeof</span>(buf), <span class=\"string\">\"%.*\"</span> PRId64, (<span class=\"keyword\">int</span>)(<span class=\"number\">2</span>*<span class=\"keyword\">sizeof</span>(seq)), seq);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">string</span>(buf);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">string</span> DBObjectMap::xattr_prefix(Header header)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> USER_PREFIX + header_key(header-&gt;seq) + XATTR_PREFIX;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"seq-生成过程\"><a href=\"#seq-生成过程\" class=\"headerlink\" title=\"seq 生成过程\"></a>seq 生成过程</h3><ul>\n<li>LevelDB中存放着一个特殊的全局意义的key-value</li>\n<li>key: SYS_PREFIX + GLOBAL_STATE_KEY </li>\n<li>value: State  <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// peersistent state for store @see generate_header</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">State</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> _u8 CUR_VERSION = <span class=\"number\">3</span>;</span><br><span class=\"line\">  __u8 v;</span><br><span class=\"line\">  <span class=\"keyword\">uint64_t</span> seq;</span><br><span class=\"line\">  <span class=\"comment\">// legacy is false when complete regions never used</span></span><br><span class=\"line\">  <span class=\"keyword\">bool</span> legacy;</span><br><span class=\"line\"></span><br><span class=\"line\">  State() : v(<span class=\"number\">0</span>), seq(<span class=\"number\">1</span>), legacy(<span class=\"literal\">false</span>)&#123;&#125;</span><br><span class=\"line\">  explicit State(uint64_t seq) : v(0), seq(seq), legacy(false)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(bufferlist&amp; bl)</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    ENCODE_START(<span class=\"number\">3</span>, <span class=\"number\">1</span>, bl);</span><br><span class=\"line\">    ::encode(v, bl);</span><br><span class=\"line\">    ::encode(seq, bl);</span><br><span class=\"line\">    ::encode(legacy, bl);</span><br><span class=\"line\">    ENCODE_FINISH(bl);    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(bufferlist::iterator &amp;bl)</span></span>&#123;</span><br><span class=\"line\">    DECODE_START(<span class=\"number\">3</span>, bl);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (struct_v &gt;=<span class=\"number\">2</span>)</span><br><span class=\"line\">      ::decode(v, bl);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      v = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ::decode(seq, bl);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(struct_v &gt;=<span class=\"number\">3</span>)</span><br><span class=\"line\">      ::decode(legacy, bl);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      legacy = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    DECODE_FINISH(bl);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dump</span><span class=\"params\">(Formatter* f)</span> <span class=\"keyword\">const</span></span>&#123;</span><br><span class=\"line\">    f-&gt;dump_unsigned(<span class=\"string\">\"v\"</span>, v);</span><br><span class=\"line\">    f-&gt;dump_unsigned(<span class=\"string\">\"seq\"</span>, seq);</span><br><span class=\"line\">    f-&gt;dump_unsigned(<span class=\"string\">\"legacy\"</span>, legacy);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">generate_test_instances</span><span class=\"params\">(<span class=\"built_in\">list</span>&lt;State*&gt;&amp; o)</span></span>&#123;</span><br><span class=\"line\">    o.push_back(<span class=\"keyword\">new</span> State(<span class=\"number\">0</span>));</span><br><span class=\"line\">    o.push_back(<span class=\"keyword\">new</span> State(<span class=\"number\">20</span>));</span><br><span class=\"line\">  &#125; state;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight c++\"><figcaption><span>该结构体只有一个成员变量，即seq，当产生新的Header的时候，会该值会递增，写入LevelDB</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DBObjectMap::Header DBObjectMap::_generate_new_header(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span>&amp; oid, Header parent)&#123;</span><br><span class=\"line\">  Header header = Header(<span class=\"keyword\">new</span> _Header(), RemoveOnDelete(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">  header-&gt;seq = state.seq++;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (parent)&#123;</span><br><span class=\"line\">    header-&gt;parent =  parent-&gt;seq;</span><br><span class=\"line\">    header-&gt;spos = parent-&gt;spos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  header-&gt;num_children = <span class=\"number\">1</span>;</span><br><span class=\"line\">  header-&gt;oid = oid;</span><br><span class=\"line\">  assert(!in_use.count(header-&gt;seq));</span><br><span class=\"line\">  in_use.insert(header-&gt;seq);</span><br><span class=\"line\"></span><br><span class=\"line\">  write_state();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> header;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//因为是全局的，为了防止竞争，需要加锁保护。</span></span><br><span class=\"line\"><span class=\"function\">Header <span class=\"title\">generate_new_header</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span> &amp;oid, Header parent)</span> </span>&#123;</span><br><span class=\"line\">    Mutex::<span class=\"function\">Locker <span class=\"title\">l</span><span class=\"params\">(header_lock)</span></span>;<span class=\"comment\">//加锁保护</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _generate_new_header(oid, parent);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">DBObjectMap::Header DBObjectMap::lookup_create_map_header(</span><br><span class=\"line\">  <span class=\"keyword\">const</span> MapHeaderLock &amp;hl, </span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">ghobject_t</span> &amp;oid,</span><br><span class=\"line\">  KeyValueDB::Transaction t)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Mutex::<span class=\"function\">Locker <span class=\"title\">l</span><span class=\"params\">(header_lock)</span></span>; <span class=\"comment\">// 加锁保护</span></span><br><span class=\"line\">  Header header = _lookup_map_header(hl, oid);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!header) &#123;</span><br><span class=\"line\">    header = _generate_new_header(oid, Header());                                                                                                      </span><br><span class=\"line\">    set_map_header(hl, oid, *header, t);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> header;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ceph-objectstore-tool-用法\"><a href=\"#ceph-objectstore-tool-用法\" class=\"headerlink\" title=\"ceph-objectstore-tool 用法\"></a>ceph-objectstore-tool 用法</h3><h3 id=\"rgw-s3-属性\"><a href=\"#rgw-s3-属性\" class=\"headerlink\" title=\"rgw s3 属性\"></a>rgw s3 属性</h3><p>rgw s3的额外属性：</p>\n<ul>\n<li>user</li>\n<li>bucket</li>\n<li>bucket.instance<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&lt;bucket&gt;指bucket name; &lt;marker&gt;指bucker id; &lt;user&gt;指user id</span></span><br><span class=\"line\">$ radosgw-admin metadata list</span><br><span class=\"line\">$ radosgw-admin metadata list bucket</span><br><span class=\"line\">$ radosgw-admin metadata list bucket.instance</span><br><span class=\"line\">$ radosgw-admin metadata list user</span><br><span class=\"line\"></span><br><span class=\"line\">$ radosgw-admin metadata get bucket:&lt;bucket&gt;</span><br><span class=\"line\">$ radosgw-admin metadata get bucket.instance:&lt;bucket&gt;:&lt;marker&gt;</span><br><span class=\"line\">$ radosgw-admin metadata get user:&lt;user&gt;   # get or set</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>user 数据被以<user>作为object name存储在default.rgw.meta pool中，其中namespace是user uid<br>bucket 数据以<bucket>作为object name存储在default.rgw.meta pool, 其中namespace：root</bucket></user></p>\n<p>bucket.instance 数据以.bucket.meta.<bucket>:<marker>作为 object name存储在default.rgw.meta pool中，其namespace是root。</marker></bucket></p>\n<h4 id=\"bucket属性\"><a href=\"#bucket属性\" class=\"headerlink\" title=\"bucket属性\"></a>bucket属性</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">radosgw-admin bucket stats --bucket=test</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"bucket\"</span>: <span class=\"string\">\"test\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"pool\"</span>: <span class=\"string\">\".rgw.buckets.zj-1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"index_pool\"</span>: <span class=\"string\">\".rgw.buckets.index\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"id\"</span>: <span class=\"string\">\"default.784974.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"marker\"</span>: <span class=\"string\">\"default.784974.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"owner\"</span>: <span class=\"string\">\"user-1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"ver\"</span>: <span class=\"string\">\"0#1901\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"master_ver\"</span>: <span class=\"string\">\"0#0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"mtime\"</span>: <span class=\"string\">\"2015-04-07 16:23:23.000000\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"max_marker\"</span>: <span class=\"string\">\"0#\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"usage\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"rgw.main\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"size_kb\"</span>: <span class=\"number\">1048870</span>,</span><br><span class=\"line\">            <span class=\"string\">\"size_kb_actual\"</span>: <span class=\"number\">1048908</span>,</span><br><span class=\"line\">            <span class=\"string\">\"num_objects\"</span>: <span class=\"number\">17</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"bucket_quota\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"enabled\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">\"max_size_kb\"</span>: <span class=\"number\">-1</span>,</span><br><span class=\"line\">        <span class=\"string\">\"max_objects\"</span>: <span class=\"number\">-1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>bucket的名称，所在的data pool, index pool, bucket id<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bucket_id</span><br><span class=\"line\">  - zone_name     --&gt;   <span class=\"keyword\">default</span></span><br><span class=\"line\">  - instance_id   --&gt;   <span class=\"number\">784974</span></span><br><span class=\"line\">  - bucket id     --&gt;   <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"bucket-index-属性\"><a href=\"#bucket-index-属性\" class=\"headerlink\" title=\"bucket index 属性\"></a>bucket index 属性</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rados -p .rgw.buckets.index ls - | grep <span class=\"string\">\"default.784974.1\"</span></span><br><span class=\"line\">.dir.<span class=\"keyword\">default</span><span class=\"number\">.784974</span><span class=\"number\">.1</span></span><br></pre></td></tr></table></figure>\n<p>bucket index object 名称为： .dir.{buckt id}</p>\n<h4 id=\"查看index-的keys\"><a href=\"#查看index-的keys\" class=\"headerlink\" title=\"查看index 的keys\"></a>查看index 的keys</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># rados -p .rgw.buckets.index listomapkeys .dir.default.784974.1</span></span><br><span class=\"line\">/demo/region.conf.json</span><br></pre></td></tr></table></figure>\n<h3 id=\"rgw-max-chunk-size-amp-rgw-obj-stripe-size\"><a href=\"#rgw-max-chunk-size-amp-rgw-obj-stripe-size\" class=\"headerlink\" title=\"rgw_max_chunk_size &amp; rgw_obj_stripe_size\"></a>rgw_max_chunk_size &amp; rgw_obj_stripe_size</h3><ul>\n<li>rgw_max_chunk_size : default: (524388) 512k<ul>\n<li>RadosGW下发到RADOS集群的单个IO的大小</li>\n<li>当写入的对象大小大于rgw_max_chunk_size:<ul>\n<li>rados层的一个对象，大小为实际大小；</li>\n<li>rados层的命名： {bucket_id}_{对象文件的名字}</li>\n</ul>\n</li>\n<li>当写入的对象大小大于rgw_max_chunk_size:<ul>\n<li>分成多种对象存储，<br>1、首对象（head_obj) 大小为rgw_max_chunk_size<br>2、中间对象： 大小为rgw_obj_stripe_size<br>3、尾对象：   小于或等于rgw_obj_stripe_size</li>\n<li>其它的对象按照rgw_obj_stripe_size切分成多个obj存入rados</li>\n<li>head object命名规则： {bucket_id}_{对象文件的名字}</li>\n<li>中间对象、尾对象命名：{bucket_id}<em>shadow</em>{长度为32的随机字符}_{条带编号, 从1起}</li>\n<li>head_obj需要将中间对象、尾对象关联起来：<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\"># rados -p .rgw.buckets listxattr default.ubuntu12.04.iso</span></span><br><span class=\"line\">    user.rgw.acl</span><br><span class=\"line\">    user.rgw.content_type</span><br><span class=\"line\">    user.rgw.etag</span><br><span class=\"line\">    user.rgw.idtag</span><br><span class=\"line\">    user.rgw.manifest</span><br><span class=\"line\">    user.rgw.x-amz-date</span><br><span class=\"line\"></span><br><span class=\"line\">    rados -p .rgw.buckets getxattr  <span class=\"keyword\">default</span><span class=\"number\">.11383165</span><span class=\"number\">.2</span>_scaler.iso  user.rgw.manifest  &gt; /root/scaler.iso.manifest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># ceph-dencoder type RGWObjManifest import /root/ubuntu12.iso.manifest decode dump_json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"objs\"</span>: [],</span><br><span class=\"line\">    <span class=\"string\">\"obj_size\"</span>: <span class=\"number\">2842374144</span>,     &lt;-----------------对象文件大小</span><br><span class=\"line\">    <span class=\"string\">\"explicit_objs\"</span>: <span class=\"string\">\"false\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"head_obj\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"bucket\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"bean_book\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"pool\"</span>: <span class=\"string\">\".rgw.buckets\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"data_extra_pool\"</span>: <span class=\"string\">\".rgw.buckets.extra\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"index_pool\"</span>: <span class=\"string\">\".rgw.buckets.index\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"marker\"</span>: <span class=\"string\">\"default.11383165.2\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"bucket_id\"</span>: <span class=\"string\">\"default.11383165.2\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"ns\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"object\"</span>: <span class=\"string\">\"scaler.iso\"</span>,         &lt;-----对象名</span><br><span class=\"line\">        <span class=\"string\">\"instance\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"head_size\"</span>: <span class=\"number\">524288</span>,</span><br><span class=\"line\">    <span class=\"string\">\"max_head_size\"</span>: <span class=\"number\">524288</span>,</span><br><span class=\"line\">    <span class=\"string\">\"prefix\"</span>: <span class=\"string\">\".mGwYpWb3FXieaaaDNdaPzfs546ysNnT_\"</span>,  &lt;---中间对象和尾对象的随机前缀</span><br><span class=\"line\">    <span class=\"string\">\"tail_bucket\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"name\"</span>: <span class=\"string\">\"bean_book\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"pool\"</span>: <span class=\"string\">\".rgw.buckets\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"data_extra_pool\"</span>: <span class=\"string\">\".rgw.buckets.extra\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"index_pool\"</span>: <span class=\"string\">\".rgw.buckets.index\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"marker\"</span>: <span class=\"string\">\"default.11383165.2\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"bucket_id\"</span>: <span class=\"string\">\"default.11383165.2\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"rules\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"key\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"string\">\"val\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">\"start_part_num\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"string\">\"start_ofs\"</span>: <span class=\"number\">524288</span>,</span><br><span class=\"line\">                <span class=\"string\">\"part_size\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"string\">\"stripe_max_size\"</span>: <span class=\"number\">4194304</span>,</span><br><span class=\"line\">                <span class=\"string\">\"override_prefix\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RGWObjManifest</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"ceph log","_content":"\n## dout\n\n```c++\n#define dout(v) ldout((g_ceph_context), v)\n\n#define ldout(cct, v) dout_impl(cct, dout_subsys, v) dout_prefix\n\n\n```","source":"_posts/ceph_log.md","raw":"---\n  title: ceph log\n---\n\n## dout\n\n```c++\n#define dout(v) ldout((g_ceph_context), v)\n\n#define ldout(cct, v) dout_impl(cct, dout_subsys, v) dout_prefix\n\n\n```","slug":"ceph_log","published":1,"date":"2018-09-21T07:16:42.209Z","updated":"2018-12-25T10:11:31.639Z","_id":"cjq3l8d4o00025shas208mina","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"dout\"><a href=\"#dout\" class=\"headerlink\" title=\"dout\"></a>dout</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> dout(v) ldout((g_ceph_context), v)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ldout(cct, v) dout_impl(cct, dout_subsys, v) dout_prefix</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"dout\"><a href=\"#dout\" class=\"headerlink\" title=\"dout\"></a>dout</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> dout(v) ldout((g_ceph_context), v)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ldout(cct, v) dout_impl(cct, dout_subsys, v) dout_prefix</span></span><br></pre></td></tr></table></figure>"},{"title":"go之基础重温","_content":"- 值语义\n     -  大多数类型基于值语义，包括基本类型：byte, int, bool, float32, float64 和string\n     - 复合类型： array, struct, pointer\n\n- 引用语义\n变量存储的是一个地址，这个地址存储最终的值。内存通常在堆上分配。通过GC回收。\n获取指针类型所指向的值，使用：\" * \" 取值符号 。\n\n    - 数组切片slice\n    - map\n    - channel\n    - interface\n    - 指针\n\n- new 和 make 区别\n    - new 用于值类型和用户自定义的类型（如struct）\n   ```go\n   new 内建函数原型：func new(Type)  *Type\n   new 返回指向类型的指针。\n```\n    -   make 用于内置（slice，map 和channel)\n    ```go\n   make内建函数原型： func make(t Type, size ...IntegerType) Type\n   make返回引用类型\n  ```\n\n在golang中，nil只能赋值给指针、channel、func、interface、map或slice类型的变量；\n不能直接使用nil值的slice 和map\n\n- Go中的struct与其他语言的类(class)有同等地位，Go中放弃了包括继承在内的大量面向对象特性，只保留了组合composition这个基础特性；\n- Go中未被初始化的值都被初始化为该类型的零值；\n\n```go\ntype Rect struct{\n  x int\n  y int\n}\n//初始化\nrect := new(Rect)\nrect := &Rect{}\nrect := &Rect{1,  2}\nrect := &Rect{\n  x: 1,\n  y: 2,\n}\n\n//约定俗成的规矩，而非强制\n/* 对象的创建通常由一个全局的创建函数完成，NewXXX来命名，表示构造函数 */\nfunc NewRect(x, y, width, height int) *Rect{\n  return &Rect{\n    x: x,\n    y: y,\n  }\n}\n```\n\n- 匿名组合\n```go\ntype Foo struct{\n    Rect\n    z int\n}\n\nfunc NewFoo(x, y, z) *Foo{\n  return &Foo{\n    Base: Base{x: x, y: y},\n    z: z,\n  }\n\n  //形式2， y后面的逗号\n  return &Foo{\n        Base: Base{\n            X: x,\n            Y: y,\n        },\n        z: z,\n    }\n}\nvar  f *Foo\nf.Base.Bfunc()\nf.Bfunc()\n```\n\n- 可见性\n\n  需要使某个符号对其他包可见，需要将该符号定义为以大写字母开头\n\n- interface 接口 \n- interface 赋值 \n```go\nfunc (this *Foo)add(size int){\n  this.X += size\n}\n\nfunc (this Foo)less(m int) bool {\n  return Foo.X > m\n}\n\ntype Add interface{\n  add(s int)\n  less(m int) bool\n}\n\nvar f = Foo{Base{X: 1, Y: 2}, 3}\nvar a Add = &foo        //pointer      (1)\nvar a Add = foo         // error       (2)\n\n 应该用语句(1)。原因在于，Go语言可以根据下面的函数：\nfunc (this Foo) less(m int) bool\n自动生成一个新的Less()方法：\nfunc (this *Foo) less(m int) bool {\nreturn (*this).less(m)\n}\n\n这样，类型*Foo就既存在less()方法，也存在add()方法，满足Add接口。而从另一方面来说，根据\nfunc (this *Foo) add(size int)\n这个函数无法自动生成以下这个成员方法：\nfunc (this Foo) add(size int) {\n  (&this).add(size)\n}\n因为(&this).add()改变的只是函数参数a，对外部实际要操作的对象并无影响，这不符合用\n户的预期。所以，Go语言不会自动为其生成该函数。因此，类型Foo只存在less()方法，\n缺少add()方法，不满足Add接口，故此上面的语句(2)不能赋值。\n```\n\n- 接口查询:\n\n```go\nvar f = Foo{Base{X:1, Y: 2}, 3}\nif f_, ok := f.(Add); ok{\n    ...\n}\n\nvar v1 interface{} = ...\nswitch v := v1.(type){\ncase int:\ncase string:\ndefault:\n...\n}\n```\n","source":"_posts/go_base.md","raw":"---\ntitle: go之基础重温\n---\n- 值语义\n     -  大多数类型基于值语义，包括基本类型：byte, int, bool, float32, float64 和string\n     - 复合类型： array, struct, pointer\n\n- 引用语义\n变量存储的是一个地址，这个地址存储最终的值。内存通常在堆上分配。通过GC回收。\n获取指针类型所指向的值，使用：\" * \" 取值符号 。\n\n    - 数组切片slice\n    - map\n    - channel\n    - interface\n    - 指针\n\n- new 和 make 区别\n    - new 用于值类型和用户自定义的类型（如struct）\n   ```go\n   new 内建函数原型：func new(Type)  *Type\n   new 返回指向类型的指针。\n```\n    -   make 用于内置（slice，map 和channel)\n    ```go\n   make内建函数原型： func make(t Type, size ...IntegerType) Type\n   make返回引用类型\n  ```\n\n在golang中，nil只能赋值给指针、channel、func、interface、map或slice类型的变量；\n不能直接使用nil值的slice 和map\n\n- Go中的struct与其他语言的类(class)有同等地位，Go中放弃了包括继承在内的大量面向对象特性，只保留了组合composition这个基础特性；\n- Go中未被初始化的值都被初始化为该类型的零值；\n\n```go\ntype Rect struct{\n  x int\n  y int\n}\n//初始化\nrect := new(Rect)\nrect := &Rect{}\nrect := &Rect{1,  2}\nrect := &Rect{\n  x: 1,\n  y: 2,\n}\n\n//约定俗成的规矩，而非强制\n/* 对象的创建通常由一个全局的创建函数完成，NewXXX来命名，表示构造函数 */\nfunc NewRect(x, y, width, height int) *Rect{\n  return &Rect{\n    x: x,\n    y: y,\n  }\n}\n```\n\n- 匿名组合\n```go\ntype Foo struct{\n    Rect\n    z int\n}\n\nfunc NewFoo(x, y, z) *Foo{\n  return &Foo{\n    Base: Base{x: x, y: y},\n    z: z,\n  }\n\n  //形式2， y后面的逗号\n  return &Foo{\n        Base: Base{\n            X: x,\n            Y: y,\n        },\n        z: z,\n    }\n}\nvar  f *Foo\nf.Base.Bfunc()\nf.Bfunc()\n```\n\n- 可见性\n\n  需要使某个符号对其他包可见，需要将该符号定义为以大写字母开头\n\n- interface 接口 \n- interface 赋值 \n```go\nfunc (this *Foo)add(size int){\n  this.X += size\n}\n\nfunc (this Foo)less(m int) bool {\n  return Foo.X > m\n}\n\ntype Add interface{\n  add(s int)\n  less(m int) bool\n}\n\nvar f = Foo{Base{X: 1, Y: 2}, 3}\nvar a Add = &foo        //pointer      (1)\nvar a Add = foo         // error       (2)\n\n 应该用语句(1)。原因在于，Go语言可以根据下面的函数：\nfunc (this Foo) less(m int) bool\n自动生成一个新的Less()方法：\nfunc (this *Foo) less(m int) bool {\nreturn (*this).less(m)\n}\n\n这样，类型*Foo就既存在less()方法，也存在add()方法，满足Add接口。而从另一方面来说，根据\nfunc (this *Foo) add(size int)\n这个函数无法自动生成以下这个成员方法：\nfunc (this Foo) add(size int) {\n  (&this).add(size)\n}\n因为(&this).add()改变的只是函数参数a，对外部实际要操作的对象并无影响，这不符合用\n户的预期。所以，Go语言不会自动为其生成该函数。因此，类型Foo只存在less()方法，\n缺少add()方法，不满足Add接口，故此上面的语句(2)不能赋值。\n```\n\n- 接口查询:\n\n```go\nvar f = Foo{Base{X:1, Y: 2}, 3}\nif f_, ok := f.(Add); ok{\n    ...\n}\n\nvar v1 interface{} = ...\nswitch v := v1.(type){\ncase int:\ncase string:\ndefault:\n...\n}\n```\n","slug":"go_base","published":1,"date":"2018-09-21T07:16:42.255Z","updated":"2018-09-21T07:16:42.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3l8d4p00035sha3cs7okq0","content":"<ul>\n<li><p>值语义</p>\n<ul>\n<li>大多数类型基于值语义，包括基本类型：byte, int, bool, float32, float64 和string</li>\n<li>复合类型： array, struct, pointer</li>\n</ul>\n</li>\n<li><p>引用语义<br>变量存储的是一个地址，这个地址存储最终的值。内存通常在堆上分配。通过GC回收。<br>获取指针类型所指向的值，使用：” * “ 取值符号 。</p>\n<ul>\n<li>数组切片slice</li>\n<li>map</li>\n<li>channel</li>\n<li>interface</li>\n<li>指针</li>\n</ul>\n</li>\n<li><p>new 和 make 区别</p>\n<ul>\n<li><p>new 用于值类型和用户自定义的类型（如struct）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">new</span> 内建函数原型：<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">new</span><span class=\"params\">(Type)</span>  *<span class=\"title\">Type</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">new</span> 返回指向类型的指针。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>make 用于内置（slice，map 和channel)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>内建函数原型： <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">make</span><span class=\"params\">(t Type, size ...IntegerType)</span> <span class=\"title\">Type</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">make</span>返回引用类型</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>在golang中，nil只能赋值给指针、channel、func、interface、map或slice类型的变量；<br>不能直接使用nil值的slice 和map</p>\n<ul>\n<li>Go中的struct与其他语言的类(class)有同等地位，Go中放弃了包括继承在内的大量面向对象特性，只保留了组合composition这个基础特性；</li>\n<li>Go中未被初始化的值都被初始化为该类型的零值；</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  x <span class=\"keyword\">int</span></span><br><span class=\"line\">  y <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\">rect := <span class=\"built_in\">new</span>(Rect)</span><br><span class=\"line\">rect := &amp;Rect&#123;&#125;</span><br><span class=\"line\">rect := &amp;Rect&#123;<span class=\"number\">1</span>,  <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">rect := &amp;Rect&#123;</span><br><span class=\"line\">  x: <span class=\"number\">1</span>,</span><br><span class=\"line\">  y: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//约定俗成的规矩，而非强制</span></span><br><span class=\"line\"><span class=\"comment\">/* 对象的创建通常由一个全局的创建函数完成，NewXXX来命名，表示构造函数 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewRect</span><span class=\"params\">(x, y, width, height <span class=\"keyword\">int</span>)</span> *<span class=\"title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Rect&#123;</span><br><span class=\"line\">    x: x,</span><br><span class=\"line\">    y: y,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>匿名组合</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Foo <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Rect</span><br><span class=\"line\">    z <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewFoo</span><span class=\"params\">(x, y, z)</span> *<span class=\"title\">Foo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Foo&#123;</span><br><span class=\"line\">    Base: Base&#123;x: x, y: y&#125;,</span><br><span class=\"line\">    z: z,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//形式2， y后面的逗号</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Foo&#123;</span><br><span class=\"line\">        Base: Base&#123;</span><br><span class=\"line\">            X: x,</span><br><span class=\"line\">            Y: y,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        z: z,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span>  f *Foo</span><br><span class=\"line\">f.Base.Bfunc()</span><br><span class=\"line\">f.Bfunc()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可见性</p>\n<p>需要使某个符号对其他包可见，需要将该符号定义为以大写字母开头</p>\n</li>\n<li><p>interface 接口 </p>\n</li>\n<li><p>interface 赋值 </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Foo)</span><span class=\"title\">add</span><span class=\"params\">(size <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">  this.X += size</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this Foo)</span><span class=\"title\">less</span><span class=\"params\">(m <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Foo.X &gt; m</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Add <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">  add(s <span class=\"keyword\">int</span>)</span><br><span class=\"line\">  less(m <span class=\"keyword\">int</span>) <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = Foo&#123;Base&#123;X: <span class=\"number\">1</span>, Y: <span class=\"number\">2</span>&#125;, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a Add = &amp;foo        <span class=\"comment\">//pointer      (1)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a Add = foo         <span class=\"comment\">// error       (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\"> 应该用语句(<span class=\"number\">1</span>)。原因在于，Go语言可以根据下面的函数：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this Foo)</span> <span class=\"title\">less</span><span class=\"params\">(m <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">自动生成一个新的<span class=\"title\">Less</span><span class=\"params\">()</span>方法：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(this *Foo)</span> <span class=\"title\">less</span><span class=\"params\">(m <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (*this).less(m)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">这样，类型*Foo就既存在less()方法，也存在add()方法，满足Add接口。而从另一方面来说，根据</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Foo)</span> <span class=\"title\">add</span><span class=\"params\">(size <span class=\"keyword\">int</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">这个函数无法自动生成以下这个成员方法：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(this Foo)</span> <span class=\"title\">add</span><span class=\"params\">(size <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  (&amp;this).add(size)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">因为(&amp;this).add()改变的只是函数参数a，对外部实际要操作的对象并无影响，这不符合用</span><br><span class=\"line\">户的预期。所以，Go语言不会自动为其生成该函数。因此，类型Foo只存在less()方法，</span><br><span class=\"line\">缺少add()方法，不满足Add接口，故此上面的语句(<span class=\"number\">2</span>)不能赋值。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接口查询:</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = Foo&#123;Base&#123;X:<span class=\"number\">1</span>, Y: <span class=\"number\">2</span>&#125;, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> f_, ok := f.(Add); ok&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> v1 <span class=\"keyword\">interface</span>&#123;&#125; = ...</span><br><span class=\"line\"><span class=\"keyword\">switch</span> v := v1.(<span class=\"keyword\">type</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">int</span>:</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">string</span>:</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>值语义</p>\n<ul>\n<li>大多数类型基于值语义，包括基本类型：byte, int, bool, float32, float64 和string</li>\n<li>复合类型： array, struct, pointer</li>\n</ul>\n</li>\n<li><p>引用语义<br>变量存储的是一个地址，这个地址存储最终的值。内存通常在堆上分配。通过GC回收。<br>获取指针类型所指向的值，使用：” * “ 取值符号 。</p>\n<ul>\n<li>数组切片slice</li>\n<li>map</li>\n<li>channel</li>\n<li>interface</li>\n<li>指针</li>\n</ul>\n</li>\n<li><p>new 和 make 区别</p>\n<ul>\n<li><p>new 用于值类型和用户自定义的类型（如struct）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">new</span> 内建函数原型：<span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">new</span><span class=\"params\">(Type)</span>  *<span class=\"title\">Type</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">new</span> 返回指向类型的指针。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>make 用于内置（slice，map 和channel)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>内建函数原型： <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">make</span><span class=\"params\">(t Type, size ...IntegerType)</span> <span class=\"title\">Type</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">make</span>返回引用类型</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>在golang中，nil只能赋值给指针、channel、func、interface、map或slice类型的变量；<br>不能直接使用nil值的slice 和map</p>\n<ul>\n<li>Go中的struct与其他语言的类(class)有同等地位，Go中放弃了包括继承在内的大量面向对象特性，只保留了组合composition这个基础特性；</li>\n<li>Go中未被初始化的值都被初始化为该类型的零值；</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  x <span class=\"keyword\">int</span></span><br><span class=\"line\">  y <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\">rect := <span class=\"built_in\">new</span>(Rect)</span><br><span class=\"line\">rect := &amp;Rect&#123;&#125;</span><br><span class=\"line\">rect := &amp;Rect&#123;<span class=\"number\">1</span>,  <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">rect := &amp;Rect&#123;</span><br><span class=\"line\">  x: <span class=\"number\">1</span>,</span><br><span class=\"line\">  y: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//约定俗成的规矩，而非强制</span></span><br><span class=\"line\"><span class=\"comment\">/* 对象的创建通常由一个全局的创建函数完成，NewXXX来命名，表示构造函数 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewRect</span><span class=\"params\">(x, y, width, height <span class=\"keyword\">int</span>)</span> *<span class=\"title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Rect&#123;</span><br><span class=\"line\">    x: x,</span><br><span class=\"line\">    y: y,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>匿名组合</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Foo <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Rect</span><br><span class=\"line\">    z <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewFoo</span><span class=\"params\">(x, y, z)</span> *<span class=\"title\">Foo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Foo&#123;</span><br><span class=\"line\">    Base: Base&#123;x: x, y: y&#125;,</span><br><span class=\"line\">    z: z,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//形式2， y后面的逗号</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Foo&#123;</span><br><span class=\"line\">        Base: Base&#123;</span><br><span class=\"line\">            X: x,</span><br><span class=\"line\">            Y: y,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        z: z,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span>  f *Foo</span><br><span class=\"line\">f.Base.Bfunc()</span><br><span class=\"line\">f.Bfunc()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可见性</p>\n<p>需要使某个符号对其他包可见，需要将该符号定义为以大写字母开头</p>\n</li>\n<li><p>interface 接口 </p>\n</li>\n<li><p>interface 赋值 </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Foo)</span><span class=\"title\">add</span><span class=\"params\">(size <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">  this.X += size</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this Foo)</span><span class=\"title\">less</span><span class=\"params\">(m <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Foo.X &gt; m</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Add <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">  add(s <span class=\"keyword\">int</span>)</span><br><span class=\"line\">  less(m <span class=\"keyword\">int</span>) <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = Foo&#123;Base&#123;X: <span class=\"number\">1</span>, Y: <span class=\"number\">2</span>&#125;, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a Add = &amp;foo        <span class=\"comment\">//pointer      (1)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a Add = foo         <span class=\"comment\">// error       (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\"> 应该用语句(<span class=\"number\">1</span>)。原因在于，Go语言可以根据下面的函数：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this Foo)</span> <span class=\"title\">less</span><span class=\"params\">(m <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">自动生成一个新的<span class=\"title\">Less</span><span class=\"params\">()</span>方法：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(this *Foo)</span> <span class=\"title\">less</span><span class=\"params\">(m <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (*this).less(m)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">这样，类型*Foo就既存在less()方法，也存在add()方法，满足Add接口。而从另一方面来说，根据</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Foo)</span> <span class=\"title\">add</span><span class=\"params\">(size <span class=\"keyword\">int</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">这个函数无法自动生成以下这个成员方法：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(this Foo)</span> <span class=\"title\">add</span><span class=\"params\">(size <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  (&amp;this).add(size)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">因为(&amp;this).add()改变的只是函数参数a，对外部实际要操作的对象并无影响，这不符合用</span><br><span class=\"line\">户的预期。所以，Go语言不会自动为其生成该函数。因此，类型Foo只存在less()方法，</span><br><span class=\"line\">缺少add()方法，不满足Add接口，故此上面的语句(<span class=\"number\">2</span>)不能赋值。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接口查询:</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = Foo&#123;Base&#123;X:<span class=\"number\">1</span>, Y: <span class=\"number\">2</span>&#125;, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> f_, ok := f.(Add); ok&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> v1 <span class=\"keyword\">interface</span>&#123;&#125; = ...</span><br><span class=\"line\"><span class=\"keyword\">switch</span> v := v1.(<span class=\"keyword\">type</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">int</span>:</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">string</span>:</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"design model 之 subcribe/publish","_content":"### 简单工厂模式\n```go\ntype sayer interface {\n    say()\n}\n\ntype man struct{\n\n}\n\nfunc (m *man)say(){\n    fmt.Printf(\"I am man\")\n}\n\ntype woman struct{\n\n}\n\nfunc (w *woman)say(){\n    fmt.Printf(\"I am woman\")\n}\n\nfunc factory(t string) sayer{\n    if t==\"man\" {\n        return &man{}\n    }else{\n        return &woman{}\n    }\n}\n\nfunc main(){\n    s := factory(\"man\")\n    s.say()\n}\n```","source":"_posts/design.md","raw":"---\n  title: design model 之 subcribe/publish \n---\n### 简单工厂模式\n```go\ntype sayer interface {\n    say()\n}\n\ntype man struct{\n\n}\n\nfunc (m *man)say(){\n    fmt.Printf(\"I am man\")\n}\n\ntype woman struct{\n\n}\n\nfunc (w *woman)say(){\n    fmt.Printf(\"I am woman\")\n}\n\nfunc factory(t string) sayer{\n    if t==\"man\" {\n        return &man{}\n    }else{\n        return &woman{}\n    }\n}\n\nfunc main(){\n    s := factory(\"man\")\n    s.say()\n}\n```","slug":"design","published":1,"date":"2018-11-09T09:51:31.199Z","updated":"2018-11-19T03:30:00.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3l8d4q00045shak3a7tmmh","content":"<h3 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> sayer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    say()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> man <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *man)</span><span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"I am man\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> woman <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *woman)</span><span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"I am woman\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">factory</span><span class=\"params\">(t <span class=\"keyword\">string</span>)</span> <span class=\"title\">sayer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> t==<span class=\"string\">\"man\"</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &amp;man&#123;&#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &amp;woman&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    s := factory(<span class=\"string\">\"man\"</span>)</span><br><span class=\"line\">    s.say()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> sayer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    say()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> man <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *man)</span><span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"I am man\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> woman <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *woman)</span><span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"I am woman\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">factory</span><span class=\"params\">(t <span class=\"keyword\">string</span>)</span> <span class=\"title\">sayer</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> t==<span class=\"string\">\"man\"</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &amp;man&#123;&#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &amp;woman&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    s := factory(<span class=\"string\">\"man\"</span>)</span><br><span class=\"line\">    s.say()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"cache lru","_content":"\n### lru\n\n```golang\npackage lru\n\n//LRU Cache\nimport (\n    \"container/list\"\n)\n\ntype CacheNode struct {\n    key   interface{}\n    value interface{}\n}\n\nfunc NewCacheNode(k, v interface{}) *CacheNode {\n    return &CacheNode{k, v}\n}\n\ntype Lru struct {\n    capacity int\n    dlist    *list.List\n    cacheMap map[interface{}]*list.Element\n}\n\nfunc NewLru(cap int) *Lru {\n    return &Lru{\n        capacity: cap,\n        dlist:    list.New(),\n        cacheMap: make(map[interface{}]*list.Element),\n    }\n}\n\nfunc (lru *Lru) Size() int {\n    return lru.dlist.Len()\n}\n\nfunc (lru *Lru) Set(k, v interface{}) error {\n    if lru.dlist == nil {\n        return error.New(\"lrucache need init\")\n    }\n\n    //key exist, movetoFront, update value\n    if pElement, ok := lru.cacheMap[k]; ok {\n      lru.dlist.MoveToFront(pElement)\n      pElement.Value.(*CacheNode).Value = v\n      return nil\n  }\n\n  //not exist\n  newElement := lru.dlist.PushFront(&CacheNode{k, v})\n  lru.cacheMap[k] = newElement\n\n  if lru.dlist.Len() > lru.capacity {\n      lastElement := lru.dlist.Back()\n      if lastElement == nil {\n          return nil\n      }\n\n      cacheNode := lastElement.Value.(*CacheNode)\n      delete(lru.cacheMap, cacheNode.key)\n      lru.dlist.Remove(lastElement)\n  }\n  return nil\n}\n\nfunc (lru *Lru) Get(k interface{}) (v interface{}, err error) {\n  if lru.cacheMap == nil {\n      return v, errors.New(\"LRUCache need init\")\n  }\n\n  if pElement, ok := lru.cacheMap[k]; ok {\n      lru.dlist.MoveToFront(pElement)\n      return pElement.Value.(*CacheNode).Value, nil\n  }\n  return v, nil\n}\n\nfunc (lru *LRUCache) Remove(k interface{}) bool {\n  if lru.cacheMap == nil {\n      return false\n  }\n\n  if pElement, ok := lru.cacheMap[k]; ok {\n      cacheNode := pElement.Value.(*CacheNode)\n      delete(lru.cacheMap, cacheNode.Key)\n      lru.dlist.Remove(pElement)\n      return true\n  }\n  return false\n}\n```\n","source":"_posts/go_cache_lru.md","raw":"---\n    title: cache lru\n---\n\n### lru\n\n```golang\npackage lru\n\n//LRU Cache\nimport (\n    \"container/list\"\n)\n\ntype CacheNode struct {\n    key   interface{}\n    value interface{}\n}\n\nfunc NewCacheNode(k, v interface{}) *CacheNode {\n    return &CacheNode{k, v}\n}\n\ntype Lru struct {\n    capacity int\n    dlist    *list.List\n    cacheMap map[interface{}]*list.Element\n}\n\nfunc NewLru(cap int) *Lru {\n    return &Lru{\n        capacity: cap,\n        dlist:    list.New(),\n        cacheMap: make(map[interface{}]*list.Element),\n    }\n}\n\nfunc (lru *Lru) Size() int {\n    return lru.dlist.Len()\n}\n\nfunc (lru *Lru) Set(k, v interface{}) error {\n    if lru.dlist == nil {\n        return error.New(\"lrucache need init\")\n    }\n\n    //key exist, movetoFront, update value\n    if pElement, ok := lru.cacheMap[k]; ok {\n      lru.dlist.MoveToFront(pElement)\n      pElement.Value.(*CacheNode).Value = v\n      return nil\n  }\n\n  //not exist\n  newElement := lru.dlist.PushFront(&CacheNode{k, v})\n  lru.cacheMap[k] = newElement\n\n  if lru.dlist.Len() > lru.capacity {\n      lastElement := lru.dlist.Back()\n      if lastElement == nil {\n          return nil\n      }\n\n      cacheNode := lastElement.Value.(*CacheNode)\n      delete(lru.cacheMap, cacheNode.key)\n      lru.dlist.Remove(lastElement)\n  }\n  return nil\n}\n\nfunc (lru *Lru) Get(k interface{}) (v interface{}, err error) {\n  if lru.cacheMap == nil {\n      return v, errors.New(\"LRUCache need init\")\n  }\n\n  if pElement, ok := lru.cacheMap[k]; ok {\n      lru.dlist.MoveToFront(pElement)\n      return pElement.Value.(*CacheNode).Value, nil\n  }\n  return v, nil\n}\n\nfunc (lru *LRUCache) Remove(k interface{}) bool {\n  if lru.cacheMap == nil {\n      return false\n  }\n\n  if pElement, ok := lru.cacheMap[k]; ok {\n      cacheNode := pElement.Value.(*CacheNode)\n      delete(lru.cacheMap, cacheNode.Key)\n      lru.dlist.Remove(pElement)\n      return true\n  }\n  return false\n}\n```\n","slug":"go_cache_lru","published":1,"date":"2018-09-21T07:16:42.262Z","updated":"2018-09-21T07:16:42.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3l8d4q00055shaaxspi6lt","content":"<h3 id=\"lru\"><a href=\"#lru\" class=\"headerlink\" title=\"lru\"></a>lru</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lru</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//LRU Cache</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"container/list\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> CacheNode <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    key   <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">    value <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewCacheNode</span><span class=\"params\">(k, v <span class=\"keyword\">interface</span>&#123;&#125;)</span> *<span class=\"title\">CacheNode</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;CacheNode&#123;k, v&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Lru <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    capacity <span class=\"keyword\">int</span></span><br><span class=\"line\">    dlist    *list.List</span><br><span class=\"line\">    cacheMap <span class=\"keyword\">map</span>[<span class=\"keyword\">interface</span>&#123;&#125;]*list.Element</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewLru</span><span class=\"params\">(<span class=\"built_in\">cap</span> <span class=\"keyword\">int</span>)</span> *<span class=\"title\">Lru</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;Lru&#123;</span><br><span class=\"line\">        capacity: <span class=\"built_in\">cap</span>,</span><br><span class=\"line\">        dlist:    list.New(),</span><br><span class=\"line\">        cacheMap: <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">interface</span>&#123;&#125;]*list.Element),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lru *Lru)</span> <span class=\"title\">Size</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lru.dlist.Len()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lru *Lru)</span> <span class=\"title\">Set</span><span class=\"params\">(k, v <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> lru.dlist == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> error.New(<span class=\"string\">\"lrucache need init\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//key exist, movetoFront, update value</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> pElement, ok := lru.cacheMap[k]; ok &#123;</span><br><span class=\"line\">      lru.dlist.MoveToFront(pElement)</span><br><span class=\"line\">      pElement.Value.(*CacheNode).Value = v</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//not exist</span></span><br><span class=\"line\">  newElement := lru.dlist.PushFront(&amp;CacheNode&#123;k, v&#125;)</span><br><span class=\"line\">  lru.cacheMap[k] = newElement</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> lru.dlist.Len() &gt; lru.capacity &#123;</span><br><span class=\"line\">      lastElement := lru.dlist.Back()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> lastElement == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      cacheNode := lastElement.Value.(*CacheNode)</span><br><span class=\"line\">      <span class=\"built_in\">delete</span>(lru.cacheMap, cacheNode.key)</span><br><span class=\"line\">      lru.dlist.Remove(lastElement)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lru *Lru)</span> <span class=\"title\">Get</span><span class=\"params\">(k <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(v <span class=\"keyword\">interface</span>&#123;&#125;, err error)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> lru.cacheMap == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v, errors.New(<span class=\"string\">\"LRUCache need init\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> pElement, ok := lru.cacheMap[k]; ok &#123;</span><br><span class=\"line\">      lru.dlist.MoveToFront(pElement)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> pElement.Value.(*CacheNode).Value, <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lru *LRUCache)</span> <span class=\"title\">Remove</span><span class=\"params\">(k <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> lru.cacheMap == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> pElement, ok := lru.cacheMap[k]; ok &#123;</span><br><span class=\"line\">      cacheNode := pElement.Value.(*CacheNode)</span><br><span class=\"line\">      <span class=\"built_in\">delete</span>(lru.cacheMap, cacheNode.Key)</span><br><span class=\"line\">      lru.dlist.Remove(pElement)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"lru\"><a href=\"#lru\" class=\"headerlink\" title=\"lru\"></a>lru</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lru</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//LRU Cache</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"container/list\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> CacheNode <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    key   <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">    value <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewCacheNode</span><span class=\"params\">(k, v <span class=\"keyword\">interface</span>&#123;&#125;)</span> *<span class=\"title\">CacheNode</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;CacheNode&#123;k, v&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Lru <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    capacity <span class=\"keyword\">int</span></span><br><span class=\"line\">    dlist    *list.List</span><br><span class=\"line\">    cacheMap <span class=\"keyword\">map</span>[<span class=\"keyword\">interface</span>&#123;&#125;]*list.Element</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewLru</span><span class=\"params\">(<span class=\"built_in\">cap</span> <span class=\"keyword\">int</span>)</span> *<span class=\"title\">Lru</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;Lru&#123;</span><br><span class=\"line\">        capacity: <span class=\"built_in\">cap</span>,</span><br><span class=\"line\">        dlist:    list.New(),</span><br><span class=\"line\">        cacheMap: <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">interface</span>&#123;&#125;]*list.Element),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lru *Lru)</span> <span class=\"title\">Size</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lru.dlist.Len()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lru *Lru)</span> <span class=\"title\">Set</span><span class=\"params\">(k, v <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> lru.dlist == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> error.New(<span class=\"string\">\"lrucache need init\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//key exist, movetoFront, update value</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> pElement, ok := lru.cacheMap[k]; ok &#123;</span><br><span class=\"line\">      lru.dlist.MoveToFront(pElement)</span><br><span class=\"line\">      pElement.Value.(*CacheNode).Value = v</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//not exist</span></span><br><span class=\"line\">  newElement := lru.dlist.PushFront(&amp;CacheNode&#123;k, v&#125;)</span><br><span class=\"line\">  lru.cacheMap[k] = newElement</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> lru.dlist.Len() &gt; lru.capacity &#123;</span><br><span class=\"line\">      lastElement := lru.dlist.Back()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> lastElement == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      cacheNode := lastElement.Value.(*CacheNode)</span><br><span class=\"line\">      <span class=\"built_in\">delete</span>(lru.cacheMap, cacheNode.key)</span><br><span class=\"line\">      lru.dlist.Remove(lastElement)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lru *Lru)</span> <span class=\"title\">Get</span><span class=\"params\">(k <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(v <span class=\"keyword\">interface</span>&#123;&#125;, err error)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> lru.cacheMap == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> v, errors.New(<span class=\"string\">\"LRUCache need init\"</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> pElement, ok := lru.cacheMap[k]; ok &#123;</span><br><span class=\"line\">      lru.dlist.MoveToFront(pElement)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> pElement.Value.(*CacheNode).Value, <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(lru *LRUCache)</span> <span class=\"title\">Remove</span><span class=\"params\">(k <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> lru.cacheMap == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> pElement, ok := lru.cacheMap[k]; ok &#123;</span><br><span class=\"line\">      cacheNode := pElement.Value.(*CacheNode)</span><br><span class=\"line\">      <span class=\"built_in\">delete</span>(lru.cacheMap, cacheNode.Key)</span><br><span class=\"line\">      lru.dlist.Remove(pElement)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"c++11基础整理","_content":"\n### 关键字：\n- override： 确保成员函数为虚并覆盖基类的虚函数\n    + 用于标注在派生类函数中\n    + 该函数必须和基类的函数有相同的签名(即参数，返回值，const等一致)\n    + 在基类中，该函数必须声明为virtual\n    \n- final: 一旦成员虚函数被声明为final，派生类不能再覆盖它\n    + 表面它的派生类不能再覆盖写该成员函数；\n    + 该函数在其基类声明必须为virutal\n\n```c++\nstruct A\n{\n    virtual void foo();\n    void bar();\n    void foo2();\n};\n \nstruct B : A\n{\n    void foo() const override; // 错误： B::foo 不覆写 A::foo\n                               // （签名不匹配）\n    void foo() override;       // OK ： B::foo 覆写 A::foo\n    void bar() override;       // 错误： A::bar 非虚\n    void foo2();               // OK, 运行多态时不能覆盖基类函数\n};\n```\n```c++\n    struct Base\n    {\n        virtual void foo();\n    };\n     \n    struct A : Base\n    {\n        void foo() final; // A::foo 被覆写且是最终覆写\n        void bar() final; // 错误：非虚函数不能被覆写或是 final\n    };\n     \n    struct B final : A // struct B 为 final\n    {\n        void foo() override; // 错误： foo 不能被覆写，因为它在 A 中是 final\n    };\n     \n    struct C : B // 错误： B 为 final\n    {\n    };\n```\n\n### NULL 与 nullptr\n\n- NULL是一个宏，值为0；\n- typedef decltype(nullptr) nullptr_t;\n\n```c++\nvoid foo(int);      // (1)\nvoid foo(void*);    // (2)\n\nfoo(NULL);      //期望调用（2），但实际上模板推断为（1）\nfoo(nullptr);   //模板推断为（2）\n```\n\n\n关联关系(人与气候)，聚合关系（人与人群）、组合关系（人和脑袋），依赖关系（人和空气）\n\n","source":"_posts/c++11_base.md","raw":"---\n title: c++11基础整理\n---\n\n### 关键字：\n- override： 确保成员函数为虚并覆盖基类的虚函数\n    + 用于标注在派生类函数中\n    + 该函数必须和基类的函数有相同的签名(即参数，返回值，const等一致)\n    + 在基类中，该函数必须声明为virtual\n    \n- final: 一旦成员虚函数被声明为final，派生类不能再覆盖它\n    + 表面它的派生类不能再覆盖写该成员函数；\n    + 该函数在其基类声明必须为virutal\n\n```c++\nstruct A\n{\n    virtual void foo();\n    void bar();\n    void foo2();\n};\n \nstruct B : A\n{\n    void foo() const override; // 错误： B::foo 不覆写 A::foo\n                               // （签名不匹配）\n    void foo() override;       // OK ： B::foo 覆写 A::foo\n    void bar() override;       // 错误： A::bar 非虚\n    void foo2();               // OK, 运行多态时不能覆盖基类函数\n};\n```\n```c++\n    struct Base\n    {\n        virtual void foo();\n    };\n     \n    struct A : Base\n    {\n        void foo() final; // A::foo 被覆写且是最终覆写\n        void bar() final; // 错误：非虚函数不能被覆写或是 final\n    };\n     \n    struct B final : A // struct B 为 final\n    {\n        void foo() override; // 错误： foo 不能被覆写，因为它在 A 中是 final\n    };\n     \n    struct C : B // 错误： B 为 final\n    {\n    };\n```\n\n### NULL 与 nullptr\n\n- NULL是一个宏，值为0；\n- typedef decltype(nullptr) nullptr_t;\n\n```c++\nvoid foo(int);      // (1)\nvoid foo(void*);    // (2)\n\nfoo(NULL);      //期望调用（2），但实际上模板推断为（1）\nfoo(nullptr);   //模板推断为（2）\n```\n\n\n关联关系(人与气候)，聚合关系（人与人群）、组合关系（人和脑袋），依赖关系（人和空气）\n\n","slug":"c++11_base","published":1,"date":"2018-10-08T08:05:06.209Z","updated":"2018-12-05T02:58:59.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3l8d4r00065shabmnjpnz6","content":"<h3 id=\"关键字：\"><a href=\"#关键字：\" class=\"headerlink\" title=\"关键字：\"></a>关键字：</h3><ul>\n<li><p>override： 确保成员函数为虚并覆盖基类的虚函数</p>\n<ul>\n<li>用于标注在派生类函数中</li>\n<li>该函数必须和基类的函数有相同的签名(即参数，返回值，const等一致)</li>\n<li>在基类中，该函数必须声明为virtual</li>\n</ul>\n</li>\n<li><p>final: 一旦成员虚函数被声明为final，派生类不能再覆盖它</p>\n<ul>\n<li>表面它的派生类不能再覆盖写该成员函数；</li>\n<li>该函数在其基类声明必须为virutal</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">B</span> :</span> A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> override</span>; <span class=\"comment\">// 错误： B::foo 不覆写 A::foo</span></span><br><span class=\"line\">                               <span class=\"comment\">// （签名不匹配）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> override</span>;       <span class=\"comment\">// OK ： B::foo 覆写 A::foo</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bar</span><span class=\"params\">()</span> override</span>;       <span class=\"comment\">// 错误： A::bar 非虚</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo2</span><span class=\"params\">()</span></span>;               <span class=\"comment\">// OK, 运行多态时不能覆盖基类函数</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Base</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span> :</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> final</span>; <span class=\"comment\">// A::foo 被覆写且是最终覆写</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bar</span><span class=\"params\">()</span> final</span>; <span class=\"comment\">// 错误：非虚函数不能被覆写或是 final</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">B</span> <span class=\"title\">final</span> :</span> A <span class=\"comment\">// struct B 为 final</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> override</span>; <span class=\"comment\">// 错误： foo 不能被覆写，因为它在 A 中是 final</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">C</span> :</span> B <span class=\"comment\">// 错误： B 为 final</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"NULL-与-nullptr\"><a href=\"#NULL-与-nullptr\" class=\"headerlink\" title=\"NULL 与 nullptr\"></a>NULL 与 nullptr</h3><ul>\n<li>NULL是一个宏，值为0；</li>\n<li>typedef decltype(nullptr) nullptr_t;</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;      <span class=\"comment\">// (1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">void</span>*)</span></span>;    <span class=\"comment\">// (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">foo(<span class=\"literal\">NULL</span>);      <span class=\"comment\">//期望调用（2），但实际上模板推断为（1）</span></span><br><span class=\"line\">foo(<span class=\"literal\">nullptr</span>);   <span class=\"comment\">//模板推断为（2）</span></span><br></pre></td></tr></table></figure>\n<p>关联关系(人与气候)，聚合关系（人与人群）、组合关系（人和脑袋），依赖关系（人和空气）</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关键字：\"><a href=\"#关键字：\" class=\"headerlink\" title=\"关键字：\"></a>关键字：</h3><ul>\n<li><p>override： 确保成员函数为虚并覆盖基类的虚函数</p>\n<ul>\n<li>用于标注在派生类函数中</li>\n<li>该函数必须和基类的函数有相同的签名(即参数，返回值，const等一致)</li>\n<li>在基类中，该函数必须声明为virtual</li>\n</ul>\n</li>\n<li><p>final: 一旦成员虚函数被声明为final，派生类不能再覆盖它</p>\n<ul>\n<li>表面它的派生类不能再覆盖写该成员函数；</li>\n<li>该函数在其基类声明必须为virutal</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bar</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo2</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">B</span> :</span> A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> override</span>; <span class=\"comment\">// 错误： B::foo 不覆写 A::foo</span></span><br><span class=\"line\">                               <span class=\"comment\">// （签名不匹配）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> override</span>;       <span class=\"comment\">// OK ： B::foo 覆写 A::foo</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bar</span><span class=\"params\">()</span> override</span>;       <span class=\"comment\">// 错误： A::bar 非虚</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo2</span><span class=\"params\">()</span></span>;               <span class=\"comment\">// OK, 运行多态时不能覆盖基类函数</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Base</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span> :</span> Base</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> final</span>; <span class=\"comment\">// A::foo 被覆写且是最终覆写</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bar</span><span class=\"params\">()</span> final</span>; <span class=\"comment\">// 错误：非虚函数不能被覆写或是 final</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">B</span> <span class=\"title\">final</span> :</span> A <span class=\"comment\">// struct B 为 final</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">()</span> override</span>; <span class=\"comment\">// 错误： foo 不能被覆写，因为它在 A 中是 final</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">C</span> :</span> B <span class=\"comment\">// 错误： B 为 final</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"NULL-与-nullptr\"><a href=\"#NULL-与-nullptr\" class=\"headerlink\" title=\"NULL 与 nullptr\"></a>NULL 与 nullptr</h3><ul>\n<li>NULL是一个宏，值为0；</li>\n<li>typedef decltype(nullptr) nullptr_t;</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;      <span class=\"comment\">// (1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">void</span>*)</span></span>;    <span class=\"comment\">// (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">foo(<span class=\"literal\">NULL</span>);      <span class=\"comment\">//期望调用（2），但实际上模板推断为（1）</span></span><br><span class=\"line\">foo(<span class=\"literal\">nullptr</span>);   <span class=\"comment\">//模板推断为（2）</span></span><br></pre></td></tr></table></figure>\n<p>关联关系(人与气候)，聚合关系（人与人群）、组合关系（人和脑袋），依赖关系（人和空气）</p>\n"},{"title":"Golang反射包的实现原理（The Laws of Reflection)","_content":"\n### 类型和接口(Types and interfaces)\n\n因为反射是建立在类型系统(type system)上的。所以我们从Go的类型入手\n- Go是静态类型化的。每个变量都有一个静态类型\n```go\ntype MyInt int\n\nvar i int\nvar j MyInt\n```\ni的类型就是int，而j的类型就是MyInt；这里的变量i和j具有不同的静态变量，虽然他们拥有相同的底层类型(underlying type),如果不显示的进行强制类型转换他们是不能相互赋值的；\n\n类型(type)中非常重要的一类(category)就是接口类型(interface type); 一个接口就表示一组确定的方法（method）集合。一个接口变量能存储任意的具体值（这里的具体concrete就是指非接口的non-interface)，只要这个具体值所属的类型实现了这个接口的所有方法。\n\n一个大家都很熟悉的例子是io.Reader和io.Writer，类型Reader和类型Writer来自io包:\n```go\ntype Reader interface{\n  Read(p []byte) (n int, err error)\n}\n\ntype Writer interface{\n  Write(p []byte)(n int, err error)\n}\n```\n实现了上面的Read方法（或Write方法）的任意类型都可以说实现了io.Reader接口（或io.Writer接口)。 这就意味着io.Reader接口变量能够保存任意Read方法的类型所定义的值；\n\n```go\nvar r io.Reader\nr = os.Stdin\nr = bufio.NewReader(r)\nr = new(bytes.Buffer)\n```\n明确r到底保存了什么样的具体值非常重要，但是这里r的类型却总是io.Reader：注意Go是静态类型化的，而r的静态类型是io.Reader。\n\n一个非常非常重要的接口类型例子就是空接口:\n```go\ninterface{}\n```\n空接口表示方法集合为空并且可以保存任意值，因为任意值都有0个或者更多方法。\n- 有些人说Go的接口是动态类型化的，但这是一种误导。\n- Go的接口都是静态类型化的：一个接口类型变量总是保持同一个静态类型，即使在运行时它【接口类型变量】保存的值类型发生变化，这些值总是满足这个接口。\n\n### 接口的表示(The representation of an interface)\n\n- 一个接口类型变量存储了一个pair：\n  - 赋值给这个接口变量的具体值\n  - 该值的类型描述符\n- 更进一步的说：\n  - 这个\" 值 \"是实现了这个接口的底层具体数据项(underlying concrete data item)\n  - 这个\" 类型 \"是描述了那个接口底层具体数据项(item)的全类型(full type)\n```go\nvar r io.Reader\ntty, err := os.OpenFile(\"/dev/tty\", os.O_RDWR, 0)\nif err != nil{\n  return nil, err\n}\nr = tty\n```\n- 分析\n  - 接口变量r 包含了（value, type) 对，即（tty, os.File) //(底层具体数据项, 描述底层具体数据项的全类型)\n  - 除了Read方法以外，类型os.File也实现了其它方法；即使这个接口值仅仅提供了对Read方法的访问，这个接口值内部仍然带有关于这个值的全部类型信息。这就是为什么我们能干下面这些事儿：\n```go\nvar w io.Writer\nw = r.(io.Writer)\n```\n赋值操作中的表达式是一个类型断言（type assertion）；它所断言的是r中存储的项（item）也实现了io.Writer接口，所以我们可以把它赋值给w。<br>\n赋值操作完毕以后，w将会包含 (tty, *os.File)对;w中的pair跟r中的pair是同样的。\n接口的静态类型决定了能用接口变量调用哪些方法，即使接口里存的具体值内部可能还有一堆其它方法；\n\n接口定义的方法集合是该种接口变量所保存的具体值所含有的方法集合的一个子集，通过这个接口变量只能调用这个接口定义过的方法，没法通过这个接口变量调用其它任何方法；\n```go\nvar empty interface{}\nempty = w\n```\nempty，也能包含同样的pair即(tty, *os.File)。这样的话就很方便了，一个空接口可以保存任意值和我们所需要的关于所保存值的全部信息。\n- 一个接口中的pair总有（值，具体类型）这样的格式，而不能有（值，接口类型）这样的格式。\n- 接口不能保存接口值（也就是说，你没法把一个接口变量值存储到一个接口变量中，只能把一个具体类型的值存储到一个接口变量中。）\n\n### 反射\n####  第一反射定律(the first law of reflection)\n- 从接口值到反射对象的反射\n  反射是一种检查存储在接口变量中的（类型，值）对的机制。\n```go\nvar x float64 = 3.4\nfmt.Println(\"type:\", reflect.TypeOf(x))   //type: float64\nfmt.Println(\"value:\", reflect.ValueOf(x)) //Valueof方法会返回一个Value类型的对象\n\n//TypeOf函数原型\nfunc TypeOf(i interface{}) Type\n```\n当我们调用reflect.Typeof(x)的时候，x首先被保存到一个空接口中，这个空接口然后被作为参数传递。reflect.Typeof 会把这个空接口拆包（unpack）恢复出类型信息。\n\n```go\nvar x float64 = 3.4\nv := reflect.ValueOf(x)\nfmt.Println(\"type:\", v.Type())  //返回值的静态类型；就是说如果定义了type MyInt int64，那么这个函数返回的是MyInt类型而不是int64，\nfmt.Println(\"kind is float64:\", v.kind() == reflect.Float64) //返回值的底层类型，是说如果定义了type MyInt int64，那么这个函数返回的是int64类型而不是MyInt类型，\nfmt.Println(\"value:\", v.Float())\n\ntype: float64\nkind is float64: true\nvalue: 3.4\n```\n\n反射库有两特殊性质：\n  - 为了保持API简单，Value的”setter”和“getter”类型的方法操作的是可以包含某个值的最大类型；\n    - 比如，所有的有符号整型，只有针对int64类型的方法，因为它是所有的有符号整型中最大的一个类型。也就是说，Value的Int方法返回的是一个int64，同时SetInt的参数类型采用的是一个int64；\n```go\nvar x uint8 = 'x'\nv := reflect.ValueOf(x)\nfmt.Println(\"type:\", v.Type()) // uint8.\nfmt.Println(\"kind is uint8: \", v.Kind() == reflect.Uint8) // true.\nx = uint8(v.Uint())// v.Uint returns a uint64.看到啦嘛？这个地方必须进行强制类型转换！\n```\n  - 反射对象（reflection object）的Kind描述的是底层类型（underlying type），而不是静态类型（static type）\n\n### 第二反射定律（The second law of reflection）\n#### 从反射队形到接口值的反射\n\n给定一个reflect.Value，我们能用Interface方法把它恢复成一个接口值；效果上就是这个Interface方法把类型和值的信息打包成一个接口表示并且返回结果：\n```go\n// func (v Value) Interface() interface{}\n\ny := v.Interface().(float64)\nfmt.Println(y)\n```\n我们甚至可以做得更好一些，fmt.Println等方法的参数是一个空接口类型的值，所以我们可以让fmt包自己在内部完成我们在上面代码中做的工作。因此，为了正确打印一个reflect.Value，我们只需把Interface方法的返回值直接传递给这个格式化输出例程：\n```go\nfmt.Preintln(v.Interface())\nfmt.Printf(\"value is %7.1e\\n\", v.Interface())\n```\n我们不需要对v.Interface方法的结果调用类型断言（type-assert)为float64；空接口类型值内部包含有具体值的类型信息，并且Printf方法会把它恢复出来。\n\nInterface方法是Valueof函数的逆，除了它的返回值的类型总是interface{}静态类型。\n\n### 第三反射定律\n#### 为了修改一个反射对象，值必须是settable的\n```go\nvar x float64 = 3.4\nv := reflect.ValueOf(x)\nv.SetFloat(7.1) // Error: will panic\n\n//panic: reflect.Value.SetFloat using unaddressable value\n```\n问题不是出在值7.1不是可以寻址的，而是出在v不是settable的。Settability是Value的一条性质，而且，不是所有的Value都具备这条性质;\nValue的CanSet方法用与测试一个Value的settablity；\n```go\nvar  x float64 = 3.4\nv := reflect.ValueOf(x)\nfmt.Println(\"settability of v:\", v.CanSet())\n\n//\nsettability of v: false\n```\n传递了x的一个副本给reflect.Valueof函数，所以作为reflect.Valueof参数被创造出来的接口值只是x的一个副本，而不是x本身。\n```go\nvar x float64 = 3.4\np := reflect.ValueOf(&x)\nfmt.Println(\"type of p:\", p.Type())\nfmt.Println(\"settability of p:\", p.CanSet())\n//\ntype of p: *float64\nsettability of p: false\n```\n反射对象p不是settable的，但是我们想要设置的不是p，而是（效果上来说）*p。为了得到p指向的东西，我们调用Value的Elem方法;这样就能迂回绕过指针，同时把结果保存在叫v的Value中.\n```go\nv := p.Elem()\nfmt.Println(\"settability of v:\", v.CanSet())\nv.SetFloat(7.1)\nfmt.Println(v.Interface())\nfmt.Println(x)\n\n//\nsettability of v: true\n7.1\n7.1\n```\n反射理解起来有点困难，但是它确实正在做编程语言要做的，尽管是通过掩盖了所发生的一切的反射Types和Vlues来实现的。这样好了，你就直接记住反射Values为了修改它们所表示的东西必须要有这些东西的地址。\n\n### structs\nv本身不是一个指针，它只是从一个指针派生来的。出现这种情况的一个常见的方法是当使用反射来修改一个structure的各个域的时候。只要我们有这个structure的地址，我们就能修改它的各个域。\n```go\ntype T struct{\n  A int\n  B string\n}\n\nt := T{23, \"skidoo\"}\ns := reflect.ValueOf(&t).Elem()\ntypeOfT := s.Type()   //把s.Type()返回的Type对象复制给typeofT，typeofT也是一个反射\n\nfor i:=0; i<s.NumField(); i++{\n  f := s.Field(i)   //迭代s的各个域，注意每个域仍然是反射。\n  fmt.Printf(\"%d: %s %s = %v\\n\", i, typeOfT.Field(i).Name, f.Type(), f.Interface())//提取了每个域的名字\n}\n\ns.Field(0).SetInt(77)\ns.Field(1).SetString(\"Sunset Strip\")\nfmt.Println(\"t is now\", t)\n\n//\n0: A int = 23\n1: B string = skidoo\nt is now {77 Sunset Strip}\n```\n","source":"_posts/go_reflect(反射机制).md","raw":"---\n  title: Golang反射包的实现原理（The Laws of Reflection)\n---\n\n### 类型和接口(Types and interfaces)\n\n因为反射是建立在类型系统(type system)上的。所以我们从Go的类型入手\n- Go是静态类型化的。每个变量都有一个静态类型\n```go\ntype MyInt int\n\nvar i int\nvar j MyInt\n```\ni的类型就是int，而j的类型就是MyInt；这里的变量i和j具有不同的静态变量，虽然他们拥有相同的底层类型(underlying type),如果不显示的进行强制类型转换他们是不能相互赋值的；\n\n类型(type)中非常重要的一类(category)就是接口类型(interface type); 一个接口就表示一组确定的方法（method）集合。一个接口变量能存储任意的具体值（这里的具体concrete就是指非接口的non-interface)，只要这个具体值所属的类型实现了这个接口的所有方法。\n\n一个大家都很熟悉的例子是io.Reader和io.Writer，类型Reader和类型Writer来自io包:\n```go\ntype Reader interface{\n  Read(p []byte) (n int, err error)\n}\n\ntype Writer interface{\n  Write(p []byte)(n int, err error)\n}\n```\n实现了上面的Read方法（或Write方法）的任意类型都可以说实现了io.Reader接口（或io.Writer接口)。 这就意味着io.Reader接口变量能够保存任意Read方法的类型所定义的值；\n\n```go\nvar r io.Reader\nr = os.Stdin\nr = bufio.NewReader(r)\nr = new(bytes.Buffer)\n```\n明确r到底保存了什么样的具体值非常重要，但是这里r的类型却总是io.Reader：注意Go是静态类型化的，而r的静态类型是io.Reader。\n\n一个非常非常重要的接口类型例子就是空接口:\n```go\ninterface{}\n```\n空接口表示方法集合为空并且可以保存任意值，因为任意值都有0个或者更多方法。\n- 有些人说Go的接口是动态类型化的，但这是一种误导。\n- Go的接口都是静态类型化的：一个接口类型变量总是保持同一个静态类型，即使在运行时它【接口类型变量】保存的值类型发生变化，这些值总是满足这个接口。\n\n### 接口的表示(The representation of an interface)\n\n- 一个接口类型变量存储了一个pair：\n  - 赋值给这个接口变量的具体值\n  - 该值的类型描述符\n- 更进一步的说：\n  - 这个\" 值 \"是实现了这个接口的底层具体数据项(underlying concrete data item)\n  - 这个\" 类型 \"是描述了那个接口底层具体数据项(item)的全类型(full type)\n```go\nvar r io.Reader\ntty, err := os.OpenFile(\"/dev/tty\", os.O_RDWR, 0)\nif err != nil{\n  return nil, err\n}\nr = tty\n```\n- 分析\n  - 接口变量r 包含了（value, type) 对，即（tty, os.File) //(底层具体数据项, 描述底层具体数据项的全类型)\n  - 除了Read方法以外，类型os.File也实现了其它方法；即使这个接口值仅仅提供了对Read方法的访问，这个接口值内部仍然带有关于这个值的全部类型信息。这就是为什么我们能干下面这些事儿：\n```go\nvar w io.Writer\nw = r.(io.Writer)\n```\n赋值操作中的表达式是一个类型断言（type assertion）；它所断言的是r中存储的项（item）也实现了io.Writer接口，所以我们可以把它赋值给w。<br>\n赋值操作完毕以后，w将会包含 (tty, *os.File)对;w中的pair跟r中的pair是同样的。\n接口的静态类型决定了能用接口变量调用哪些方法，即使接口里存的具体值内部可能还有一堆其它方法；\n\n接口定义的方法集合是该种接口变量所保存的具体值所含有的方法集合的一个子集，通过这个接口变量只能调用这个接口定义过的方法，没法通过这个接口变量调用其它任何方法；\n```go\nvar empty interface{}\nempty = w\n```\nempty，也能包含同样的pair即(tty, *os.File)。这样的话就很方便了，一个空接口可以保存任意值和我们所需要的关于所保存值的全部信息。\n- 一个接口中的pair总有（值，具体类型）这样的格式，而不能有（值，接口类型）这样的格式。\n- 接口不能保存接口值（也就是说，你没法把一个接口变量值存储到一个接口变量中，只能把一个具体类型的值存储到一个接口变量中。）\n\n### 反射\n####  第一反射定律(the first law of reflection)\n- 从接口值到反射对象的反射\n  反射是一种检查存储在接口变量中的（类型，值）对的机制。\n```go\nvar x float64 = 3.4\nfmt.Println(\"type:\", reflect.TypeOf(x))   //type: float64\nfmt.Println(\"value:\", reflect.ValueOf(x)) //Valueof方法会返回一个Value类型的对象\n\n//TypeOf函数原型\nfunc TypeOf(i interface{}) Type\n```\n当我们调用reflect.Typeof(x)的时候，x首先被保存到一个空接口中，这个空接口然后被作为参数传递。reflect.Typeof 会把这个空接口拆包（unpack）恢复出类型信息。\n\n```go\nvar x float64 = 3.4\nv := reflect.ValueOf(x)\nfmt.Println(\"type:\", v.Type())  //返回值的静态类型；就是说如果定义了type MyInt int64，那么这个函数返回的是MyInt类型而不是int64，\nfmt.Println(\"kind is float64:\", v.kind() == reflect.Float64) //返回值的底层类型，是说如果定义了type MyInt int64，那么这个函数返回的是int64类型而不是MyInt类型，\nfmt.Println(\"value:\", v.Float())\n\ntype: float64\nkind is float64: true\nvalue: 3.4\n```\n\n反射库有两特殊性质：\n  - 为了保持API简单，Value的”setter”和“getter”类型的方法操作的是可以包含某个值的最大类型；\n    - 比如，所有的有符号整型，只有针对int64类型的方法，因为它是所有的有符号整型中最大的一个类型。也就是说，Value的Int方法返回的是一个int64，同时SetInt的参数类型采用的是一个int64；\n```go\nvar x uint8 = 'x'\nv := reflect.ValueOf(x)\nfmt.Println(\"type:\", v.Type()) // uint8.\nfmt.Println(\"kind is uint8: \", v.Kind() == reflect.Uint8) // true.\nx = uint8(v.Uint())// v.Uint returns a uint64.看到啦嘛？这个地方必须进行强制类型转换！\n```\n  - 反射对象（reflection object）的Kind描述的是底层类型（underlying type），而不是静态类型（static type）\n\n### 第二反射定律（The second law of reflection）\n#### 从反射队形到接口值的反射\n\n给定一个reflect.Value，我们能用Interface方法把它恢复成一个接口值；效果上就是这个Interface方法把类型和值的信息打包成一个接口表示并且返回结果：\n```go\n// func (v Value) Interface() interface{}\n\ny := v.Interface().(float64)\nfmt.Println(y)\n```\n我们甚至可以做得更好一些，fmt.Println等方法的参数是一个空接口类型的值，所以我们可以让fmt包自己在内部完成我们在上面代码中做的工作。因此，为了正确打印一个reflect.Value，我们只需把Interface方法的返回值直接传递给这个格式化输出例程：\n```go\nfmt.Preintln(v.Interface())\nfmt.Printf(\"value is %7.1e\\n\", v.Interface())\n```\n我们不需要对v.Interface方法的结果调用类型断言（type-assert)为float64；空接口类型值内部包含有具体值的类型信息，并且Printf方法会把它恢复出来。\n\nInterface方法是Valueof函数的逆，除了它的返回值的类型总是interface{}静态类型。\n\n### 第三反射定律\n#### 为了修改一个反射对象，值必须是settable的\n```go\nvar x float64 = 3.4\nv := reflect.ValueOf(x)\nv.SetFloat(7.1) // Error: will panic\n\n//panic: reflect.Value.SetFloat using unaddressable value\n```\n问题不是出在值7.1不是可以寻址的，而是出在v不是settable的。Settability是Value的一条性质，而且，不是所有的Value都具备这条性质;\nValue的CanSet方法用与测试一个Value的settablity；\n```go\nvar  x float64 = 3.4\nv := reflect.ValueOf(x)\nfmt.Println(\"settability of v:\", v.CanSet())\n\n//\nsettability of v: false\n```\n传递了x的一个副本给reflect.Valueof函数，所以作为reflect.Valueof参数被创造出来的接口值只是x的一个副本，而不是x本身。\n```go\nvar x float64 = 3.4\np := reflect.ValueOf(&x)\nfmt.Println(\"type of p:\", p.Type())\nfmt.Println(\"settability of p:\", p.CanSet())\n//\ntype of p: *float64\nsettability of p: false\n```\n反射对象p不是settable的，但是我们想要设置的不是p，而是（效果上来说）*p。为了得到p指向的东西，我们调用Value的Elem方法;这样就能迂回绕过指针，同时把结果保存在叫v的Value中.\n```go\nv := p.Elem()\nfmt.Println(\"settability of v:\", v.CanSet())\nv.SetFloat(7.1)\nfmt.Println(v.Interface())\nfmt.Println(x)\n\n//\nsettability of v: true\n7.1\n7.1\n```\n反射理解起来有点困难，但是它确实正在做编程语言要做的，尽管是通过掩盖了所发生的一切的反射Types和Vlues来实现的。这样好了，你就直接记住反射Values为了修改它们所表示的东西必须要有这些东西的地址。\n\n### structs\nv本身不是一个指针，它只是从一个指针派生来的。出现这种情况的一个常见的方法是当使用反射来修改一个structure的各个域的时候。只要我们有这个structure的地址，我们就能修改它的各个域。\n```go\ntype T struct{\n  A int\n  B string\n}\n\nt := T{23, \"skidoo\"}\ns := reflect.ValueOf(&t).Elem()\ntypeOfT := s.Type()   //把s.Type()返回的Type对象复制给typeofT，typeofT也是一个反射\n\nfor i:=0; i<s.NumField(); i++{\n  f := s.Field(i)   //迭代s的各个域，注意每个域仍然是反射。\n  fmt.Printf(\"%d: %s %s = %v\\n\", i, typeOfT.Field(i).Name, f.Type(), f.Interface())//提取了每个域的名字\n}\n\ns.Field(0).SetInt(77)\ns.Field(1).SetString(\"Sunset Strip\")\nfmt.Println(\"t is now\", t)\n\n//\n0: A int = 23\n1: B string = skidoo\nt is now {77 Sunset Strip}\n```\n","slug":"go_reflect(反射机制)","published":1,"date":"2018-09-21T07:16:42.278Z","updated":"2018-09-21T07:16:42.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3l8d4s00075sha05b9abog","content":"<h3 id=\"类型和接口-Types-and-interfaces\"><a href=\"#类型和接口-Types-and-interfaces\" class=\"headerlink\" title=\"类型和接口(Types and interfaces)\"></a>类型和接口(Types and interfaces)</h3><p>因为反射是建立在类型系统(type system)上的。所以我们从Go的类型入手</p>\n<ul>\n<li>Go是静态类型化的。每个变量都有一个静态类型<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyInt <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> j MyInt</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>i的类型就是int，而j的类型就是MyInt；这里的变量i和j具有不同的静态变量，虽然他们拥有相同的底层类型(underlying type),如果不显示的进行强制类型转换他们是不能相互赋值的；</p>\n<p>类型(type)中非常重要的一类(category)就是接口类型(interface type); 一个接口就表示一组确定的方法（method）集合。一个接口变量能存储任意的具体值（这里的具体concrete就是指非接口的non-interface)，只要这个具体值所属的类型实现了这个接口的所有方法。</p>\n<p>一个大家都很熟悉的例子是io.Reader和io.Writer，类型Reader和类型Writer来自io包:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Reader <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">  Read(p []<span class=\"keyword\">byte</span>) (n <span class=\"keyword\">int</span>, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Writer <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">  Write(p []<span class=\"keyword\">byte</span>)(n <span class=\"keyword\">int</span>, err error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实现了上面的Read方法（或Write方法）的任意类型都可以说实现了io.Reader接口（或io.Writer接口)。 这就意味着io.Reader接口变量能够保存任意Read方法的类型所定义的值；</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> r io.Reader</span><br><span class=\"line\">r = os.Stdin</span><br><span class=\"line\">r = bufio.NewReader(r)</span><br><span class=\"line\">r = <span class=\"built_in\">new</span>(bytes.Buffer)</span><br></pre></td></tr></table></figure>\n<p>明确r到底保存了什么样的具体值非常重要，但是这里r的类型却总是io.Reader：注意Go是静态类型化的，而r的静态类型是io.Reader。</p>\n<p>一个非常非常重要的接口类型例子就是空接口:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>空接口表示方法集合为空并且可以保存任意值，因为任意值都有0个或者更多方法。</p>\n<ul>\n<li>有些人说Go的接口是动态类型化的，但这是一种误导。</li>\n<li>Go的接口都是静态类型化的：一个接口类型变量总是保持同一个静态类型，即使在运行时它【接口类型变量】保存的值类型发生变化，这些值总是满足这个接口。</li>\n</ul>\n<h3 id=\"接口的表示-The-representation-of-an-interface\"><a href=\"#接口的表示-The-representation-of-an-interface\" class=\"headerlink\" title=\"接口的表示(The representation of an interface)\"></a>接口的表示(The representation of an interface)</h3><ul>\n<li>一个接口类型变量存储了一个pair：<ul>\n<li>赋值给这个接口变量的具体值</li>\n<li>该值的类型描述符</li>\n</ul>\n</li>\n<li><p>更进一步的说：</p>\n<ul>\n<li>这个” 值 “是实现了这个接口的底层具体数据项(underlying concrete data item)</li>\n<li>这个” 类型 “是描述了那个接口底层具体数据项(item)的全类型(full type)<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> r io.Reader</span><br><span class=\"line\">tty, err := os.OpenFile(<span class=\"string\">\"/dev/tty\"</span>, os.O_RDWR, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">r = tty</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>分析</p>\n<ul>\n<li>接口变量r 包含了（value, type) 对，即（tty, os.File) //(底层具体数据项, 描述底层具体数据项的全类型)</li>\n<li>除了Read方法以外，类型os.File也实现了其它方法；即使这个接口值仅仅提供了对Read方法的访问，这个接口值内部仍然带有关于这个值的全部类型信息。这就是为什么我们能干下面这些事儿：<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> w io.Writer</span><br><span class=\"line\">w = r.(io.Writer)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>赋值操作中的表达式是一个类型断言（type assertion）；它所断言的是r中存储的项（item）也实现了io.Writer接口，所以我们可以把它赋值给w。<br><br>赋值操作完毕以后，w将会包含 (tty, *os.File)对;w中的pair跟r中的pair是同样的。<br>接口的静态类型决定了能用接口变量调用哪些方法，即使接口里存的具体值内部可能还有一堆其它方法；</p>\n<p>接口定义的方法集合是该种接口变量所保存的具体值所含有的方法集合的一个子集，通过这个接口变量只能调用这个接口定义过的方法，没法通过这个接口变量调用其它任何方法；<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> empty <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">empty = w</span><br></pre></td></tr></table></figure></p>\n<p>empty，也能包含同样的pair即(tty, *os.File)。这样的话就很方便了，一个空接口可以保存任意值和我们所需要的关于所保存值的全部信息。</p>\n<ul>\n<li>一个接口中的pair总有（值，具体类型）这样的格式，而不能有（值，接口类型）这样的格式。</li>\n<li>接口不能保存接口值（也就是说，你没法把一个接口变量值存储到一个接口变量中，只能把一个具体类型的值存储到一个接口变量中。）</li>\n</ul>\n<h3 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h3><h4 id=\"第一反射定律-the-first-law-of-reflection\"><a href=\"#第一反射定律-the-first-law-of-reflection\" class=\"headerlink\" title=\"第一反射定律(the first law of reflection)\"></a>第一反射定律(the first law of reflection)</h4><ul>\n<li>从接口值到反射对象的反射<br>反射是一种检查存储在接口变量中的（类型，值）对的机制。<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"keyword\">float64</span> = <span class=\"number\">3.4</span></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"type:\"</span>, reflect.TypeOf(x))   <span class=\"comment\">//type: float64</span></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"value:\"</span>, reflect.ValueOf(x)) <span class=\"comment\">//Valueof方法会返回一个Value类型的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//TypeOf函数原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TypeOf</span><span class=\"params\">(i <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">Type</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当我们调用reflect.Typeof(x)的时候，x首先被保存到一个空接口中，这个空接口然后被作为参数传递。reflect.Typeof 会把这个空接口拆包（unpack）恢复出类型信息。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"keyword\">float64</span> = <span class=\"number\">3.4</span></span><br><span class=\"line\">v := reflect.ValueOf(x)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"type:\"</span>, v.Type())  <span class=\"comment\">//返回值的静态类型；就是说如果定义了type MyInt int64，那么这个函数返回的是MyInt类型而不是int64，</span></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"kind is float64:\"</span>, v.kind() == reflect.Float64) <span class=\"comment\">//返回值的底层类型，是说如果定义了type MyInt int64，那么这个函数返回的是int64类型而不是MyInt类型，</span></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"value:\"</span>, v.Float())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span>: <span class=\"keyword\">float64</span></span><br><span class=\"line\">kind is <span class=\"keyword\">float64</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">value: <span class=\"number\">3.4</span></span><br></pre></td></tr></table></figure>\n<p>反射库有两特殊性质：</p>\n<ul>\n<li><p>为了保持API简单，Value的”setter”和“getter”类型的方法操作的是可以包含某个值的最大类型；</p>\n<ul>\n<li>比如，所有的有符号整型，只有针对int64类型的方法，因为它是所有的有符号整型中最大的一个类型。也就是说，Value的Int方法返回的是一个int64，同时SetInt的参数类型采用的是一个int64；<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"keyword\">uint8</span> = <span class=\"string\">'x'</span></span><br><span class=\"line\">v := reflect.ValueOf(x)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"type:\"</span>, v.Type()) <span class=\"comment\">// uint8.</span></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"kind is uint8: \"</span>, v.Kind() == reflect.Uint8) <span class=\"comment\">// true.</span></span><br><span class=\"line\">x = <span class=\"keyword\">uint8</span>(v.Uint())<span class=\"comment\">// v.Uint returns a uint64.看到啦嘛？这个地方必须进行强制类型转换！</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>反射对象（reflection object）的Kind描述的是底层类型（underlying type），而不是静态类型（static type）</p>\n</li>\n</ul>\n<h3 id=\"第二反射定律（The-second-law-of-reflection）\"><a href=\"#第二反射定律（The-second-law-of-reflection）\" class=\"headerlink\" title=\"第二反射定律（The second law of reflection）\"></a>第二反射定律（The second law of reflection）</h3><h4 id=\"从反射队形到接口值的反射\"><a href=\"#从反射队形到接口值的反射\" class=\"headerlink\" title=\"从反射队形到接口值的反射\"></a>从反射队形到接口值的反射</h4><p>给定一个reflect.Value，我们能用Interface方法把它恢复成一个接口值；效果上就是这个Interface方法把类型和值的信息打包成一个接口表示并且返回结果：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// func (v Value) Interface() interface&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">y := v.Interface().(<span class=\"keyword\">float64</span>)</span><br><span class=\"line\">fmt.Println(y)</span><br></pre></td></tr></table></figure></p>\n<p>我们甚至可以做得更好一些，fmt.Println等方法的参数是一个空接口类型的值，所以我们可以让fmt包自己在内部完成我们在上面代码中做的工作。因此，为了正确打印一个reflect.Value，我们只需把Interface方法的返回值直接传递给这个格式化输出例程：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Preintln(v.Interface())</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"value is %7.1e\\n\"</span>, v.Interface())</span><br></pre></td></tr></table></figure></p>\n<p>我们不需要对v.Interface方法的结果调用类型断言（type-assert)为float64；空接口类型值内部包含有具体值的类型信息，并且Printf方法会把它恢复出来。</p>\n<p>Interface方法是Valueof函数的逆，除了它的返回值的类型总是interface{}静态类型。</p>\n<h3 id=\"第三反射定律\"><a href=\"#第三反射定律\" class=\"headerlink\" title=\"第三反射定律\"></a>第三反射定律</h3><h4 id=\"为了修改一个反射对象，值必须是settable的\"><a href=\"#为了修改一个反射对象，值必须是settable的\" class=\"headerlink\" title=\"为了修改一个反射对象，值必须是settable的\"></a>为了修改一个反射对象，值必须是settable的</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"keyword\">float64</span> = <span class=\"number\">3.4</span></span><br><span class=\"line\">v := reflect.ValueOf(x)</span><br><span class=\"line\">v.SetFloat(<span class=\"number\">7.1</span>) <span class=\"comment\">// Error: will panic</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//panic: reflect.Value.SetFloat using unaddressable value</span></span><br></pre></td></tr></table></figure>\n<p>问题不是出在值7.1不是可以寻址的，而是出在v不是settable的。Settability是Value的一条性质，而且，不是所有的Value都具备这条性质;<br>Value的CanSet方法用与测试一个Value的settablity；<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span>  x <span class=\"keyword\">float64</span> = <span class=\"number\">3.4</span></span><br><span class=\"line\">v := reflect.ValueOf(x)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"settability of v:\"</span>, v.CanSet())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">settability of v: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<p>传递了x的一个副本给reflect.Valueof函数，所以作为reflect.Valueof参数被创造出来的接口值只是x的一个副本，而不是x本身。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"keyword\">float64</span> = <span class=\"number\">3.4</span></span><br><span class=\"line\">p := reflect.ValueOf(&amp;x)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"type of p:\"</span>, p.Type())</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"settability of p:\"</span>, p.CanSet())</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> of p: *<span class=\"keyword\">float64</span></span><br><span class=\"line\">settability of p: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<p>反射对象p不是settable的，但是我们想要设置的不是p，而是（效果上来说）*p。为了得到p指向的东西，我们调用Value的Elem方法;这样就能迂回绕过指针，同时把结果保存在叫v的Value中.<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v := p.Elem()</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"settability of v:\"</span>, v.CanSet())</span><br><span class=\"line\">v.SetFloat(<span class=\"number\">7.1</span>)</span><br><span class=\"line\">fmt.Println(v.Interface())</span><br><span class=\"line\">fmt.Println(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">settability of v: <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">7.1</span></span><br><span class=\"line\"><span class=\"number\">7.1</span></span><br></pre></td></tr></table></figure></p>\n<p>反射理解起来有点困难，但是它确实正在做编程语言要做的，尽管是通过掩盖了所发生的一切的反射Types和Vlues来实现的。这样好了，你就直接记住反射Values为了修改它们所表示的东西必须要有这些东西的地址。</p>\n<h3 id=\"structs\"><a href=\"#structs\" class=\"headerlink\" title=\"structs\"></a>structs</h3><p>v本身不是一个指针，它只是从一个指针派生来的。出现这种情况的一个常见的方法是当使用反射来修改一个structure的各个域的时候。只要我们有这个structure的地址，我们就能修改它的各个域。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> T <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  A <span class=\"keyword\">int</span></span><br><span class=\"line\">  B <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">t := T&#123;<span class=\"number\">23</span>, <span class=\"string\">\"skidoo\"</span>&#125;</span><br><span class=\"line\">s := reflect.ValueOf(&amp;t).Elem()</span><br><span class=\"line\">typeOfT := s.Type()   <span class=\"comment\">//把s.Type()返回的Type对象复制给typeofT，typeofT也是一个反射</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>; i&lt;s.NumField(); i++&#123;</span><br><span class=\"line\">  f := s.Field(i)   <span class=\"comment\">//迭代s的各个域，注意每个域仍然是反射。</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"%d: %s %s = %v\\n\"</span>, i, typeOfT.Field(i).Name, f.Type(), f.Interface())<span class=\"comment\">//提取了每个域的名字</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">s.Field(<span class=\"number\">0</span>).SetInt(<span class=\"number\">77</span>)</span><br><span class=\"line\">s.Field(<span class=\"number\">1</span>).SetString(<span class=\"string\">\"Sunset Strip\"</span>)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"t is now\"</span>, t)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"number\">0</span>: A <span class=\"keyword\">int</span> = <span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">1</span>: B <span class=\"keyword\">string</span> = skidoo</span><br><span class=\"line\">t is now &#123;<span class=\"number\">77</span> Sunset Strip&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"类型和接口-Types-and-interfaces\"><a href=\"#类型和接口-Types-and-interfaces\" class=\"headerlink\" title=\"类型和接口(Types and interfaces)\"></a>类型和接口(Types and interfaces)</h3><p>因为反射是建立在类型系统(type system)上的。所以我们从Go的类型入手</p>\n<ul>\n<li>Go是静态类型化的。每个变量都有一个静态类型<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyInt <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> j MyInt</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>i的类型就是int，而j的类型就是MyInt；这里的变量i和j具有不同的静态变量，虽然他们拥有相同的底层类型(underlying type),如果不显示的进行强制类型转换他们是不能相互赋值的；</p>\n<p>类型(type)中非常重要的一类(category)就是接口类型(interface type); 一个接口就表示一组确定的方法（method）集合。一个接口变量能存储任意的具体值（这里的具体concrete就是指非接口的non-interface)，只要这个具体值所属的类型实现了这个接口的所有方法。</p>\n<p>一个大家都很熟悉的例子是io.Reader和io.Writer，类型Reader和类型Writer来自io包:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Reader <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">  Read(p []<span class=\"keyword\">byte</span>) (n <span class=\"keyword\">int</span>, err error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Writer <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">  Write(p []<span class=\"keyword\">byte</span>)(n <span class=\"keyword\">int</span>, err error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>实现了上面的Read方法（或Write方法）的任意类型都可以说实现了io.Reader接口（或io.Writer接口)。 这就意味着io.Reader接口变量能够保存任意Read方法的类型所定义的值；</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> r io.Reader</span><br><span class=\"line\">r = os.Stdin</span><br><span class=\"line\">r = bufio.NewReader(r)</span><br><span class=\"line\">r = <span class=\"built_in\">new</span>(bytes.Buffer)</span><br></pre></td></tr></table></figure>\n<p>明确r到底保存了什么样的具体值非常重要，但是这里r的类型却总是io.Reader：注意Go是静态类型化的，而r的静态类型是io.Reader。</p>\n<p>一个非常非常重要的接口类型例子就是空接口:<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>空接口表示方法集合为空并且可以保存任意值，因为任意值都有0个或者更多方法。</p>\n<ul>\n<li>有些人说Go的接口是动态类型化的，但这是一种误导。</li>\n<li>Go的接口都是静态类型化的：一个接口类型变量总是保持同一个静态类型，即使在运行时它【接口类型变量】保存的值类型发生变化，这些值总是满足这个接口。</li>\n</ul>\n<h3 id=\"接口的表示-The-representation-of-an-interface\"><a href=\"#接口的表示-The-representation-of-an-interface\" class=\"headerlink\" title=\"接口的表示(The representation of an interface)\"></a>接口的表示(The representation of an interface)</h3><ul>\n<li>一个接口类型变量存储了一个pair：<ul>\n<li>赋值给这个接口变量的具体值</li>\n<li>该值的类型描述符</li>\n</ul>\n</li>\n<li><p>更进一步的说：</p>\n<ul>\n<li>这个” 值 “是实现了这个接口的底层具体数据项(underlying concrete data item)</li>\n<li>这个” 类型 “是描述了那个接口底层具体数据项(item)的全类型(full type)<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> r io.Reader</span><br><span class=\"line\">tty, err := os.OpenFile(<span class=\"string\">\"/dev/tty\"</span>, os.O_RDWR, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">r = tty</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>分析</p>\n<ul>\n<li>接口变量r 包含了（value, type) 对，即（tty, os.File) //(底层具体数据项, 描述底层具体数据项的全类型)</li>\n<li>除了Read方法以外，类型os.File也实现了其它方法；即使这个接口值仅仅提供了对Read方法的访问，这个接口值内部仍然带有关于这个值的全部类型信息。这就是为什么我们能干下面这些事儿：<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> w io.Writer</span><br><span class=\"line\">w = r.(io.Writer)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>赋值操作中的表达式是一个类型断言（type assertion）；它所断言的是r中存储的项（item）也实现了io.Writer接口，所以我们可以把它赋值给w。<br><br>赋值操作完毕以后，w将会包含 (tty, *os.File)对;w中的pair跟r中的pair是同样的。<br>接口的静态类型决定了能用接口变量调用哪些方法，即使接口里存的具体值内部可能还有一堆其它方法；</p>\n<p>接口定义的方法集合是该种接口变量所保存的具体值所含有的方法集合的一个子集，通过这个接口变量只能调用这个接口定义过的方法，没法通过这个接口变量调用其它任何方法；<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> empty <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">empty = w</span><br></pre></td></tr></table></figure></p>\n<p>empty，也能包含同样的pair即(tty, *os.File)。这样的话就很方便了，一个空接口可以保存任意值和我们所需要的关于所保存值的全部信息。</p>\n<ul>\n<li>一个接口中的pair总有（值，具体类型）这样的格式，而不能有（值，接口类型）这样的格式。</li>\n<li>接口不能保存接口值（也就是说，你没法把一个接口变量值存储到一个接口变量中，只能把一个具体类型的值存储到一个接口变量中。）</li>\n</ul>\n<h3 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h3><h4 id=\"第一反射定律-the-first-law-of-reflection\"><a href=\"#第一反射定律-the-first-law-of-reflection\" class=\"headerlink\" title=\"第一反射定律(the first law of reflection)\"></a>第一反射定律(the first law of reflection)</h4><ul>\n<li>从接口值到反射对象的反射<br>反射是一种检查存储在接口变量中的（类型，值）对的机制。<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"keyword\">float64</span> = <span class=\"number\">3.4</span></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"type:\"</span>, reflect.TypeOf(x))   <span class=\"comment\">//type: float64</span></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"value:\"</span>, reflect.ValueOf(x)) <span class=\"comment\">//Valueof方法会返回一个Value类型的对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//TypeOf函数原型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TypeOf</span><span class=\"params\">(i <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">Type</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当我们调用reflect.Typeof(x)的时候，x首先被保存到一个空接口中，这个空接口然后被作为参数传递。reflect.Typeof 会把这个空接口拆包（unpack）恢复出类型信息。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"keyword\">float64</span> = <span class=\"number\">3.4</span></span><br><span class=\"line\">v := reflect.ValueOf(x)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"type:\"</span>, v.Type())  <span class=\"comment\">//返回值的静态类型；就是说如果定义了type MyInt int64，那么这个函数返回的是MyInt类型而不是int64，</span></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"kind is float64:\"</span>, v.kind() == reflect.Float64) <span class=\"comment\">//返回值的底层类型，是说如果定义了type MyInt int64，那么这个函数返回的是int64类型而不是MyInt类型，</span></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"value:\"</span>, v.Float())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span>: <span class=\"keyword\">float64</span></span><br><span class=\"line\">kind is <span class=\"keyword\">float64</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">value: <span class=\"number\">3.4</span></span><br></pre></td></tr></table></figure>\n<p>反射库有两特殊性质：</p>\n<ul>\n<li><p>为了保持API简单，Value的”setter”和“getter”类型的方法操作的是可以包含某个值的最大类型；</p>\n<ul>\n<li>比如，所有的有符号整型，只有针对int64类型的方法，因为它是所有的有符号整型中最大的一个类型。也就是说，Value的Int方法返回的是一个int64，同时SetInt的参数类型采用的是一个int64；<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"keyword\">uint8</span> = <span class=\"string\">'x'</span></span><br><span class=\"line\">v := reflect.ValueOf(x)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"type:\"</span>, v.Type()) <span class=\"comment\">// uint8.</span></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"kind is uint8: \"</span>, v.Kind() == reflect.Uint8) <span class=\"comment\">// true.</span></span><br><span class=\"line\">x = <span class=\"keyword\">uint8</span>(v.Uint())<span class=\"comment\">// v.Uint returns a uint64.看到啦嘛？这个地方必须进行强制类型转换！</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>反射对象（reflection object）的Kind描述的是底层类型（underlying type），而不是静态类型（static type）</p>\n</li>\n</ul>\n<h3 id=\"第二反射定律（The-second-law-of-reflection）\"><a href=\"#第二反射定律（The-second-law-of-reflection）\" class=\"headerlink\" title=\"第二反射定律（The second law of reflection）\"></a>第二反射定律（The second law of reflection）</h3><h4 id=\"从反射队形到接口值的反射\"><a href=\"#从反射队形到接口值的反射\" class=\"headerlink\" title=\"从反射队形到接口值的反射\"></a>从反射队形到接口值的反射</h4><p>给定一个reflect.Value，我们能用Interface方法把它恢复成一个接口值；效果上就是这个Interface方法把类型和值的信息打包成一个接口表示并且返回结果：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// func (v Value) Interface() interface&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">y := v.Interface().(<span class=\"keyword\">float64</span>)</span><br><span class=\"line\">fmt.Println(y)</span><br></pre></td></tr></table></figure></p>\n<p>我们甚至可以做得更好一些，fmt.Println等方法的参数是一个空接口类型的值，所以我们可以让fmt包自己在内部完成我们在上面代码中做的工作。因此，为了正确打印一个reflect.Value，我们只需把Interface方法的返回值直接传递给这个格式化输出例程：<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Preintln(v.Interface())</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">\"value is %7.1e\\n\"</span>, v.Interface())</span><br></pre></td></tr></table></figure></p>\n<p>我们不需要对v.Interface方法的结果调用类型断言（type-assert)为float64；空接口类型值内部包含有具体值的类型信息，并且Printf方法会把它恢复出来。</p>\n<p>Interface方法是Valueof函数的逆，除了它的返回值的类型总是interface{}静态类型。</p>\n<h3 id=\"第三反射定律\"><a href=\"#第三反射定律\" class=\"headerlink\" title=\"第三反射定律\"></a>第三反射定律</h3><h4 id=\"为了修改一个反射对象，值必须是settable的\"><a href=\"#为了修改一个反射对象，值必须是settable的\" class=\"headerlink\" title=\"为了修改一个反射对象，值必须是settable的\"></a>为了修改一个反射对象，值必须是settable的</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"keyword\">float64</span> = <span class=\"number\">3.4</span></span><br><span class=\"line\">v := reflect.ValueOf(x)</span><br><span class=\"line\">v.SetFloat(<span class=\"number\">7.1</span>) <span class=\"comment\">// Error: will panic</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//panic: reflect.Value.SetFloat using unaddressable value</span></span><br></pre></td></tr></table></figure>\n<p>问题不是出在值7.1不是可以寻址的，而是出在v不是settable的。Settability是Value的一条性质，而且，不是所有的Value都具备这条性质;<br>Value的CanSet方法用与测试一个Value的settablity；<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span>  x <span class=\"keyword\">float64</span> = <span class=\"number\">3.4</span></span><br><span class=\"line\">v := reflect.ValueOf(x)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"settability of v:\"</span>, v.CanSet())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">settability of v: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<p>传递了x的一个副本给reflect.Valueof函数，所以作为reflect.Valueof参数被创造出来的接口值只是x的一个副本，而不是x本身。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x <span class=\"keyword\">float64</span> = <span class=\"number\">3.4</span></span><br><span class=\"line\">p := reflect.ValueOf(&amp;x)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"type of p:\"</span>, p.Type())</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"settability of p:\"</span>, p.CanSet())</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> of p: *<span class=\"keyword\">float64</span></span><br><span class=\"line\">settability of p: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<p>反射对象p不是settable的，但是我们想要设置的不是p，而是（效果上来说）*p。为了得到p指向的东西，我们调用Value的Elem方法;这样就能迂回绕过指针，同时把结果保存在叫v的Value中.<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v := p.Elem()</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"settability of v:\"</span>, v.CanSet())</span><br><span class=\"line\">v.SetFloat(<span class=\"number\">7.1</span>)</span><br><span class=\"line\">fmt.Println(v.Interface())</span><br><span class=\"line\">fmt.Println(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">settability of v: <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">7.1</span></span><br><span class=\"line\"><span class=\"number\">7.1</span></span><br></pre></td></tr></table></figure></p>\n<p>反射理解起来有点困难，但是它确实正在做编程语言要做的，尽管是通过掩盖了所发生的一切的反射Types和Vlues来实现的。这样好了，你就直接记住反射Values为了修改它们所表示的东西必须要有这些东西的地址。</p>\n<h3 id=\"structs\"><a href=\"#structs\" class=\"headerlink\" title=\"structs\"></a>structs</h3><p>v本身不是一个指针，它只是从一个指针派生来的。出现这种情况的一个常见的方法是当使用反射来修改一个structure的各个域的时候。只要我们有这个structure的地址，我们就能修改它的各个域。<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> T <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  A <span class=\"keyword\">int</span></span><br><span class=\"line\">  B <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">t := T&#123;<span class=\"number\">23</span>, <span class=\"string\">\"skidoo\"</span>&#125;</span><br><span class=\"line\">s := reflect.ValueOf(&amp;t).Elem()</span><br><span class=\"line\">typeOfT := s.Type()   <span class=\"comment\">//把s.Type()返回的Type对象复制给typeofT，typeofT也是一个反射</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>; i&lt;s.NumField(); i++&#123;</span><br><span class=\"line\">  f := s.Field(i)   <span class=\"comment\">//迭代s的各个域，注意每个域仍然是反射。</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">\"%d: %s %s = %v\\n\"</span>, i, typeOfT.Field(i).Name, f.Type(), f.Interface())<span class=\"comment\">//提取了每个域的名字</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">s.Field(<span class=\"number\">0</span>).SetInt(<span class=\"number\">77</span>)</span><br><span class=\"line\">s.Field(<span class=\"number\">1</span>).SetString(<span class=\"string\">\"Sunset Strip\"</span>)</span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"t is now\"</span>, t)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"number\">0</span>: A <span class=\"keyword\">int</span> = <span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">1</span>: B <span class=\"keyword\">string</span> = skidoo</span><br><span class=\"line\">t is now &#123;<span class=\"number\">77</span> Sunset Strip&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"rgw put object流程","_content":"\n### op处理\n\n/// rgw/rgw_op.cc\n```c++\nvoid RGWPutObj::execute(){\n    \n}\n```","source":"_posts/rgw_put_object.md","raw":"---\n title: rgw put object流程\n---\n\n### op处理\n\n/// rgw/rgw_op.cc\n```c++\nvoid RGWPutObj::execute(){\n    \n}\n```","slug":"rgw_put_object","published":1,"date":"2018-11-30T03:00:01.504Z","updated":"2018-12-11T08:18:12.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq3l8d4s00085sha9whvdw9w","content":"<h3 id=\"op处理\"><a href=\"#op处理\" class=\"headerlink\" title=\"op处理\"></a>op处理</h3><p>/// rgw/rgw_op.cc<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> RGWPutObj::execute()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"op处理\"><a href=\"#op处理\" class=\"headerlink\" title=\"op处理\"></a>op处理</h3><p>/// rgw/rgw_op.cc<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> RGWPutObj::execute()&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}