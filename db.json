{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1529552204947},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1529552204947},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1529552204947},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1529552204947},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1529552204947},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1529552204947},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1529552204947},{"_id":"themes/hexo-theme-next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1529552204947},{"_id":"themes/hexo-theme-next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1529552204948},{"_id":"themes/hexo-theme-next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1529552204948},{"_id":"themes/hexo-theme-next/_config.yml","hash":"97afa3fb6cc561d7d7e11af8e734427aca27b5ac","modified":1529552204948},{"_id":"themes/hexo-theme-next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1529552204948},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1529552204948},{"_id":"themes/hexo-theme-next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1529552204966},{"_id":"source/_posts/coin.md","hash":"ac093154e5498ab853db4cd548238c9661b49548","modified":1530671120498},{"_id":"source/_posts/eth.md","hash":"874bf9b3907cb8f25c3779e7fc788fed08ad7aad","modified":1530671144895},{"_id":"source/_posts/go_goroutine.md","hash":"8229d10c3c44bc8c089e025e67478be6dc318d83","modified":1530671149615},{"_id":"source/_posts/golang_base.md","hash":"4afa4f7f0bf613a8d2b6e35e211c8a02be6066d0","modified":1529552204944},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1529552204944},{"_id":"source/_posts/ipfs.md","hash":"6fc88500e4b52bebfee19204578762239b046231","modified":1529552204945},{"_id":"source/_posts/solidity_01.md","hash":"62c5dc40afbd914466655eabe0c59c7215f927fa","modified":1530671337996},{"_id":"source/about/index.md","hash":"be34062f2cb0754829cf21018a65118332b5b985","modified":1529552204945},{"_id":"source/categories/index.md","hash":"45377c7a31db51bfd4c59029c30f31e5764228d5","modified":1529552204945},{"_id":"source/tags/index.md","hash":"aba53ea9fc8d1e53b1af2d18e8789484a2e7f478","modified":1529552204945},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1529552204948},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1529552204949},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1529552204949},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1529552204949},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1529552204949},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1529552204949},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1529552204949},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1529552204949},{"_id":"themes/hexo-theme-next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1529552204949},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1529552204949},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1529552204950},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1529552204950},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1529552204950},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1529552204950},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1529552204950},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1529552204950},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1529552204952},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1529552204965},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1529552204965},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1529552204965},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1529552204965},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1529552204965},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1529552204965},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1529552204966},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1529552204966},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1529552204966},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1529552205041},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1529552205041},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1529552205041},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529552204987},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1529552204952},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1529552204952},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1529552204952},{"_id":"themes/hexo-theme-next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1529552204952},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1529552204953},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1529552204953},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1529552204953},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1529552204953},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1529552204953},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1529552204953},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1529552204953},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1529552204954},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1529552204954},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1529552204954},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1529552204954},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1529552204956},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1529552204956},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1529552204959},{"_id":"themes/hexo-theme-next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1529552204962},{"_id":"themes/hexo-theme-next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1529552204962},{"_id":"themes/hexo-theme-next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1529552204962},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1529552204962},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1529552204962},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1529552204962},{"_id":"themes/hexo-theme-next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1529552204962},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1529552204968},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1529552204968},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1529552204968},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1529552204968},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1529552204968},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1529552204968},{"_id":"themes/hexo-theme-next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1529552204969},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1529552204969},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1529552204969},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1529552204987},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1529552204988},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1529552204988},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1529552204988},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1529552204988},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1529552204988},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1529552204988},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1529552204989},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1529552204989},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1529552204989},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1529552204989},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1529552204989},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1529552204989},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529552204990},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1529552204990},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1529552204990},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1529552204990},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1529552204990},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1529552204990},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529552204958},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529552204958},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529552204981},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529552204981},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529552204981},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529552204987},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1529552204987},{"_id":"themes/hexo-theme-next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1529552204953},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1529552204954},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1529552204956},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1529552204956},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1529552204956},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1529552204956},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1529552204956},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1529552204956},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1529552204956},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1529552204957},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1529552204958},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1529552204959},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1529552204959},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1529552204959},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1529552204959},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1529552204959},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1529552204959},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1529552204960},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1529552204960},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1529552204960},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1529552204960},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1529552204960},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1529552204960},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1529552204960},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1529552204961},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1529552204961},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1529552204961},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1529552204961},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1529552204961},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1529552204961},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1529552204961},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1529552204961},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1529552204961},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1529552204962},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1529552204964},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1529552204964},{"_id":"themes/hexo-theme-next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1529552204965},{"_id":"themes/hexo-theme-next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1529552204965},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1529552204979},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1529552204981},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1529552204981},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1529552204981},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1529552204987},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1529552204987},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1529552204987},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1529552204987},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1529552204992},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1529552204992},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1529552204992},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1529552204992},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1529552204992},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1529552204992},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1529552204992},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1529552204993},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1529552204993},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1529552204993},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1529552204993},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1529552204999},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1529552205004},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1529552205004},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1529552205004},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1529552205004},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1529552205009},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1529552205009},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1529552205009},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1529552205009},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1529552205010},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1529552205010},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1529552205010},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1529552205010},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1529552205010},{"_id":"themes/hexo-theme-next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1529552205024},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1529552205026},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1529552205026},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1529552205026},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1529552205026},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1529552205026},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1529552205026},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1529552205028},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1529552205028},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1529552205029},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1529552205029},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1529552205029},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1529552205029},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1529552205029},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1529552205029},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1529552205029},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1529552205029},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1529552205030},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1529552205030},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1529552205030},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1529552205030},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1529552205030},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1529552205030},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1529552205030},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1529552205031},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1529552205031},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1529552205032},{"_id":"themes/hexo-theme-next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1529552205038},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1529552205038},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1529552205041},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1529552205041},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1529552205041},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1529552205025},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1529552204964},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1529552204964},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1529552204971},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1529552204971},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1529552204971},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1529552204971},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1529552204971},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1529552204973},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1529552204976},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1529552204978},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1529552204978},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1529552204979},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1529552204979},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1529552204979},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1529552204979},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1529552204979},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1529552204981},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1529552204982},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1529552204982},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1529552204982},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1529552204982},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1529552204982},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1529552204982},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1529552204982},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1529552204984},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1529552204984},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1529552204984},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1529552204984},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1529552204984},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1529552204986},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1529552204986},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1529552204986},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1529552204986},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1529552204986},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1529552204987},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1529552204993},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1529552204997},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1529552204998},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1529552204999},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1529552205005},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1529552205005},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1529552205005},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1529552205005},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1529552205005},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1529552205005},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1529552205008},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1529552205008},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1529552205009},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1529552205009},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1529552205010},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1529552205012},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1529552205012},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1529552205013},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1529552205038},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1529552205038},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1529552204998},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1529552205024},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1529552205024},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1529552205040},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1529552204971},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1529552204971},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1529552204971},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1529552204971},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1529552204972},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1529552204972},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1529552204972},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1529552204972},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1529552204972},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1529552204972},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1529552204972},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1529552204972},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1529552204973},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1529552204973},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1529552204973},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1529552204973},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1529552204973},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1529552204973},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1529552204973},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1529552204973},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1529552204974},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1529552204974},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1529552204974},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1529552204974},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1529552204974},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1529552204974},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1529552204974},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1529552204974},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1529552204975},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1529552204975},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1529552204975},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1529552204975},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1529552204975},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1529552204975},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1529552204975},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1529552204975},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1529552204975},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1529552204976},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1529552204976},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1529552204976},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1529552204976},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1529552204976},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1529552204976},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1529552204976},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1529552204976},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1529552204977},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1529552204977},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1529552204977},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1529552204977},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1529552204977},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1529552204977},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1529552204977},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1529552204978},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1529552204978},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1529552204978},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1529552204978},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1529552204978},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1529552204978},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1529552204984},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1529552204984},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1529552204984},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1529552204996},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1529552204996},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1529552204996},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1529552204996},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1529552204997},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1529552205007},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1529552205007},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1529552205007},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1529552205007},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1529552205008},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1529552205008},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1529552205014},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1529552205017},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1529552205023},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1529552205002},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1529552205036},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1529552205021},{"_id":"public/about/index.html","hash":"91a7c23f2faee546fc301a468e1f11c34b074447","modified":1531814298591},{"_id":"public/categories/index.html","hash":"20cdd2ead8a7beaa08937da3e5d19628a8116998","modified":1531814298598},{"_id":"public/tags/index.html","hash":"dddc24a5fe2b277ce5e3efcea2c825265b8d1919","modified":1531814298599},{"_id":"public/archives/index.html","hash":"90cd548a6b53c86540427a4822da063b6740033d","modified":1531814386292},{"_id":"public/archives/2018/index.html","hash":"c837915c09a6d44a591f91d705c5f9f0ccaf1a64","modified":1531814386292},{"_id":"public/archives/2018/06/index.html","hash":"6bd91c9ffbc61f0c670749e717cd36801f4a2ee6","modified":1531814298599},{"_id":"public/archives/2018/07/index.html","hash":"b17bee6866ae08be1d4793ce248ef1218c773222","modified":1531814386293},{"_id":"public/2018/07/04/go_goroutine/index.html","hash":"c32f76f3a610f7f3aadb6049eeace5d0106a42c7","modified":1531814298600},{"_id":"public/2018/07/04/eth/index.html","hash":"b3ddc57c1c540fe447390bd845146d5ace9d239c","modified":1531814298601},{"_id":"public/2018/07/04/coin/index.html","hash":"3180623a7f7b5c8d8e8eb1288a3639fe2bedd4f9","modified":1531814298604},{"_id":"public/2018/07/04/solidity_01/index.html","hash":"244d4f8a419d20f15144c1b819155563842895a6","modified":1531814298600},{"_id":"public/index.html","hash":"7432f0cc1bf3d8f563ea5512ca986882ecfe6daf","modified":1531814386293},{"_id":"public/2018/06/21/hello-world/index.html","hash":"4b2a27e210201334b154c2577dc5a9f07d8e9093","modified":1531814298599},{"_id":"public/2018/06/21/ipfs/index.html","hash":"1fdc2c899919843d9503870b4ec590d20a8abbf7","modified":1531814298604},{"_id":"public/2018/06/21/golang_base/index.html","hash":"61aebf32861f2504c8b335dbefa7d5092915bca5","modified":1531814298604},{"_id":"source/_posts/makefile.md","hash":"bdc0951ae63d00bf6aae7539ac7b577c8dc06a90","modified":1530874120000},{"_id":"source/_posts/sodility_optimal.md","hash":"ef7d4bbf59a3bd969457cf18cf5b754abfa9ec3f","modified":1530874040000},{"_id":"source/_posts/solidity_inter_call.md","hash":"cdb6823796f8be41a98434e7d237de1384633efd","modified":1531814377774},{"_id":"source/_posts/solidity_library.md","hash":"07d47810ba61b0c0575aebe08b4395a379aab82f","modified":1530699316000},{"_id":"public/archives/page/2/index.html","hash":"569504e257e7d379c6f0b44ffc549c27e1d48110","modified":1531814298608},{"_id":"public/archives/2018/page/2/index.html","hash":"fea0492769134f8dc59fe66e52f233c02bfb3f3b","modified":1531814298608},{"_id":"public/page/2/index.html","hash":"c3a15c2c6bfacf6a947a7eac69ef451a8cf763ca","modified":1531814298608},{"_id":"public/2018/07/17/solidity_inter_call/index.html","hash":"cc9101535f6f9435acf2c8f536f401aff22a7602","modified":1531814386293},{"_id":"public/2018/07/17/solidity_library/index.html","hash":"53fd727d9a1c1a9d4c0eaf68df41a3d3f3b16efb","modified":1531814298609},{"_id":"public/2018/07/17/sodility_optimal/index.html","hash":"ac6eb44bf04d0620bda8ff9ee4f689d926d1dfe1","modified":1531814298609},{"_id":"public/2018/07/17/makefile/index.html","hash":"602483a89aa46e4e63419230276912bb5b232960","modified":1531814298609}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-06-19T09:14:17.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-06-19 17:14:17\n---\n","updated":"2018-06-21T03:36:44.945Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjj6hwjn00001lihaqdm6xniu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-06-19T09:12:34.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-06-19 17:12:34\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-06-21T03:36:44.945Z","path":"categories/index.html","layout":"page","_id":"cjj6hwjnk0003lihat10s9zs8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-06-19T09:10:52.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-06-19 17:10:52\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-06-21T03:36:44.945Z","path":"tags/index.html","layout":"page","_id":"cjj6hwjo90005lihasidn74r3","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"基于ERC20发币合约","_content":"\n```solidity\npragma solidity ^0.4.16;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract TokenERC20 {\n    // Public variables of the token\n    string public name;     //名称\n    string public symbol;   //标记\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;  //总额\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance; //限额\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        // 供应量 10的18次方是从wei转换到ether\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     * 给其他地址设置限额\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address a9nd notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n}\n\n/******************************************/\n/*       ADVANCED TOKEN STARTS HERE       */\n/******************************************/\n\ncontract MyAdvancedToken is owned, TokenERC20 {\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function MyAdvancedToken(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n    /// @notice Create `mintedAmount` tokens and send it to `target` 挖矿\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        emit Transfer(0, this, mintedAmount); //代币总量需要无中生有地进行累加\n        emit Transfer(this, target, mintedAmount); // 合约帐户给矿工帐户进行发代币\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n    /// @param newSellPrice Price the users can sell to the contract\n    /// @param newBuyPrice Price users can buy from the contract\n    /// 从合约处买入的价钱设置；\n    /// 卖给合约帐户的价钱设置；\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    /// @notice Buy tokens from contract by sending ether\n    /// 代币帐户使用以太坊买入代币\n    /// - 通过payable关键字，请求自带的以太坊发给合约帐户；\n    /// - 给代币账号进行转账操作；\n    function buy() payable public {\n        uint amount = msg.value / buyPrice;               // calculates the amount\n        _transfer(this, msg.sender, amount);              // makes the transfers\n    }\n\n    /// @notice Sell `amount` tokens to contract\n    /// @param amount amount of tokens to be sold\n    /// 代币帐户将代币换成以太坊\n    function sell(uint256 amount) public {\n        address myAddress = this;\n        require(myAddress.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n        _transfer(msg.sender, this, amount);              // makes the transfers\n        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n    }\n}\n```\n","source":"_posts/coin.md","raw":"---\n title: 基于ERC20发币合约\n---\n\n```solidity\npragma solidity ^0.4.16;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract TokenERC20 {\n    // Public variables of the token\n    string public name;     //名称\n    string public symbol;   //标记\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;  //总额\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance; //限额\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        // 供应量 10的18次方是从wei转换到ether\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     * 给其他地址设置限额\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address a9nd notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n}\n\n/******************************************/\n/*       ADVANCED TOKEN STARTS HERE       */\n/******************************************/\n\ncontract MyAdvancedToken is owned, TokenERC20 {\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function MyAdvancedToken(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n    /// @notice Create `mintedAmount` tokens and send it to `target` 挖矿\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        emit Transfer(0, this, mintedAmount); //代币总量需要无中生有地进行累加\n        emit Transfer(this, target, mintedAmount); // 合约帐户给矿工帐户进行发代币\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n    /// @param newSellPrice Price the users can sell to the contract\n    /// @param newBuyPrice Price users can buy from the contract\n    /// 从合约处买入的价钱设置；\n    /// 卖给合约帐户的价钱设置；\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    /// @notice Buy tokens from contract by sending ether\n    /// 代币帐户使用以太坊买入代币\n    /// - 通过payable关键字，请求自带的以太坊发给合约帐户；\n    /// - 给代币账号进行转账操作；\n    function buy() payable public {\n        uint amount = msg.value / buyPrice;               // calculates the amount\n        _transfer(this, msg.sender, amount);              // makes the transfers\n    }\n\n    /// @notice Sell `amount` tokens to contract\n    /// @param amount amount of tokens to be sold\n    /// 代币帐户将代币换成以太坊\n    function sell(uint256 amount) public {\n        address myAddress = this;\n        require(myAddress.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n        _transfer(msg.sender, this, amount);              // makes the transfers\n        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n    }\n}\n```\n","slug":"coin","published":1,"date":"2018-07-04T02:25:20.498Z","updated":"2018-07-04T02:25:20.498Z","_id":"cjj6hwjmh0000lihaqcq6vnye","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.16;</span><br><span class=\"line\"></span><br><span class=\"line\">contract owned &#123;</span><br><span class=\"line\">    address public owner;</span><br><span class=\"line\"></span><br><span class=\"line\">    function owned() public &#123;</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    modifier onlyOwner &#123;</span><br><span class=\"line\">        require(msg.sender == owner);</span><br><span class=\"line\">        _;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function transferOwnership(address newOwner) onlyOwner public &#123;</span><br><span class=\"line\">        owner = newOwner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface tokenRecipient &#123; function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract TokenERC20 &#123;</span><br><span class=\"line\">    // Public variables of the token</span><br><span class=\"line\">    string public name;     //名称</span><br><span class=\"line\">    string public symbol;   //标记</span><br><span class=\"line\">    uint8 public decimals = 18;</span><br><span class=\"line\">    // 18 decimals is the strongly suggested default, avoid changing it</span><br><span class=\"line\">    uint256 public totalSupply;  //总额</span><br><span class=\"line\"></span><br><span class=\"line\">    // This creates an array with all balances</span><br><span class=\"line\">    mapping (address =&gt; uint256) public balanceOf;</span><br><span class=\"line\">    mapping (address =&gt; mapping (address =&gt; uint256)) public allowance; //限额</span><br><span class=\"line\"></span><br><span class=\"line\">    // This generates a public event on the blockchain that will notify clients</span><br><span class=\"line\">    event Transfer(address indexed from, address indexed to, uint256 value);</span><br><span class=\"line\"></span><br><span class=\"line\">    // This notifies clients about the amount burnt</span><br><span class=\"line\">    event Burn(address indexed from, uint256 value);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Constrctor function</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Initializes contract with initial supply tokens to the creator of the contract</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function TokenERC20(</span><br><span class=\"line\">        uint256 initialSupply,</span><br><span class=\"line\">        string tokenName,</span><br><span class=\"line\">        string tokenSymbol</span><br><span class=\"line\">    ) public &#123;</span><br><span class=\"line\">        // 供应量 10的18次方是从wei转换到ether</span><br><span class=\"line\">        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount</span><br><span class=\"line\">        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens</span><br><span class=\"line\">        name = tokenName;                                   // Set the name for display purposes</span><br><span class=\"line\">        symbol = tokenSymbol;                               // Set the symbol for display purposes</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Internal transfer, only can be called by this contract</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function _transfer(address _from, address _to, uint _value) internal &#123;</span><br><span class=\"line\">        // Prevent transfer to 0x0 address. Use burn() instead</span><br><span class=\"line\">        require(_to != 0x0);</span><br><span class=\"line\">        // Check if the sender has enough</span><br><span class=\"line\">        require(balanceOf[_from] &gt;= _value);</span><br><span class=\"line\">        // Check for overflows</span><br><span class=\"line\">        require(balanceOf[_to] + _value &gt; balanceOf[_to]);</span><br><span class=\"line\">        // Save this for an assertion in the future</span><br><span class=\"line\">        uint previousBalances = balanceOf[_from] + balanceOf[_to];</span><br><span class=\"line\">        // Subtract from the sender</span><br><span class=\"line\">        balanceOf[_from] -= _value;</span><br><span class=\"line\">        // Add the same to the recipient</span><br><span class=\"line\">        balanceOf[_to] += _value;</span><br><span class=\"line\">        emit Transfer(_from, _to, _value);</span><br><span class=\"line\">        // Asserts are used to use static analysis to find bugs in your code. They should never fail</span><br><span class=\"line\">        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Transfer tokens</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Send `_value` tokens to `_to` from your account</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _to The address of the recipient</span><br><span class=\"line\">     * @param _value the amount to send</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function transfer(address _to, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        _transfer(msg.sender, _to, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Transfer tokens from other address</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Send `_value` tokens to `_to` in behalf of `_from`</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _from The address of the sender</span><br><span class=\"line\">     * @param _to The address of the recipient</span><br><span class=\"line\">     * @param _value the amount to send</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(_value &lt;= allowance[_from][msg.sender]);     // Check allowance</span><br><span class=\"line\">        allowance[_from][msg.sender] -= _value;</span><br><span class=\"line\">        _transfer(_from, _to, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Set allowance for other address</span><br><span class=\"line\">     * 给其他地址设置限额</span><br><span class=\"line\">     * Allows `_spender` to spend no more than `_value` tokens in your behalf</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _spender The address authorized to spend</span><br><span class=\"line\">     * @param _value the max amount they can spend</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function approve(address _spender, uint256 _value) public</span><br><span class=\"line\">        returns (bool success) &#123;</span><br><span class=\"line\">        allowance[msg.sender][_spender] = _value;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Set allowance for other address a9nd notify</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _spender The address authorized to spend</span><br><span class=\"line\">     * @param _value the max amount they can spend</span><br><span class=\"line\">     * @param _extraData some extra information to send to the approved contract</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function approveAndCall(address _spender, uint256 _value, bytes _extraData)</span><br><span class=\"line\">        public</span><br><span class=\"line\">        returns (bool success) &#123;</span><br><span class=\"line\">        tokenRecipient spender = tokenRecipient(_spender);</span><br><span class=\"line\">        if (approve(_spender, _value)) &#123;</span><br><span class=\"line\">            spender.receiveApproval(msg.sender, _value, this, _extraData);</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Destroy tokens</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Remove `_value` tokens from the system irreversibly</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _value the amount of money to burn</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function burn(uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(balanceOf[msg.sender] &gt;= _value);   // Check if the sender has enough</span><br><span class=\"line\">        balanceOf[msg.sender] -= _value;            // Subtract from the sender</span><br><span class=\"line\">        totalSupply -= _value;                      // Updates totalSupply</span><br><span class=\"line\">        emit Burn(msg.sender, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Destroy tokens from other account</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _from the address of the sender</span><br><span class=\"line\">     * @param _value the amount of money to burn</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function burnFrom(address _from, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(balanceOf[_from] &gt;= _value);                // Check if the targeted balance is enough</span><br><span class=\"line\">        require(_value &lt;= allowance[_from][msg.sender]);    // Check allowance</span><br><span class=\"line\">        balanceOf[_from] -= _value;                         // Subtract from the targeted balance</span><br><span class=\"line\">        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&apos;s allowance</span><br><span class=\"line\">        totalSupply -= _value;                              // Update totalSupply</span><br><span class=\"line\">        emit Burn(_from, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/******************************************/</span><br><span class=\"line\">/*       ADVANCED TOKEN STARTS HERE       */</span><br><span class=\"line\">/******************************************/</span><br><span class=\"line\"></span><br><span class=\"line\">contract MyAdvancedToken is owned, TokenERC20 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    uint256 public sellPrice;</span><br><span class=\"line\">    uint256 public buyPrice;</span><br><span class=\"line\"></span><br><span class=\"line\">    mapping (address =&gt; bool) public frozenAccount;</span><br><span class=\"line\"></span><br><span class=\"line\">    /* This generates a public event on the blockchain that will notify clients */</span><br><span class=\"line\">    event FrozenFunds(address target, bool frozen);</span><br><span class=\"line\"></span><br><span class=\"line\">    /* Initializes contract with initial supply tokens to the creator of the contract */</span><br><span class=\"line\">    function MyAdvancedToken(</span><br><span class=\"line\">        uint256 initialSupply,</span><br><span class=\"line\">        string tokenName,</span><br><span class=\"line\">        string tokenSymbol</span><br><span class=\"line\">    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /* Internal transfer, only can be called by this contract */</span><br><span class=\"line\">    function _transfer(address _from, address _to, uint _value) internal &#123;</span><br><span class=\"line\">        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead</span><br><span class=\"line\">        require (balanceOf[_from] &gt;= _value);               // Check if the sender has enough</span><br><span class=\"line\">        require (balanceOf[_to] + _value &gt;= balanceOf[_to]); // Check for overflows</span><br><span class=\"line\">        require(!frozenAccount[_from]);                     // Check if sender is frozen</span><br><span class=\"line\">        require(!frozenAccount[_to]);                       // Check if recipient is frozen</span><br><span class=\"line\">        balanceOf[_from] -= _value;                         // Subtract from the sender</span><br><span class=\"line\">        balanceOf[_to] += _value;                           // Add the same to the recipient</span><br><span class=\"line\">        emit Transfer(_from, _to, _value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice Create `mintedAmount` tokens and send it to `target` 挖矿</span><br><span class=\"line\">    /// @param target Address to receive the tokens</span><br><span class=\"line\">    /// @param mintedAmount the amount of tokens it will receive</span><br><span class=\"line\">    function mintToken(address target, uint256 mintedAmount) onlyOwner public &#123;</span><br><span class=\"line\">        balanceOf[target] += mintedAmount;</span><br><span class=\"line\">        totalSupply += mintedAmount;</span><br><span class=\"line\">        emit Transfer(0, this, mintedAmount); //代币总量需要无中生有地进行累加</span><br><span class=\"line\">        emit Transfer(this, target, mintedAmount); // 合约帐户给矿工帐户进行发代币</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice `freeze? Prevent | Allow` `target` from sending &amp; receiving tokens</span><br><span class=\"line\">    /// @param target Address to be frozen</span><br><span class=\"line\">    /// @param freeze either to freeze it or not</span><br><span class=\"line\">    function freezeAccount(address target, bool freeze) onlyOwner public &#123;</span><br><span class=\"line\">        frozenAccount[target] = freeze;</span><br><span class=\"line\">        emit FrozenFunds(target, freeze);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth</span><br><span class=\"line\">    /// @param newSellPrice Price the users can sell to the contract</span><br><span class=\"line\">    /// @param newBuyPrice Price users can buy from the contract</span><br><span class=\"line\">    /// 从合约处买入的价钱设置；</span><br><span class=\"line\">    /// 卖给合约帐户的价钱设置；</span><br><span class=\"line\">    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public &#123;</span><br><span class=\"line\">        sellPrice = newSellPrice;</span><br><span class=\"line\">        buyPrice = newBuyPrice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice Buy tokens from contract by sending ether</span><br><span class=\"line\">    /// 代币帐户使用以太坊买入代币</span><br><span class=\"line\">    /// - 通过payable关键字，请求自带的以太坊发给合约帐户；</span><br><span class=\"line\">    /// - 给代币账号进行转账操作；</span><br><span class=\"line\">    function buy() payable public &#123;</span><br><span class=\"line\">        uint amount = msg.value / buyPrice;               // calculates the amount</span><br><span class=\"line\">        _transfer(this, msg.sender, amount);              // makes the transfers</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice Sell `amount` tokens to contract</span><br><span class=\"line\">    /// @param amount amount of tokens to be sold</span><br><span class=\"line\">    /// 代币帐户将代币换成以太坊</span><br><span class=\"line\">    function sell(uint256 amount) public &#123;</span><br><span class=\"line\">        address myAddress = this;</span><br><span class=\"line\">        require(myAddress.balance &gt;= amount * sellPrice);      // checks if the contract has enough ether to buy</span><br><span class=\"line\">        _transfer(msg.sender, this, amount);              // makes the transfers</span><br><span class=\"line\">        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It&apos;s important to do this last to avoid recursion attacks</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.16;</span><br><span class=\"line\"></span><br><span class=\"line\">contract owned &#123;</span><br><span class=\"line\">    address public owner;</span><br><span class=\"line\"></span><br><span class=\"line\">    function owned() public &#123;</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    modifier onlyOwner &#123;</span><br><span class=\"line\">        require(msg.sender == owner);</span><br><span class=\"line\">        _;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function transferOwnership(address newOwner) onlyOwner public &#123;</span><br><span class=\"line\">        owner = newOwner;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface tokenRecipient &#123; function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract TokenERC20 &#123;</span><br><span class=\"line\">    // Public variables of the token</span><br><span class=\"line\">    string public name;     //名称</span><br><span class=\"line\">    string public symbol;   //标记</span><br><span class=\"line\">    uint8 public decimals = 18;</span><br><span class=\"line\">    // 18 decimals is the strongly suggested default, avoid changing it</span><br><span class=\"line\">    uint256 public totalSupply;  //总额</span><br><span class=\"line\"></span><br><span class=\"line\">    // This creates an array with all balances</span><br><span class=\"line\">    mapping (address =&gt; uint256) public balanceOf;</span><br><span class=\"line\">    mapping (address =&gt; mapping (address =&gt; uint256)) public allowance; //限额</span><br><span class=\"line\"></span><br><span class=\"line\">    // This generates a public event on the blockchain that will notify clients</span><br><span class=\"line\">    event Transfer(address indexed from, address indexed to, uint256 value);</span><br><span class=\"line\"></span><br><span class=\"line\">    // This notifies clients about the amount burnt</span><br><span class=\"line\">    event Burn(address indexed from, uint256 value);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Constrctor function</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Initializes contract with initial supply tokens to the creator of the contract</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function TokenERC20(</span><br><span class=\"line\">        uint256 initialSupply,</span><br><span class=\"line\">        string tokenName,</span><br><span class=\"line\">        string tokenSymbol</span><br><span class=\"line\">    ) public &#123;</span><br><span class=\"line\">        // 供应量 10的18次方是从wei转换到ether</span><br><span class=\"line\">        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount</span><br><span class=\"line\">        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens</span><br><span class=\"line\">        name = tokenName;                                   // Set the name for display purposes</span><br><span class=\"line\">        symbol = tokenSymbol;                               // Set the symbol for display purposes</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Internal transfer, only can be called by this contract</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function _transfer(address _from, address _to, uint _value) internal &#123;</span><br><span class=\"line\">        // Prevent transfer to 0x0 address. Use burn() instead</span><br><span class=\"line\">        require(_to != 0x0);</span><br><span class=\"line\">        // Check if the sender has enough</span><br><span class=\"line\">        require(balanceOf[_from] &gt;= _value);</span><br><span class=\"line\">        // Check for overflows</span><br><span class=\"line\">        require(balanceOf[_to] + _value &gt; balanceOf[_to]);</span><br><span class=\"line\">        // Save this for an assertion in the future</span><br><span class=\"line\">        uint previousBalances = balanceOf[_from] + balanceOf[_to];</span><br><span class=\"line\">        // Subtract from the sender</span><br><span class=\"line\">        balanceOf[_from] -= _value;</span><br><span class=\"line\">        // Add the same to the recipient</span><br><span class=\"line\">        balanceOf[_to] += _value;</span><br><span class=\"line\">        emit Transfer(_from, _to, _value);</span><br><span class=\"line\">        // Asserts are used to use static analysis to find bugs in your code. They should never fail</span><br><span class=\"line\">        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Transfer tokens</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Send `_value` tokens to `_to` from your account</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _to The address of the recipient</span><br><span class=\"line\">     * @param _value the amount to send</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function transfer(address _to, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        _transfer(msg.sender, _to, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Transfer tokens from other address</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Send `_value` tokens to `_to` in behalf of `_from`</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _from The address of the sender</span><br><span class=\"line\">     * @param _to The address of the recipient</span><br><span class=\"line\">     * @param _value the amount to send</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(_value &lt;= allowance[_from][msg.sender]);     // Check allowance</span><br><span class=\"line\">        allowance[_from][msg.sender] -= _value;</span><br><span class=\"line\">        _transfer(_from, _to, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Set allowance for other address</span><br><span class=\"line\">     * 给其他地址设置限额</span><br><span class=\"line\">     * Allows `_spender` to spend no more than `_value` tokens in your behalf</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _spender The address authorized to spend</span><br><span class=\"line\">     * @param _value the max amount they can spend</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function approve(address _spender, uint256 _value) public</span><br><span class=\"line\">        returns (bool success) &#123;</span><br><span class=\"line\">        allowance[msg.sender][_spender] = _value;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Set allowance for other address a9nd notify</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _spender The address authorized to spend</span><br><span class=\"line\">     * @param _value the max amount they can spend</span><br><span class=\"line\">     * @param _extraData some extra information to send to the approved contract</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function approveAndCall(address _spender, uint256 _value, bytes _extraData)</span><br><span class=\"line\">        public</span><br><span class=\"line\">        returns (bool success) &#123;</span><br><span class=\"line\">        tokenRecipient spender = tokenRecipient(_spender);</span><br><span class=\"line\">        if (approve(_spender, _value)) &#123;</span><br><span class=\"line\">            spender.receiveApproval(msg.sender, _value, this, _extraData);</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Destroy tokens</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Remove `_value` tokens from the system irreversibly</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _value the amount of money to burn</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function burn(uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(balanceOf[msg.sender] &gt;= _value);   // Check if the sender has enough</span><br><span class=\"line\">        balanceOf[msg.sender] -= _value;            // Subtract from the sender</span><br><span class=\"line\">        totalSupply -= _value;                      // Updates totalSupply</span><br><span class=\"line\">        emit Burn(msg.sender, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Destroy tokens from other account</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param _from the address of the sender</span><br><span class=\"line\">     * @param _value the amount of money to burn</span><br><span class=\"line\">     */</span><br><span class=\"line\">    function burnFrom(address _from, uint256 _value) public returns (bool success) &#123;</span><br><span class=\"line\">        require(balanceOf[_from] &gt;= _value);                // Check if the targeted balance is enough</span><br><span class=\"line\">        require(_value &lt;= allowance[_from][msg.sender]);    // Check allowance</span><br><span class=\"line\">        balanceOf[_from] -= _value;                         // Subtract from the targeted balance</span><br><span class=\"line\">        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&apos;s allowance</span><br><span class=\"line\">        totalSupply -= _value;                              // Update totalSupply</span><br><span class=\"line\">        emit Burn(_from, _value);</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/******************************************/</span><br><span class=\"line\">/*       ADVANCED TOKEN STARTS HERE       */</span><br><span class=\"line\">/******************************************/</span><br><span class=\"line\"></span><br><span class=\"line\">contract MyAdvancedToken is owned, TokenERC20 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    uint256 public sellPrice;</span><br><span class=\"line\">    uint256 public buyPrice;</span><br><span class=\"line\"></span><br><span class=\"line\">    mapping (address =&gt; bool) public frozenAccount;</span><br><span class=\"line\"></span><br><span class=\"line\">    /* This generates a public event on the blockchain that will notify clients */</span><br><span class=\"line\">    event FrozenFunds(address target, bool frozen);</span><br><span class=\"line\"></span><br><span class=\"line\">    /* Initializes contract with initial supply tokens to the creator of the contract */</span><br><span class=\"line\">    function MyAdvancedToken(</span><br><span class=\"line\">        uint256 initialSupply,</span><br><span class=\"line\">        string tokenName,</span><br><span class=\"line\">        string tokenSymbol</span><br><span class=\"line\">    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /* Internal transfer, only can be called by this contract */</span><br><span class=\"line\">    function _transfer(address _from, address _to, uint _value) internal &#123;</span><br><span class=\"line\">        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead</span><br><span class=\"line\">        require (balanceOf[_from] &gt;= _value);               // Check if the sender has enough</span><br><span class=\"line\">        require (balanceOf[_to] + _value &gt;= balanceOf[_to]); // Check for overflows</span><br><span class=\"line\">        require(!frozenAccount[_from]);                     // Check if sender is frozen</span><br><span class=\"line\">        require(!frozenAccount[_to]);                       // Check if recipient is frozen</span><br><span class=\"line\">        balanceOf[_from] -= _value;                         // Subtract from the sender</span><br><span class=\"line\">        balanceOf[_to] += _value;                           // Add the same to the recipient</span><br><span class=\"line\">        emit Transfer(_from, _to, _value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice Create `mintedAmount` tokens and send it to `target` 挖矿</span><br><span class=\"line\">    /// @param target Address to receive the tokens</span><br><span class=\"line\">    /// @param mintedAmount the amount of tokens it will receive</span><br><span class=\"line\">    function mintToken(address target, uint256 mintedAmount) onlyOwner public &#123;</span><br><span class=\"line\">        balanceOf[target] += mintedAmount;</span><br><span class=\"line\">        totalSupply += mintedAmount;</span><br><span class=\"line\">        emit Transfer(0, this, mintedAmount); //代币总量需要无中生有地进行累加</span><br><span class=\"line\">        emit Transfer(this, target, mintedAmount); // 合约帐户给矿工帐户进行发代币</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice `freeze? Prevent | Allow` `target` from sending &amp; receiving tokens</span><br><span class=\"line\">    /// @param target Address to be frozen</span><br><span class=\"line\">    /// @param freeze either to freeze it or not</span><br><span class=\"line\">    function freezeAccount(address target, bool freeze) onlyOwner public &#123;</span><br><span class=\"line\">        frozenAccount[target] = freeze;</span><br><span class=\"line\">        emit FrozenFunds(target, freeze);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth</span><br><span class=\"line\">    /// @param newSellPrice Price the users can sell to the contract</span><br><span class=\"line\">    /// @param newBuyPrice Price users can buy from the contract</span><br><span class=\"line\">    /// 从合约处买入的价钱设置；</span><br><span class=\"line\">    /// 卖给合约帐户的价钱设置；</span><br><span class=\"line\">    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public &#123;</span><br><span class=\"line\">        sellPrice = newSellPrice;</span><br><span class=\"line\">        buyPrice = newBuyPrice;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice Buy tokens from contract by sending ether</span><br><span class=\"line\">    /// 代币帐户使用以太坊买入代币</span><br><span class=\"line\">    /// - 通过payable关键字，请求自带的以太坊发给合约帐户；</span><br><span class=\"line\">    /// - 给代币账号进行转账操作；</span><br><span class=\"line\">    function buy() payable public &#123;</span><br><span class=\"line\">        uint amount = msg.value / buyPrice;               // calculates the amount</span><br><span class=\"line\">        _transfer(this, msg.sender, amount);              // makes the transfers</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// @notice Sell `amount` tokens to contract</span><br><span class=\"line\">    /// @param amount amount of tokens to be sold</span><br><span class=\"line\">    /// 代币帐户将代币换成以太坊</span><br><span class=\"line\">    function sell(uint256 amount) public &#123;</span><br><span class=\"line\">        address myAddress = this;</span><br><span class=\"line\">        require(myAddress.balance &gt;= amount * sellPrice);      // checks if the contract has enough ether to buy</span><br><span class=\"line\">        _transfer(msg.sender, this, amount);              // makes the transfers</span><br><span class=\"line\">        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It&apos;s important to do this last to avoid recursion attacks</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"部署以太坊私链：","_content":"帐号准备：\n\n​\t部署合约需要外部帐户，进入交互界面；\n\n```\n> eth.accounts  //分配给开发者的帐户\n[\"0x7b30423838ac0bccccfcbb9d9b494b834a76f847\"]\n```\n\n创建新帐户\n\n```\n> personal.newAccount(\"test\")\n\"0xa7287e272e3814f59025ece844665e6a30e4d296\"\n```\n\n查看帐户列表\n\n```\n> personal.listAccounts\n[\"0x7b30423838ac0bccccfcbb9d9b494b834a76f847\", \"0xa7287e272e3814f59025ece844665e6a30e4d296\"]\n```\n\n查看帐号余额\t\t\t//新建的帐户此时余额为0\n\n```\n> eth.getBalance(\"0xa7287e272e3814f59025ece844665e6a30e4d296\")\n0\n```\n\n转账\t\t\t\t// 没有余额的帐户无法部署合约，从默认帐户转账给新帐户\n\n```\n> eth.sendTransaction({from:eth.accounts[0], to: eth.accounts[2], value: web3.toWei(1, \"ether\")})\n\"0x5f2c80f25b83b3b5b04f89cee37b8a4fe3950f8f66e81f8169c4719a0f37e584\"\n```\n\n### 部署合约\n\n1、解锁帐户 \t\t\t//只有解锁帐户之后，才能进行合约的部署；\n\n```\n> personal.unlockAccount(eth.accounts[2], \"test\")\ntrue\n```\n\n2、编写合约\n\n3、部署合约 \t\t//https://ethereum.github.io/browser-solidity/\n\n4、部署合约之后查看余额\n\n> ```\n> eth.getBalance(eth.accounts[2])\n> 999999999999603541\n> ```\n\n5、运行合约：\n\n> ```\n> > hello\n> {\n> abi: [{\n>     constant: true,\n>     inputs: [],\n>     name: \"say\",\n>     outputs: [{...}],\n>     payable: false,\n>     stateMutability: \"view\",\n>     type: \"function\"\n> }, {\n>     inputs: [{...}],\n>     payable: false,\n>     stateMutability: \"nonpayable\",\n>     type: \"constructor\"\n> }],\n> address: \"0xd81c0b77218fda9037ae5df48f6e75a6b3e6ffd0\",\n> transactionHash: \"0x1cc62a197d92a2ab848e55deaae9c1fe5c19be18c3b17c33b00fc6173e1c52a4\",\n> allEvents: function(),\n> say: function()\n> }\n> > hello.say()\n> \"Hello World\"\n> ```\n\n### solidity语法：\n\n写Solidity最大的不同在于，我们要随时计算好我们的gas消耗，方法的复杂度，变量类型的存储位置（memory，storage等等）都会决定gas的消耗量。\n\n以上编写合约在vim，编译在Remix，运行端在geth console。过程十分繁复，不适合大规模工程开发，需要通过Truffle来整合以上操作；\n\n一、环境配置：\n\n​\ttruffle依赖于nodejs，可能存在版本之间的兼容性问题，首先删除自带的nodejs和npm，再进行全安装；\n\n```\nsudo apt-get remove nodejs\nsudo apt-get remove npm\nsudo apt-get update\nwhich node\nwget https://nodejs.org/dist/v8.8.0/node-v8.8.0-linux-x64.tar.gz\nsudo tar -xf node-v8.8.0-linux-x64.tar.gz --directory /usr/local --strip-components 1\nnode --version\nnpm --version\nsudo npm install -g truffle\n```\n\n二、\n\n```\n1. block.blockhash(uint blockNumber) returns (bytes32): 返回参数区块编号的hash值。（范围仅限于最近256块，还不包含当然块）\n2. block.coinbase (address): 当前区块矿工地址\n3. block.difficulty (uint): 当前区块难度\n4. block.gaslimit (uint): 当前区块的gaslimit\n5. block.number (uint): 当前区块编号\n6. block.timestamp (uint): 当前区块的timestamp，使用UNIX时间秒\n7. msg.data (bytes): 完整的calldata\n8. msg.gas (uint): 剩余的gas\n9. msg.sender (address): 信息的发送方 (当前调用)\n10. msg.sig (bytes4): calldata的前四个字节 (i.e. 函数标识符)\n11. msg.value (uint): 消息发送的wei的数量\n12. now (uint): 当前区块的timestamp (block.timestamp别名)\n13. tx.gasprice (uint): 交易的gas单价\n14. tx.origin (address): 交易发送方地址(完全的链调用)\n```\n\n### 三、发币\n\n使用truffle init 来初始化项目；但truffle推出Boxes功能之后，我们可以直接套用react-box的样板，节省时间；\n\n```\nroot@keke:~/truffle-project/coin# truffle  unbox react-box\nDownloading...\nUnpacking...\nSetting up...\nUnbox successful. Sweet!\n\nCommands:\n\n  Compile:              truffle compile\n  Migrate:              truffle migrate\n  Test contracts:       truffle test\n  Test dapp:            npm test\n  Run dev server:       npm run start\n  Build for production: npm run build\n```\n\n编译自带的智能合约：\n\n```\nroot@keke:~/truffle-project/coin# truffle  compile\nCompiling ./contracts/Migrations.sol...\nCompiling ./contracts/SimpleStorage.sol...\n\nCompilation warnings encountered:\n\n/root/truffle-project/coin/contracts/Migrations.sol:11:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n  function Migrations() public {\n  ^ (Relevant source part starts here and spans across multiple lines).\n\nWriting artifacts to ./build/contracts\n\n```\n\n3、安装OpenZeppelin来简化加密钱包开发过程；\n\n`OpenZeppelin`是一套能够给我们方便提供编写加密合约的函数库，同时里面也提供了兼容`ERC20`的智能合约。\n\n```\nnpm install zeppelin-solidity\n```\n\n4、创建代币合约\n\n```\npragma solidity ^0.4.0;\n\nimport \"../node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\";\n\ncontract NewCoin is StandardToken{\n    string public name = \"NewCoin\";\n    string public symbol = \"NC\";\n    uint8 public decimals = 8;\n    uint256 public INITIAL_SUPPLY = 21000000;\n\n    function NewCoin(){\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n    }\n}\n```\n\n5、编译、部署和验证\n\n在`migrations/`目录下建立一个`3_deploy_contracts.js`文件，内容如下：\n\n```\nvar NenmoCoin = artifacts.require(\"./NenmoCoin.sol\");\n\nmodule.exports = function(deployer) {\n  deployer.deploy(NenmoCoin);\n};\n```\n\n部署：\n\n```\ntruffle develop\t\t\t//进入开发环境\ncompile\t\t\t\t    //编译\nmigrate\t\t\t\t\t//部署在truffle环境上\n```\n\n测试：\n\n```\ntruffle(develop)> var c\nundefined\ntruffle(develop)> c = NenmoCoin.deployed().then(instance => contract = instance)\nTruffleContract {\n  constructor:\n......\n  allEvents: [Function: bound ],\n  address: '0x8f0483125fcb9aaaefa9209d8e9d7b9c8b9fb90f',\n  transactionHash: null }\n\ntruffle(develop)> contract.balanceOf(web3.eth.coinbase)\nBigNumber { s: 1, e: 7, c: [ 21000000 ] }\ntruffle(develop)> contract.balanceOf(web3.eth.accounts[1])\nBigNumber { s: 1, e: 0, c: [ 0 ] }\ntruffle(develop)> contract.transfer(web3.eth.accounts[1], 100)\n{ tx: '0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc',\n  receipt:\n   { transactionHash: '0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc',\n     transactionIndex: 0,\n     blockHash: '0xeb9546c74c6a897e05ecfe223238cfa80b3db4f37a567f02b5c1d20ffec7b6c3',\n     blockNumber: 7,\n     gasUsed: 51569,\n     cumulativeGasUsed: 51569,\n     contractAddress: null,\n     logs: [ [Object] ],\n     status: '0x01',\n     logsBloom: '0x},\n  logs:\n   [ { logIndex: 0,\n       transactionIndex: 0,\n       transactionHash: '0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc',\n       blockHash: '0xeb9546c74c6a897e05ecfe223238cfa80b3db4f37a567f02b5c1d20ffec7b6c3',\n       blockNumber: 7,\n       address: '0x8f0483125fcb9aaaefa9209d8e9d7b9c8b9fb90f',\n       type: 'mined',\n       event: 'Transfer',\n       args: [Object] } ] }\ntruffle(develop)> contract.balanceOf(web3.eth.coinbase)\nBigNumber { s: 1, e: 7, c: [ 20999900 ] }\ntruffle(develop)> contract.balanceOf(web3.eth.accounts[1])\nBigNumber { s: 1, e: 2, c: [ 100 ] }\ntruffle(develop)> contract.name.call()\n'NenmoCoin'\ntruffle(develop)> contract.symbol.call()\n'NMB'\n```\n\n### 部署到geth私链：\n\n attach 进入console：\n\n```\ngeth  attach ipc:/root/goproject/private-chain/geth.ipc\n```\n\n查看帐户：\n\n```\n>personal\n>personal.newAccount(\"some-key\")\n>personal\n//此时我们应该看到两个帐户，我们使用帐户进行部署合约\n>miner.start()\n>eth.sendTransaction({from:eth.coinbase, to:eth.accounts[1], value: web3.toWei(10000, \"ether\")})\n>personal.unlockAccount(eth.accounts[1])  //部署合约之前，必须把帐户进行解锁\n```\n\n查看truffle.js：\n\n```\nmodule.exports = {\n     networks: {\n         development: {\n               host: \"192.168.116.56\",\n               port: 8989,\n               network_id: \"123\",\n               from: \"0x528abd58142fbf77d4e648cd43458625297fa059\",  //此处为解锁的帐户\n               gas: 3000000,\n               gasPrice: 100,\n             }\n      }\n};\n```\n\ntruffle migrate //部署到geth\n\n【truffle migrate】问题汇总：\n\n- Error: exceeds block gas limit undefined\n\n当前合约所需的gas超过了区块的最大gas。这可能是由于创世区块的配置文件`genesis.json`中的参数`gasLimit`设置过小有关，\n\n解决方案：\n    重置truffle.js中gas参数的大小；\n\n```\n//再次进入ipc\ngeth  attach ipc:/root/goproject/private-chain/geth.ipc\n```\n\n### 在geth中查找已部署的合约\n\n从truffle 项目目录下，build/contracts/NewCoin.json获取abi；并由[http://www.bejson.com](http://www.bejson.com/jsonviewernew/) 转成字符串；\n\n```\nvar abi = JSON.parse($abi)\nvar address = \"0x8d014d58bfdc56408b2af6ef8e7b09eba1c8b940\"; //truffle migrate 生成的address\nvar newcoin = web3.eth.contract(abi).at(address)\n```\n\n### 调用合约中的方法：\n\n- call() 直接返回结果，不会写入区块链\n- sendTransaction() 发送一笔交易，会写入区块链中，返回值是交易的哈希值。\n\n### ERC20 Token\nERC20是以太坊定义的一个代币标准。是一种发行代币合约必须要遵守的协议，该协议规定了几个参数：\n- 发行货币的名称\n- 简称\n- 发行量\n- 支持的函数\n\n只有支持了该协议才会被以太坊所认同；\n\nerc20 标准\n\n```go\n  // https://github.com/ethereum/EIPs/issues/20\n  contract ERC20 {\n      function totalSupply() constant returns (uint totalSupply);\n      function balanceOf(address _owner) constant returns (uint balance);\n      function transfer(address _to, uint _value) returns (bool success);\n      function transferFrom(address _from, address _to, uint _value) returns (bool success);\n      function approve(address _spender, uint _value) returns (bool success);\n      function allowance(address _owner, address _spender) constant returns (uint remaining);\n      event Transfer(address indexed _from, address indexed _to, uint _value);\n      event Approval(address indexed _owner, address indexed _spender, uint _value);\n    }\n```\n\nsolidity：\n- address\n - 属性：balances\n - 函数: send(), call(), delegatecall(), callcode()\n\nsolidity 语法\n```\nhttps://www.jianshu.com/p/e8113bfa7694\n```\n\n对tx.data进行Keccak256（）编码；\n\n以太坊交易的类型：\n\n- 转账的交易\n- 创建合约的交易\n- 执行合约的交易\n\n参数是一个对象，在发送交易的时候指定不同的字段，区块链及链根据参数识别出对应类型的交易；\n\n转账交易：\n转账是最简单的一种交易，从一个帐户向另一个帐户发送以太币\n```\n  web3.eth.sendTransaction({\n      from: \"0x....\",\n      to:   \"0x....\",\n      value: 100000\n  })\n```\n\n创建合约的交易：\n将合约部署到区块链节点上，通过发送交易来实现。\n\n```\n  web3.eth.sendTransaction({\n      from: \"交易的发送者也是合约的创建者\",\n      data: \"指定合约的abi\"\n  })\n```\nto字段留空不填\n\n执行合约的交易：调用合约中的方法，需要将交易的to字段指定为调用的合约的地址， 通过data字段指定要调用的方法以及向该方法传递的参数\n```\n  web3.eth.sendTransaction({\n      from: \"sender's address\",\n      to: \" contract address\",\n      data: \"目标方法和传递的参数\"\n  })\n```\ndata字段需要特殊的编码规则，一般使用SDK(web3.js)\n\n### web3.eth\n包含以太坊区块链相关的方法\n - web3.eth.gasprice  //gas当前单价\n - web3.eth.accounts  //当前节点的帐户列表\n - web3.eth.getBalance()\n - web3.eth.getTransaction()\n 创建帐户\n\ngas limit: 这个交易的执行最都被允许使用的计算步骤\ngas price: 交易发送者愿意支付的gas费用，一个单位的gas表示了执行一个基本指令；\n\n\neth测试网络用户名：cp123456\nkey：clown magic joy essence collect find auction announce shrimp gate fruit urge\n","source":"_posts/eth.md","raw":"---\n title: 部署以太坊私链：\n---\n帐号准备：\n\n​\t部署合约需要外部帐户，进入交互界面；\n\n```\n> eth.accounts  //分配给开发者的帐户\n[\"0x7b30423838ac0bccccfcbb9d9b494b834a76f847\"]\n```\n\n创建新帐户\n\n```\n> personal.newAccount(\"test\")\n\"0xa7287e272e3814f59025ece844665e6a30e4d296\"\n```\n\n查看帐户列表\n\n```\n> personal.listAccounts\n[\"0x7b30423838ac0bccccfcbb9d9b494b834a76f847\", \"0xa7287e272e3814f59025ece844665e6a30e4d296\"]\n```\n\n查看帐号余额\t\t\t//新建的帐户此时余额为0\n\n```\n> eth.getBalance(\"0xa7287e272e3814f59025ece844665e6a30e4d296\")\n0\n```\n\n转账\t\t\t\t// 没有余额的帐户无法部署合约，从默认帐户转账给新帐户\n\n```\n> eth.sendTransaction({from:eth.accounts[0], to: eth.accounts[2], value: web3.toWei(1, \"ether\")})\n\"0x5f2c80f25b83b3b5b04f89cee37b8a4fe3950f8f66e81f8169c4719a0f37e584\"\n```\n\n### 部署合约\n\n1、解锁帐户 \t\t\t//只有解锁帐户之后，才能进行合约的部署；\n\n```\n> personal.unlockAccount(eth.accounts[2], \"test\")\ntrue\n```\n\n2、编写合约\n\n3、部署合约 \t\t//https://ethereum.github.io/browser-solidity/\n\n4、部署合约之后查看余额\n\n> ```\n> eth.getBalance(eth.accounts[2])\n> 999999999999603541\n> ```\n\n5、运行合约：\n\n> ```\n> > hello\n> {\n> abi: [{\n>     constant: true,\n>     inputs: [],\n>     name: \"say\",\n>     outputs: [{...}],\n>     payable: false,\n>     stateMutability: \"view\",\n>     type: \"function\"\n> }, {\n>     inputs: [{...}],\n>     payable: false,\n>     stateMutability: \"nonpayable\",\n>     type: \"constructor\"\n> }],\n> address: \"0xd81c0b77218fda9037ae5df48f6e75a6b3e6ffd0\",\n> transactionHash: \"0x1cc62a197d92a2ab848e55deaae9c1fe5c19be18c3b17c33b00fc6173e1c52a4\",\n> allEvents: function(),\n> say: function()\n> }\n> > hello.say()\n> \"Hello World\"\n> ```\n\n### solidity语法：\n\n写Solidity最大的不同在于，我们要随时计算好我们的gas消耗，方法的复杂度，变量类型的存储位置（memory，storage等等）都会决定gas的消耗量。\n\n以上编写合约在vim，编译在Remix，运行端在geth console。过程十分繁复，不适合大规模工程开发，需要通过Truffle来整合以上操作；\n\n一、环境配置：\n\n​\ttruffle依赖于nodejs，可能存在版本之间的兼容性问题，首先删除自带的nodejs和npm，再进行全安装；\n\n```\nsudo apt-get remove nodejs\nsudo apt-get remove npm\nsudo apt-get update\nwhich node\nwget https://nodejs.org/dist/v8.8.0/node-v8.8.0-linux-x64.tar.gz\nsudo tar -xf node-v8.8.0-linux-x64.tar.gz --directory /usr/local --strip-components 1\nnode --version\nnpm --version\nsudo npm install -g truffle\n```\n\n二、\n\n```\n1. block.blockhash(uint blockNumber) returns (bytes32): 返回参数区块编号的hash值。（范围仅限于最近256块，还不包含当然块）\n2. block.coinbase (address): 当前区块矿工地址\n3. block.difficulty (uint): 当前区块难度\n4. block.gaslimit (uint): 当前区块的gaslimit\n5. block.number (uint): 当前区块编号\n6. block.timestamp (uint): 当前区块的timestamp，使用UNIX时间秒\n7. msg.data (bytes): 完整的calldata\n8. msg.gas (uint): 剩余的gas\n9. msg.sender (address): 信息的发送方 (当前调用)\n10. msg.sig (bytes4): calldata的前四个字节 (i.e. 函数标识符)\n11. msg.value (uint): 消息发送的wei的数量\n12. now (uint): 当前区块的timestamp (block.timestamp别名)\n13. tx.gasprice (uint): 交易的gas单价\n14. tx.origin (address): 交易发送方地址(完全的链调用)\n```\n\n### 三、发币\n\n使用truffle init 来初始化项目；但truffle推出Boxes功能之后，我们可以直接套用react-box的样板，节省时间；\n\n```\nroot@keke:~/truffle-project/coin# truffle  unbox react-box\nDownloading...\nUnpacking...\nSetting up...\nUnbox successful. Sweet!\n\nCommands:\n\n  Compile:              truffle compile\n  Migrate:              truffle migrate\n  Test contracts:       truffle test\n  Test dapp:            npm test\n  Run dev server:       npm run start\n  Build for production: npm run build\n```\n\n编译自带的智能合约：\n\n```\nroot@keke:~/truffle-project/coin# truffle  compile\nCompiling ./contracts/Migrations.sol...\nCompiling ./contracts/SimpleStorage.sol...\n\nCompilation warnings encountered:\n\n/root/truffle-project/coin/contracts/Migrations.sol:11:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n  function Migrations() public {\n  ^ (Relevant source part starts here and spans across multiple lines).\n\nWriting artifacts to ./build/contracts\n\n```\n\n3、安装OpenZeppelin来简化加密钱包开发过程；\n\n`OpenZeppelin`是一套能够给我们方便提供编写加密合约的函数库，同时里面也提供了兼容`ERC20`的智能合约。\n\n```\nnpm install zeppelin-solidity\n```\n\n4、创建代币合约\n\n```\npragma solidity ^0.4.0;\n\nimport \"../node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\";\n\ncontract NewCoin is StandardToken{\n    string public name = \"NewCoin\";\n    string public symbol = \"NC\";\n    uint8 public decimals = 8;\n    uint256 public INITIAL_SUPPLY = 21000000;\n\n    function NewCoin(){\n        totalSupply_ = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n    }\n}\n```\n\n5、编译、部署和验证\n\n在`migrations/`目录下建立一个`3_deploy_contracts.js`文件，内容如下：\n\n```\nvar NenmoCoin = artifacts.require(\"./NenmoCoin.sol\");\n\nmodule.exports = function(deployer) {\n  deployer.deploy(NenmoCoin);\n};\n```\n\n部署：\n\n```\ntruffle develop\t\t\t//进入开发环境\ncompile\t\t\t\t    //编译\nmigrate\t\t\t\t\t//部署在truffle环境上\n```\n\n测试：\n\n```\ntruffle(develop)> var c\nundefined\ntruffle(develop)> c = NenmoCoin.deployed().then(instance => contract = instance)\nTruffleContract {\n  constructor:\n......\n  allEvents: [Function: bound ],\n  address: '0x8f0483125fcb9aaaefa9209d8e9d7b9c8b9fb90f',\n  transactionHash: null }\n\ntruffle(develop)> contract.balanceOf(web3.eth.coinbase)\nBigNumber { s: 1, e: 7, c: [ 21000000 ] }\ntruffle(develop)> contract.balanceOf(web3.eth.accounts[1])\nBigNumber { s: 1, e: 0, c: [ 0 ] }\ntruffle(develop)> contract.transfer(web3.eth.accounts[1], 100)\n{ tx: '0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc',\n  receipt:\n   { transactionHash: '0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc',\n     transactionIndex: 0,\n     blockHash: '0xeb9546c74c6a897e05ecfe223238cfa80b3db4f37a567f02b5c1d20ffec7b6c3',\n     blockNumber: 7,\n     gasUsed: 51569,\n     cumulativeGasUsed: 51569,\n     contractAddress: null,\n     logs: [ [Object] ],\n     status: '0x01',\n     logsBloom: '0x},\n  logs:\n   [ { logIndex: 0,\n       transactionIndex: 0,\n       transactionHash: '0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc',\n       blockHash: '0xeb9546c74c6a897e05ecfe223238cfa80b3db4f37a567f02b5c1d20ffec7b6c3',\n       blockNumber: 7,\n       address: '0x8f0483125fcb9aaaefa9209d8e9d7b9c8b9fb90f',\n       type: 'mined',\n       event: 'Transfer',\n       args: [Object] } ] }\ntruffle(develop)> contract.balanceOf(web3.eth.coinbase)\nBigNumber { s: 1, e: 7, c: [ 20999900 ] }\ntruffle(develop)> contract.balanceOf(web3.eth.accounts[1])\nBigNumber { s: 1, e: 2, c: [ 100 ] }\ntruffle(develop)> contract.name.call()\n'NenmoCoin'\ntruffle(develop)> contract.symbol.call()\n'NMB'\n```\n\n### 部署到geth私链：\n\n attach 进入console：\n\n```\ngeth  attach ipc:/root/goproject/private-chain/geth.ipc\n```\n\n查看帐户：\n\n```\n>personal\n>personal.newAccount(\"some-key\")\n>personal\n//此时我们应该看到两个帐户，我们使用帐户进行部署合约\n>miner.start()\n>eth.sendTransaction({from:eth.coinbase, to:eth.accounts[1], value: web3.toWei(10000, \"ether\")})\n>personal.unlockAccount(eth.accounts[1])  //部署合约之前，必须把帐户进行解锁\n```\n\n查看truffle.js：\n\n```\nmodule.exports = {\n     networks: {\n         development: {\n               host: \"192.168.116.56\",\n               port: 8989,\n               network_id: \"123\",\n               from: \"0x528abd58142fbf77d4e648cd43458625297fa059\",  //此处为解锁的帐户\n               gas: 3000000,\n               gasPrice: 100,\n             }\n      }\n};\n```\n\ntruffle migrate //部署到geth\n\n【truffle migrate】问题汇总：\n\n- Error: exceeds block gas limit undefined\n\n当前合约所需的gas超过了区块的最大gas。这可能是由于创世区块的配置文件`genesis.json`中的参数`gasLimit`设置过小有关，\n\n解决方案：\n    重置truffle.js中gas参数的大小；\n\n```\n//再次进入ipc\ngeth  attach ipc:/root/goproject/private-chain/geth.ipc\n```\n\n### 在geth中查找已部署的合约\n\n从truffle 项目目录下，build/contracts/NewCoin.json获取abi；并由[http://www.bejson.com](http://www.bejson.com/jsonviewernew/) 转成字符串；\n\n```\nvar abi = JSON.parse($abi)\nvar address = \"0x8d014d58bfdc56408b2af6ef8e7b09eba1c8b940\"; //truffle migrate 生成的address\nvar newcoin = web3.eth.contract(abi).at(address)\n```\n\n### 调用合约中的方法：\n\n- call() 直接返回结果，不会写入区块链\n- sendTransaction() 发送一笔交易，会写入区块链中，返回值是交易的哈希值。\n\n### ERC20 Token\nERC20是以太坊定义的一个代币标准。是一种发行代币合约必须要遵守的协议，该协议规定了几个参数：\n- 发行货币的名称\n- 简称\n- 发行量\n- 支持的函数\n\n只有支持了该协议才会被以太坊所认同；\n\nerc20 标准\n\n```go\n  // https://github.com/ethereum/EIPs/issues/20\n  contract ERC20 {\n      function totalSupply() constant returns (uint totalSupply);\n      function balanceOf(address _owner) constant returns (uint balance);\n      function transfer(address _to, uint _value) returns (bool success);\n      function transferFrom(address _from, address _to, uint _value) returns (bool success);\n      function approve(address _spender, uint _value) returns (bool success);\n      function allowance(address _owner, address _spender) constant returns (uint remaining);\n      event Transfer(address indexed _from, address indexed _to, uint _value);\n      event Approval(address indexed _owner, address indexed _spender, uint _value);\n    }\n```\n\nsolidity：\n- address\n - 属性：balances\n - 函数: send(), call(), delegatecall(), callcode()\n\nsolidity 语法\n```\nhttps://www.jianshu.com/p/e8113bfa7694\n```\n\n对tx.data进行Keccak256（）编码；\n\n以太坊交易的类型：\n\n- 转账的交易\n- 创建合约的交易\n- 执行合约的交易\n\n参数是一个对象，在发送交易的时候指定不同的字段，区块链及链根据参数识别出对应类型的交易；\n\n转账交易：\n转账是最简单的一种交易，从一个帐户向另一个帐户发送以太币\n```\n  web3.eth.sendTransaction({\n      from: \"0x....\",\n      to:   \"0x....\",\n      value: 100000\n  })\n```\n\n创建合约的交易：\n将合约部署到区块链节点上，通过发送交易来实现。\n\n```\n  web3.eth.sendTransaction({\n      from: \"交易的发送者也是合约的创建者\",\n      data: \"指定合约的abi\"\n  })\n```\nto字段留空不填\n\n执行合约的交易：调用合约中的方法，需要将交易的to字段指定为调用的合约的地址， 通过data字段指定要调用的方法以及向该方法传递的参数\n```\n  web3.eth.sendTransaction({\n      from: \"sender's address\",\n      to: \" contract address\",\n      data: \"目标方法和传递的参数\"\n  })\n```\ndata字段需要特殊的编码规则，一般使用SDK(web3.js)\n\n### web3.eth\n包含以太坊区块链相关的方法\n - web3.eth.gasprice  //gas当前单价\n - web3.eth.accounts  //当前节点的帐户列表\n - web3.eth.getBalance()\n - web3.eth.getTransaction()\n 创建帐户\n\ngas limit: 这个交易的执行最都被允许使用的计算步骤\ngas price: 交易发送者愿意支付的gas费用，一个单位的gas表示了执行一个基本指令；\n\n\neth测试网络用户名：cp123456\nkey：clown magic joy essence collect find auction announce shrimp gate fruit urge\n","slug":"eth","published":1,"date":"2018-07-04T02:25:44.895Z","updated":"2018-07-04T02:25:44.895Z","_id":"cjj6hwjna0002lihadokoe7qr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>帐号准备：</p>\n<p>​    部署合约需要外部帐户，进入交互界面；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.accounts  //分配给开发者的帐户</span><br><span class=\"line\">[&quot;0x7b30423838ac0bccccfcbb9d9b494b834a76f847&quot;]</span><br></pre></td></tr></table></figure>\n<p>创建新帐户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.newAccount(&quot;test&quot;)</span><br><span class=\"line\">&quot;0xa7287e272e3814f59025ece844665e6a30e4d296&quot;</span><br></pre></td></tr></table></figure>\n<p>查看帐户列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.listAccounts</span><br><span class=\"line\">[&quot;0x7b30423838ac0bccccfcbb9d9b494b834a76f847&quot;, &quot;0xa7287e272e3814f59025ece844665e6a30e4d296&quot;]</span><br></pre></td></tr></table></figure>\n<p>查看帐号余额            //新建的帐户此时余额为0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(&quot;0xa7287e272e3814f59025ece844665e6a30e4d296&quot;)</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<p>转账                // 没有余额的帐户无法部署合约，从默认帐户转账给新帐户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.sendTransaction(&#123;from:eth.accounts[0], to: eth.accounts[2], value: web3.toWei(1, &quot;ether&quot;)&#125;)</span><br><span class=\"line\">&quot;0x5f2c80f25b83b3b5b04f89cee37b8a4fe3950f8f66e81f8169c4719a0f37e584&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署合约\"><a href=\"#部署合约\" class=\"headerlink\" title=\"部署合约\"></a>部署合约</h3><p>1、解锁帐户             //只有解锁帐户之后，才能进行合约的部署；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.unlockAccount(eth.accounts[2], &quot;test&quot;)</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n<p>2、编写合约</p>\n<p>3、部署合约         //<a href=\"https://ethereum.github.io/browser-solidity/\" target=\"_blank\" rel=\"noopener\">https://ethereum.github.io/browser-solidity/</a></p>\n<p>4、部署合约之后查看余额</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[2])</span><br><span class=\"line\">&gt; 999999999999603541</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>5、运行合约：</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; &gt; hello</span><br><span class=\"line\">&gt; &#123;</span><br><span class=\"line\">&gt; abi: [&#123;</span><br><span class=\"line\">&gt;     constant: true,</span><br><span class=\"line\">&gt;     inputs: [],</span><br><span class=\"line\">&gt;     name: &quot;say&quot;,</span><br><span class=\"line\">&gt;     outputs: [&#123;...&#125;],</span><br><span class=\"line\">&gt;     payable: false,</span><br><span class=\"line\">&gt;     stateMutability: &quot;view&quot;,</span><br><span class=\"line\">&gt;     type: &quot;function&quot;</span><br><span class=\"line\">&gt; &#125;, &#123;</span><br><span class=\"line\">&gt;     inputs: [&#123;...&#125;],</span><br><span class=\"line\">&gt;     payable: false,</span><br><span class=\"line\">&gt;     stateMutability: &quot;nonpayable&quot;,</span><br><span class=\"line\">&gt;     type: &quot;constructor&quot;</span><br><span class=\"line\">&gt; &#125;],</span><br><span class=\"line\">&gt; address: &quot;0xd81c0b77218fda9037ae5df48f6e75a6b3e6ffd0&quot;,</span><br><span class=\"line\">&gt; transactionHash: &quot;0x1cc62a197d92a2ab848e55deaae9c1fe5c19be18c3b17c33b00fc6173e1c52a4&quot;,</span><br><span class=\"line\">&gt; allEvents: function(),</span><br><span class=\"line\">&gt; say: function()</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt; &gt; hello.say()</span><br><span class=\"line\">&gt; &quot;Hello World&quot;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"solidity语法：\"><a href=\"#solidity语法：\" class=\"headerlink\" title=\"solidity语法：\"></a>solidity语法：</h3><p>写Solidity最大的不同在于，我们要随时计算好我们的gas消耗，方法的复杂度，变量类型的存储位置（memory，storage等等）都会决定gas的消耗量。</p>\n<p>以上编写合约在vim，编译在Remix，运行端在geth console。过程十分繁复，不适合大规模工程开发，需要通过Truffle来整合以上操作；</p>\n<p>一、环境配置：</p>\n<p>​    truffle依赖于nodejs，可能存在版本之间的兼容性问题，首先删除自带的nodejs和npm，再进行全安装；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove nodejs</span><br><span class=\"line\">sudo apt-get remove npm</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">which node</span><br><span class=\"line\">wget https://nodejs.org/dist/v8.8.0/node-v8.8.0-linux-x64.tar.gz</span><br><span class=\"line\">sudo tar -xf node-v8.8.0-linux-x64.tar.gz --directory /usr/local --strip-components 1</span><br><span class=\"line\">node --version</span><br><span class=\"line\">npm --version</span><br><span class=\"line\">sudo npm install -g truffle</span><br></pre></td></tr></table></figure>\n<p>二、</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. block.blockhash(uint blockNumber) returns (bytes32): 返回参数区块编号的hash值。（范围仅限于最近256块，还不包含当然块）</span><br><span class=\"line\">2. block.coinbase (address): 当前区块矿工地址</span><br><span class=\"line\">3. block.difficulty (uint): 当前区块难度</span><br><span class=\"line\">4. block.gaslimit (uint): 当前区块的gaslimit</span><br><span class=\"line\">5. block.number (uint): 当前区块编号</span><br><span class=\"line\">6. block.timestamp (uint): 当前区块的timestamp，使用UNIX时间秒</span><br><span class=\"line\">7. msg.data (bytes): 完整的calldata</span><br><span class=\"line\">8. msg.gas (uint): 剩余的gas</span><br><span class=\"line\">9. msg.sender (address): 信息的发送方 (当前调用)</span><br><span class=\"line\">10. msg.sig (bytes4): calldata的前四个字节 (i.e. 函数标识符)</span><br><span class=\"line\">11. msg.value (uint): 消息发送的wei的数量</span><br><span class=\"line\">12. now (uint): 当前区块的timestamp (block.timestamp别名)</span><br><span class=\"line\">13. tx.gasprice (uint): 交易的gas单价</span><br><span class=\"line\">14. tx.origin (address): 交易发送方地址(完全的链调用)</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、发币\"><a href=\"#三、发币\" class=\"headerlink\" title=\"三、发币\"></a>三、发币</h3><p>使用truffle init 来初始化项目；但truffle推出Boxes功能之后，我们可以直接套用react-box的样板，节省时间；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@keke:~/truffle-project/coin# truffle  unbox react-box</span><br><span class=\"line\">Downloading...</span><br><span class=\"line\">Unpacking...</span><br><span class=\"line\">Setting up...</span><br><span class=\"line\">Unbox successful. Sweet!</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\"></span><br><span class=\"line\">  Compile:              truffle compile</span><br><span class=\"line\">  Migrate:              truffle migrate</span><br><span class=\"line\">  Test contracts:       truffle test</span><br><span class=\"line\">  Test dapp:            npm test</span><br><span class=\"line\">  Run dev server:       npm run start</span><br><span class=\"line\">  Build for production: npm run build</span><br></pre></td></tr></table></figure>\n<p>编译自带的智能合约：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@keke:~/truffle-project/coin# truffle  compile</span><br><span class=\"line\">Compiling ./contracts/Migrations.sol...</span><br><span class=\"line\">Compiling ./contracts/SimpleStorage.sol...</span><br><span class=\"line\"></span><br><span class=\"line\">Compilation warnings encountered:</span><br><span class=\"line\"></span><br><span class=\"line\">/root/truffle-project/coin/contracts/Migrations.sol:11:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use &quot;constructor(...) &#123; ... &#125;&quot; instead.</span><br><span class=\"line\">  function Migrations() public &#123;</span><br><span class=\"line\">  ^ (Relevant source part starts here and spans across multiple lines).</span><br><span class=\"line\"></span><br><span class=\"line\">Writing artifacts to ./build/contracts</span><br></pre></td></tr></table></figure>\n<p>3、安装OpenZeppelin来简化加密钱包开发过程；</p>\n<p><code>OpenZeppelin</code>是一套能够给我们方便提供编写加密合约的函数库，同时里面也提供了兼容<code>ERC20</code>的智能合约。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install zeppelin-solidity</span><br></pre></td></tr></table></figure>\n<p>4、创建代币合约</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;../node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">contract NewCoin is StandardToken&#123;</span><br><span class=\"line\">    string public name = &quot;NewCoin&quot;;</span><br><span class=\"line\">    string public symbol = &quot;NC&quot;;</span><br><span class=\"line\">    uint8 public decimals = 8;</span><br><span class=\"line\">    uint256 public INITIAL_SUPPLY = 21000000;</span><br><span class=\"line\"></span><br><span class=\"line\">    function NewCoin()&#123;</span><br><span class=\"line\">        totalSupply_ = INITIAL_SUPPLY;</span><br><span class=\"line\">        balances[msg.sender] = INITIAL_SUPPLY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5、编译、部署和验证</p>\n<p>在<code>migrations/</code>目录下建立一个<code>3_deploy_contracts.js</code>文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var NenmoCoin = artifacts.require(&quot;./NenmoCoin.sol&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function(deployer) &#123;</span><br><span class=\"line\">  deployer.deploy(NenmoCoin);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>部署：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">truffle develop\t\t\t//进入开发环境</span><br><span class=\"line\">compile\t\t\t\t    //编译</span><br><span class=\"line\">migrate\t\t\t\t\t//部署在truffle环境上</span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">truffle(develop)&gt; var c</span><br><span class=\"line\">undefined</span><br><span class=\"line\">truffle(develop)&gt; c = NenmoCoin.deployed().then(instance =&gt; contract = instance)</span><br><span class=\"line\">TruffleContract &#123;</span><br><span class=\"line\">  constructor:</span><br><span class=\"line\">......</span><br><span class=\"line\">  allEvents: [Function: bound ],</span><br><span class=\"line\">  address: &apos;0x8f0483125fcb9aaaefa9209d8e9d7b9c8b9fb90f&apos;,</span><br><span class=\"line\">  transactionHash: null &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">truffle(develop)&gt; contract.balanceOf(web3.eth.coinbase)</span><br><span class=\"line\">BigNumber &#123; s: 1, e: 7, c: [ 21000000 ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.balanceOf(web3.eth.accounts[1])</span><br><span class=\"line\">BigNumber &#123; s: 1, e: 0, c: [ 0 ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.transfer(web3.eth.accounts[1], 100)</span><br><span class=\"line\">&#123; tx: &apos;0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc&apos;,</span><br><span class=\"line\">  receipt:</span><br><span class=\"line\">   &#123; transactionHash: &apos;0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc&apos;,</span><br><span class=\"line\">     transactionIndex: 0,</span><br><span class=\"line\">     blockHash: &apos;0xeb9546c74c6a897e05ecfe223238cfa80b3db4f37a567f02b5c1d20ffec7b6c3&apos;,</span><br><span class=\"line\">     blockNumber: 7,</span><br><span class=\"line\">     gasUsed: 51569,</span><br><span class=\"line\">     cumulativeGasUsed: 51569,</span><br><span class=\"line\">     contractAddress: null,</span><br><span class=\"line\">     logs: [ [Object] ],</span><br><span class=\"line\">     status: &apos;0x01&apos;,</span><br><span class=\"line\">     logsBloom: &apos;0xapos; &#125;,</span><br><span class=\"line\">  logs:</span><br><span class=\"line\">   [ &#123; logIndex: 0,</span><br><span class=\"line\">       transactionIndex: 0,</span><br><span class=\"line\">       transactionHash: &apos;0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc&apos;,</span><br><span class=\"line\">       blockHash: &apos;0xeb9546c74c6a897e05ecfe223238cfa80b3db4f37a567f02b5c1d20ffec7b6c3&apos;,</span><br><span class=\"line\">       blockNumber: 7,</span><br><span class=\"line\">       address: &apos;0x8f0483125fcb9aaaefa9209d8e9d7b9c8b9fb90f&apos;,</span><br><span class=\"line\">       type: &apos;mined&apos;,</span><br><span class=\"line\">       event: &apos;Transfer&apos;,</span><br><span class=\"line\">       args: [Object] &#125; ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.balanceOf(web3.eth.coinbase)</span><br><span class=\"line\">BigNumber &#123; s: 1, e: 7, c: [ 20999900 ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.balanceOf(web3.eth.accounts[1])</span><br><span class=\"line\">BigNumber &#123; s: 1, e: 2, c: [ 100 ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.name.call()</span><br><span class=\"line\">&apos;NenmoCoin&apos;</span><br><span class=\"line\">truffle(develop)&gt; contract.symbol.call()</span><br><span class=\"line\">&apos;NMB&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署到geth私链：\"><a href=\"#部署到geth私链：\" class=\"headerlink\" title=\"部署到geth私链：\"></a>部署到geth私链：</h3><p> attach 进入console：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">geth  attach ipc:/root/goproject/private-chain/geth.ipc</span><br></pre></td></tr></table></figure>\n<p>查看帐户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;personal</span><br><span class=\"line\">&gt;personal.newAccount(&quot;some-key&quot;)</span><br><span class=\"line\">&gt;personal</span><br><span class=\"line\">//此时我们应该看到两个帐户，我们使用帐户进行部署合约</span><br><span class=\"line\">&gt;miner.start()</span><br><span class=\"line\">&gt;eth.sendTransaction(&#123;from:eth.coinbase, to:eth.accounts[1], value: web3.toWei(10000, &quot;ether&quot;)&#125;)</span><br><span class=\"line\">&gt;personal.unlockAccount(eth.accounts[1])  //部署合约之前，必须把帐户进行解锁</span><br></pre></td></tr></table></figure>\n<p>查看truffle.js：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">     networks: &#123;</span><br><span class=\"line\">         development: &#123;</span><br><span class=\"line\">               host: &quot;192.168.116.56&quot;,</span><br><span class=\"line\">               port: 8989,</span><br><span class=\"line\">               network_id: &quot;123&quot;,</span><br><span class=\"line\">               from: &quot;0x528abd58142fbf77d4e648cd43458625297fa059&quot;,  //此处为解锁的帐户</span><br><span class=\"line\">               gas: 3000000,</span><br><span class=\"line\">               gasPrice: 100,</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>truffle migrate //部署到geth</p>\n<p>【truffle migrate】问题汇总：</p>\n<ul>\n<li>Error: exceeds block gas limit undefined</li>\n</ul>\n<p>当前合约所需的gas超过了区块的最大gas。这可能是由于创世区块的配置文件<code>genesis.json</code>中的参数<code>gasLimit</code>设置过小有关，</p>\n<p>解决方案：<br>    重置truffle.js中gas参数的大小；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//再次进入ipc</span><br><span class=\"line\">geth  attach ipc:/root/goproject/private-chain/geth.ipc</span><br></pre></td></tr></table></figure>\n<h3 id=\"在geth中查找已部署的合约\"><a href=\"#在geth中查找已部署的合约\" class=\"headerlink\" title=\"在geth中查找已部署的合约\"></a>在geth中查找已部署的合约</h3><p>从truffle 项目目录下，build/contracts/NewCoin.json获取abi；并由<a href=\"http://www.bejson.com/jsonviewernew/\" target=\"_blank\" rel=\"noopener\">http://www.bejson.com</a> 转成字符串；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var abi = JSON.parse($abi)</span><br><span class=\"line\">var address = &quot;0x8d014d58bfdc56408b2af6ef8e7b09eba1c8b940&quot;; //truffle migrate 生成的address</span><br><span class=\"line\">var newcoin = web3.eth.contract(abi).at(address)</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用合约中的方法：\"><a href=\"#调用合约中的方法：\" class=\"headerlink\" title=\"调用合约中的方法：\"></a>调用合约中的方法：</h3><ul>\n<li>call() 直接返回结果，不会写入区块链</li>\n<li>sendTransaction() 发送一笔交易，会写入区块链中，返回值是交易的哈希值。</li>\n</ul>\n<h3 id=\"ERC20-Token\"><a href=\"#ERC20-Token\" class=\"headerlink\" title=\"ERC20 Token\"></a>ERC20 Token</h3><p>ERC20是以太坊定义的一个代币标准。是一种发行代币合约必须要遵守的协议，该协议规定了几个参数：</p>\n<ul>\n<li>发行货币的名称</li>\n<li>简称</li>\n<li>发行量</li>\n<li>支持的函数</li>\n</ul>\n<p>只有支持了该协议才会被以太坊所认同；</p>\n<p>erc20 标准</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://github.com/ethereum/EIPs/issues/20</span></span><br><span class=\"line\">contract ERC20 &#123;</span><br><span class=\"line\">    function totalSupply() constant returns (<span class=\"keyword\">uint</span> totalSupply);</span><br><span class=\"line\">    function balanceOf(address _owner) constant returns (<span class=\"keyword\">uint</span> balance);</span><br><span class=\"line\">    function transfer(address _to, <span class=\"keyword\">uint</span> _value) returns (<span class=\"keyword\">bool</span> success);</span><br><span class=\"line\">    function transferFrom(address _from, address _to, <span class=\"keyword\">uint</span> _value) returns (<span class=\"keyword\">bool</span> success);</span><br><span class=\"line\">    function approve(address _spender, <span class=\"keyword\">uint</span> _value) returns (<span class=\"keyword\">bool</span> success);</span><br><span class=\"line\">    function allowance(address _owner, address _spender) constant returns (<span class=\"keyword\">uint</span> remaining);</span><br><span class=\"line\">    event Transfer(address indexed _from, address indexed _to, <span class=\"keyword\">uint</span> _value);</span><br><span class=\"line\">    event Approval(address indexed _owner, address indexed _spender, <span class=\"keyword\">uint</span> _value);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>solidity：</p>\n<ul>\n<li>address<ul>\n<li>属性：balances</li>\n<li>函数: send(), call(), delegatecall(), callcode()</li>\n</ul>\n</li>\n</ul>\n<p>solidity 语法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.jianshu.com/p/e8113bfa7694</span><br></pre></td></tr></table></figure></p>\n<p>对tx.data进行Keccak256（）编码；</p>\n<p>以太坊交易的类型：</p>\n<ul>\n<li>转账的交易</li>\n<li>创建合约的交易</li>\n<li>执行合约的交易</li>\n</ul>\n<p>参数是一个对象，在发送交易的时候指定不同的字段，区块链及链根据参数识别出对应类型的交易；</p>\n<p>转账交易：<br>转账是最简单的一种交易，从一个帐户向另一个帐户发送以太币<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web3.eth.sendTransaction(&#123;</span><br><span class=\"line\">    from: &quot;0x....&quot;,</span><br><span class=\"line\">    to:   &quot;0x....&quot;,</span><br><span class=\"line\">    value: 100000</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>创建合约的交易：<br>将合约部署到区块链节点上，通过发送交易来实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web3.eth.sendTransaction(&#123;</span><br><span class=\"line\">    from: &quot;交易的发送者也是合约的创建者&quot;,</span><br><span class=\"line\">    data: &quot;指定合约的abi&quot;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>to字段留空不填</p>\n<p>执行合约的交易：调用合约中的方法，需要将交易的to字段指定为调用的合约的地址， 通过data字段指定要调用的方法以及向该方法传递的参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web3.eth.sendTransaction(&#123;</span><br><span class=\"line\">    from: &quot;sender&apos;s address&quot;,</span><br><span class=\"line\">    to: &quot; contract address&quot;,</span><br><span class=\"line\">    data: &quot;目标方法和传递的参数&quot;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>data字段需要特殊的编码规则，一般使用SDK(web3.js)</p>\n<h3 id=\"web3-eth\"><a href=\"#web3-eth\" class=\"headerlink\" title=\"web3.eth\"></a>web3.eth</h3><p>包含以太坊区块链相关的方法</p>\n<ul>\n<li>web3.eth.gasprice  //gas当前单价</li>\n<li>web3.eth.accounts  //当前节点的帐户列表</li>\n<li>web3.eth.getBalance()</li>\n<li>web3.eth.getTransaction()<br>创建帐户</li>\n</ul>\n<p>gas limit: 这个交易的执行最都被允许使用的计算步骤<br>gas price: 交易发送者愿意支付的gas费用，一个单位的gas表示了执行一个基本指令；</p>\n<p>eth测试网络用户名：cp123456<br>key：clown magic joy essence collect find auction announce shrimp gate fruit urge</p>\n","site":{"data":{}},"excerpt":"","more":"<p>帐号准备：</p>\n<p>​    部署合约需要外部帐户，进入交互界面；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.accounts  //分配给开发者的帐户</span><br><span class=\"line\">[&quot;0x7b30423838ac0bccccfcbb9d9b494b834a76f847&quot;]</span><br></pre></td></tr></table></figure>\n<p>创建新帐户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.newAccount(&quot;test&quot;)</span><br><span class=\"line\">&quot;0xa7287e272e3814f59025ece844665e6a30e4d296&quot;</span><br></pre></td></tr></table></figure>\n<p>查看帐户列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.listAccounts</span><br><span class=\"line\">[&quot;0x7b30423838ac0bccccfcbb9d9b494b834a76f847&quot;, &quot;0xa7287e272e3814f59025ece844665e6a30e4d296&quot;]</span><br></pre></td></tr></table></figure>\n<p>查看帐号余额            //新建的帐户此时余额为0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(&quot;0xa7287e272e3814f59025ece844665e6a30e4d296&quot;)</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<p>转账                // 没有余额的帐户无法部署合约，从默认帐户转账给新帐户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.sendTransaction(&#123;from:eth.accounts[0], to: eth.accounts[2], value: web3.toWei(1, &quot;ether&quot;)&#125;)</span><br><span class=\"line\">&quot;0x5f2c80f25b83b3b5b04f89cee37b8a4fe3950f8f66e81f8169c4719a0f37e584&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署合约\"><a href=\"#部署合约\" class=\"headerlink\" title=\"部署合约\"></a>部署合约</h3><p>1、解锁帐户             //只有解锁帐户之后，才能进行合约的部署；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; personal.unlockAccount(eth.accounts[2], &quot;test&quot;)</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n<p>2、编写合约</p>\n<p>3、部署合约         //<a href=\"https://ethereum.github.io/browser-solidity/\" target=\"_blank\" rel=\"noopener\">https://ethereum.github.io/browser-solidity/</a></p>\n<p>4、部署合约之后查看余额</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; eth.getBalance(eth.accounts[2])</span><br><span class=\"line\">&gt; 999999999999603541</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>5、运行合约：</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; &gt; hello</span><br><span class=\"line\">&gt; &#123;</span><br><span class=\"line\">&gt; abi: [&#123;</span><br><span class=\"line\">&gt;     constant: true,</span><br><span class=\"line\">&gt;     inputs: [],</span><br><span class=\"line\">&gt;     name: &quot;say&quot;,</span><br><span class=\"line\">&gt;     outputs: [&#123;...&#125;],</span><br><span class=\"line\">&gt;     payable: false,</span><br><span class=\"line\">&gt;     stateMutability: &quot;view&quot;,</span><br><span class=\"line\">&gt;     type: &quot;function&quot;</span><br><span class=\"line\">&gt; &#125;, &#123;</span><br><span class=\"line\">&gt;     inputs: [&#123;...&#125;],</span><br><span class=\"line\">&gt;     payable: false,</span><br><span class=\"line\">&gt;     stateMutability: &quot;nonpayable&quot;,</span><br><span class=\"line\">&gt;     type: &quot;constructor&quot;</span><br><span class=\"line\">&gt; &#125;],</span><br><span class=\"line\">&gt; address: &quot;0xd81c0b77218fda9037ae5df48f6e75a6b3e6ffd0&quot;,</span><br><span class=\"line\">&gt; transactionHash: &quot;0x1cc62a197d92a2ab848e55deaae9c1fe5c19be18c3b17c33b00fc6173e1c52a4&quot;,</span><br><span class=\"line\">&gt; allEvents: function(),</span><br><span class=\"line\">&gt; say: function()</span><br><span class=\"line\">&gt; &#125;</span><br><span class=\"line\">&gt; &gt; hello.say()</span><br><span class=\"line\">&gt; &quot;Hello World&quot;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"solidity语法：\"><a href=\"#solidity语法：\" class=\"headerlink\" title=\"solidity语法：\"></a>solidity语法：</h3><p>写Solidity最大的不同在于，我们要随时计算好我们的gas消耗，方法的复杂度，变量类型的存储位置（memory，storage等等）都会决定gas的消耗量。</p>\n<p>以上编写合约在vim，编译在Remix，运行端在geth console。过程十分繁复，不适合大规模工程开发，需要通过Truffle来整合以上操作；</p>\n<p>一、环境配置：</p>\n<p>​    truffle依赖于nodejs，可能存在版本之间的兼容性问题，首先删除自带的nodejs和npm，再进行全安装；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove nodejs</span><br><span class=\"line\">sudo apt-get remove npm</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">which node</span><br><span class=\"line\">wget https://nodejs.org/dist/v8.8.0/node-v8.8.0-linux-x64.tar.gz</span><br><span class=\"line\">sudo tar -xf node-v8.8.0-linux-x64.tar.gz --directory /usr/local --strip-components 1</span><br><span class=\"line\">node --version</span><br><span class=\"line\">npm --version</span><br><span class=\"line\">sudo npm install -g truffle</span><br></pre></td></tr></table></figure>\n<p>二、</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. block.blockhash(uint blockNumber) returns (bytes32): 返回参数区块编号的hash值。（范围仅限于最近256块，还不包含当然块）</span><br><span class=\"line\">2. block.coinbase (address): 当前区块矿工地址</span><br><span class=\"line\">3. block.difficulty (uint): 当前区块难度</span><br><span class=\"line\">4. block.gaslimit (uint): 当前区块的gaslimit</span><br><span class=\"line\">5. block.number (uint): 当前区块编号</span><br><span class=\"line\">6. block.timestamp (uint): 当前区块的timestamp，使用UNIX时间秒</span><br><span class=\"line\">7. msg.data (bytes): 完整的calldata</span><br><span class=\"line\">8. msg.gas (uint): 剩余的gas</span><br><span class=\"line\">9. msg.sender (address): 信息的发送方 (当前调用)</span><br><span class=\"line\">10. msg.sig (bytes4): calldata的前四个字节 (i.e. 函数标识符)</span><br><span class=\"line\">11. msg.value (uint): 消息发送的wei的数量</span><br><span class=\"line\">12. now (uint): 当前区块的timestamp (block.timestamp别名)</span><br><span class=\"line\">13. tx.gasprice (uint): 交易的gas单价</span><br><span class=\"line\">14. tx.origin (address): 交易发送方地址(完全的链调用)</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、发币\"><a href=\"#三、发币\" class=\"headerlink\" title=\"三、发币\"></a>三、发币</h3><p>使用truffle init 来初始化项目；但truffle推出Boxes功能之后，我们可以直接套用react-box的样板，节省时间；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@keke:~/truffle-project/coin# truffle  unbox react-box</span><br><span class=\"line\">Downloading...</span><br><span class=\"line\">Unpacking...</span><br><span class=\"line\">Setting up...</span><br><span class=\"line\">Unbox successful. Sweet!</span><br><span class=\"line\"></span><br><span class=\"line\">Commands:</span><br><span class=\"line\"></span><br><span class=\"line\">  Compile:              truffle compile</span><br><span class=\"line\">  Migrate:              truffle migrate</span><br><span class=\"line\">  Test contracts:       truffle test</span><br><span class=\"line\">  Test dapp:            npm test</span><br><span class=\"line\">  Run dev server:       npm run start</span><br><span class=\"line\">  Build for production: npm run build</span><br></pre></td></tr></table></figure>\n<p>编译自带的智能合约：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@keke:~/truffle-project/coin# truffle  compile</span><br><span class=\"line\">Compiling ./contracts/Migrations.sol...</span><br><span class=\"line\">Compiling ./contracts/SimpleStorage.sol...</span><br><span class=\"line\"></span><br><span class=\"line\">Compilation warnings encountered:</span><br><span class=\"line\"></span><br><span class=\"line\">/root/truffle-project/coin/contracts/Migrations.sol:11:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use &quot;constructor(...) &#123; ... &#125;&quot; instead.</span><br><span class=\"line\">  function Migrations() public &#123;</span><br><span class=\"line\">  ^ (Relevant source part starts here and spans across multiple lines).</span><br><span class=\"line\"></span><br><span class=\"line\">Writing artifacts to ./build/contracts</span><br></pre></td></tr></table></figure>\n<p>3、安装OpenZeppelin来简化加密钱包开发过程；</p>\n<p><code>OpenZeppelin</code>是一套能够给我们方便提供编写加密合约的函数库，同时里面也提供了兼容<code>ERC20</code>的智能合约。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install zeppelin-solidity</span><br></pre></td></tr></table></figure>\n<p>4、创建代币合约</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;../node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">contract NewCoin is StandardToken&#123;</span><br><span class=\"line\">    string public name = &quot;NewCoin&quot;;</span><br><span class=\"line\">    string public symbol = &quot;NC&quot;;</span><br><span class=\"line\">    uint8 public decimals = 8;</span><br><span class=\"line\">    uint256 public INITIAL_SUPPLY = 21000000;</span><br><span class=\"line\"></span><br><span class=\"line\">    function NewCoin()&#123;</span><br><span class=\"line\">        totalSupply_ = INITIAL_SUPPLY;</span><br><span class=\"line\">        balances[msg.sender] = INITIAL_SUPPLY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5、编译、部署和验证</p>\n<p>在<code>migrations/</code>目录下建立一个<code>3_deploy_contracts.js</code>文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var NenmoCoin = artifacts.require(&quot;./NenmoCoin.sol&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function(deployer) &#123;</span><br><span class=\"line\">  deployer.deploy(NenmoCoin);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>部署：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">truffle develop\t\t\t//进入开发环境</span><br><span class=\"line\">compile\t\t\t\t    //编译</span><br><span class=\"line\">migrate\t\t\t\t\t//部署在truffle环境上</span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">truffle(develop)&gt; var c</span><br><span class=\"line\">undefined</span><br><span class=\"line\">truffle(develop)&gt; c = NenmoCoin.deployed().then(instance =&gt; contract = instance)</span><br><span class=\"line\">TruffleContract &#123;</span><br><span class=\"line\">  constructor:</span><br><span class=\"line\">......</span><br><span class=\"line\">  allEvents: [Function: bound ],</span><br><span class=\"line\">  address: &apos;0x8f0483125fcb9aaaefa9209d8e9d7b9c8b9fb90f&apos;,</span><br><span class=\"line\">  transactionHash: null &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">truffle(develop)&gt; contract.balanceOf(web3.eth.coinbase)</span><br><span class=\"line\">BigNumber &#123; s: 1, e: 7, c: [ 21000000 ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.balanceOf(web3.eth.accounts[1])</span><br><span class=\"line\">BigNumber &#123; s: 1, e: 0, c: [ 0 ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.transfer(web3.eth.accounts[1], 100)</span><br><span class=\"line\">&#123; tx: &apos;0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc&apos;,</span><br><span class=\"line\">  receipt:</span><br><span class=\"line\">   &#123; transactionHash: &apos;0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc&apos;,</span><br><span class=\"line\">     transactionIndex: 0,</span><br><span class=\"line\">     blockHash: &apos;0xeb9546c74c6a897e05ecfe223238cfa80b3db4f37a567f02b5c1d20ffec7b6c3&apos;,</span><br><span class=\"line\">     blockNumber: 7,</span><br><span class=\"line\">     gasUsed: 51569,</span><br><span class=\"line\">     cumulativeGasUsed: 51569,</span><br><span class=\"line\">     contractAddress: null,</span><br><span class=\"line\">     logs: [ [Object] ],</span><br><span class=\"line\">     status: &apos;0x01&apos;,</span><br><span class=\"line\">     logsBloom: &apos;0xapos; &#125;,</span><br><span class=\"line\">  logs:</span><br><span class=\"line\">   [ &#123; logIndex: 0,</span><br><span class=\"line\">       transactionIndex: 0,</span><br><span class=\"line\">       transactionHash: &apos;0x6d31007768fc72ed31aa574c0af0f24f9e5fea05d31e8e8c0464df4d88276dfc&apos;,</span><br><span class=\"line\">       blockHash: &apos;0xeb9546c74c6a897e05ecfe223238cfa80b3db4f37a567f02b5c1d20ffec7b6c3&apos;,</span><br><span class=\"line\">       blockNumber: 7,</span><br><span class=\"line\">       address: &apos;0x8f0483125fcb9aaaefa9209d8e9d7b9c8b9fb90f&apos;,</span><br><span class=\"line\">       type: &apos;mined&apos;,</span><br><span class=\"line\">       event: &apos;Transfer&apos;,</span><br><span class=\"line\">       args: [Object] &#125; ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.balanceOf(web3.eth.coinbase)</span><br><span class=\"line\">BigNumber &#123; s: 1, e: 7, c: [ 20999900 ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.balanceOf(web3.eth.accounts[1])</span><br><span class=\"line\">BigNumber &#123; s: 1, e: 2, c: [ 100 ] &#125;</span><br><span class=\"line\">truffle(develop)&gt; contract.name.call()</span><br><span class=\"line\">&apos;NenmoCoin&apos;</span><br><span class=\"line\">truffle(develop)&gt; contract.symbol.call()</span><br><span class=\"line\">&apos;NMB&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署到geth私链：\"><a href=\"#部署到geth私链：\" class=\"headerlink\" title=\"部署到geth私链：\"></a>部署到geth私链：</h3><p> attach 进入console：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">geth  attach ipc:/root/goproject/private-chain/geth.ipc</span><br></pre></td></tr></table></figure>\n<p>查看帐户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;personal</span><br><span class=\"line\">&gt;personal.newAccount(&quot;some-key&quot;)</span><br><span class=\"line\">&gt;personal</span><br><span class=\"line\">//此时我们应该看到两个帐户，我们使用帐户进行部署合约</span><br><span class=\"line\">&gt;miner.start()</span><br><span class=\"line\">&gt;eth.sendTransaction(&#123;from:eth.coinbase, to:eth.accounts[1], value: web3.toWei(10000, &quot;ether&quot;)&#125;)</span><br><span class=\"line\">&gt;personal.unlockAccount(eth.accounts[1])  //部署合约之前，必须把帐户进行解锁</span><br></pre></td></tr></table></figure>\n<p>查看truffle.js：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">     networks: &#123;</span><br><span class=\"line\">         development: &#123;</span><br><span class=\"line\">               host: &quot;192.168.116.56&quot;,</span><br><span class=\"line\">               port: 8989,</span><br><span class=\"line\">               network_id: &quot;123&quot;,</span><br><span class=\"line\">               from: &quot;0x528abd58142fbf77d4e648cd43458625297fa059&quot;,  //此处为解锁的帐户</span><br><span class=\"line\">               gas: 3000000,</span><br><span class=\"line\">               gasPrice: 100,</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>truffle migrate //部署到geth</p>\n<p>【truffle migrate】问题汇总：</p>\n<ul>\n<li>Error: exceeds block gas limit undefined</li>\n</ul>\n<p>当前合约所需的gas超过了区块的最大gas。这可能是由于创世区块的配置文件<code>genesis.json</code>中的参数<code>gasLimit</code>设置过小有关，</p>\n<p>解决方案：<br>    重置truffle.js中gas参数的大小；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//再次进入ipc</span><br><span class=\"line\">geth  attach ipc:/root/goproject/private-chain/geth.ipc</span><br></pre></td></tr></table></figure>\n<h3 id=\"在geth中查找已部署的合约\"><a href=\"#在geth中查找已部署的合约\" class=\"headerlink\" title=\"在geth中查找已部署的合约\"></a>在geth中查找已部署的合约</h3><p>从truffle 项目目录下，build/contracts/NewCoin.json获取abi；并由<a href=\"http://www.bejson.com/jsonviewernew/\" target=\"_blank\" rel=\"noopener\">http://www.bejson.com</a> 转成字符串；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var abi = JSON.parse($abi)</span><br><span class=\"line\">var address = &quot;0x8d014d58bfdc56408b2af6ef8e7b09eba1c8b940&quot;; //truffle migrate 生成的address</span><br><span class=\"line\">var newcoin = web3.eth.contract(abi).at(address)</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用合约中的方法：\"><a href=\"#调用合约中的方法：\" class=\"headerlink\" title=\"调用合约中的方法：\"></a>调用合约中的方法：</h3><ul>\n<li>call() 直接返回结果，不会写入区块链</li>\n<li>sendTransaction() 发送一笔交易，会写入区块链中，返回值是交易的哈希值。</li>\n</ul>\n<h3 id=\"ERC20-Token\"><a href=\"#ERC20-Token\" class=\"headerlink\" title=\"ERC20 Token\"></a>ERC20 Token</h3><p>ERC20是以太坊定义的一个代币标准。是一种发行代币合约必须要遵守的协议，该协议规定了几个参数：</p>\n<ul>\n<li>发行货币的名称</li>\n<li>简称</li>\n<li>发行量</li>\n<li>支持的函数</li>\n</ul>\n<p>只有支持了该协议才会被以太坊所认同；</p>\n<p>erc20 标准</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://github.com/ethereum/EIPs/issues/20</span></span><br><span class=\"line\">contract ERC20 &#123;</span><br><span class=\"line\">    function totalSupply() constant returns (<span class=\"keyword\">uint</span> totalSupply);</span><br><span class=\"line\">    function balanceOf(address _owner) constant returns (<span class=\"keyword\">uint</span> balance);</span><br><span class=\"line\">    function transfer(address _to, <span class=\"keyword\">uint</span> _value) returns (<span class=\"keyword\">bool</span> success);</span><br><span class=\"line\">    function transferFrom(address _from, address _to, <span class=\"keyword\">uint</span> _value) returns (<span class=\"keyword\">bool</span> success);</span><br><span class=\"line\">    function approve(address _spender, <span class=\"keyword\">uint</span> _value) returns (<span class=\"keyword\">bool</span> success);</span><br><span class=\"line\">    function allowance(address _owner, address _spender) constant returns (<span class=\"keyword\">uint</span> remaining);</span><br><span class=\"line\">    event Transfer(address indexed _from, address indexed _to, <span class=\"keyword\">uint</span> _value);</span><br><span class=\"line\">    event Approval(address indexed _owner, address indexed _spender, <span class=\"keyword\">uint</span> _value);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>solidity：</p>\n<ul>\n<li>address<ul>\n<li>属性：balances</li>\n<li>函数: send(), call(), delegatecall(), callcode()</li>\n</ul>\n</li>\n</ul>\n<p>solidity 语法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.jianshu.com/p/e8113bfa7694</span><br></pre></td></tr></table></figure></p>\n<p>对tx.data进行Keccak256（）编码；</p>\n<p>以太坊交易的类型：</p>\n<ul>\n<li>转账的交易</li>\n<li>创建合约的交易</li>\n<li>执行合约的交易</li>\n</ul>\n<p>参数是一个对象，在发送交易的时候指定不同的字段，区块链及链根据参数识别出对应类型的交易；</p>\n<p>转账交易：<br>转账是最简单的一种交易，从一个帐户向另一个帐户发送以太币<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web3.eth.sendTransaction(&#123;</span><br><span class=\"line\">    from: &quot;0x....&quot;,</span><br><span class=\"line\">    to:   &quot;0x....&quot;,</span><br><span class=\"line\">    value: 100000</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>创建合约的交易：<br>将合约部署到区块链节点上，通过发送交易来实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web3.eth.sendTransaction(&#123;</span><br><span class=\"line\">    from: &quot;交易的发送者也是合约的创建者&quot;,</span><br><span class=\"line\">    data: &quot;指定合约的abi&quot;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>to字段留空不填</p>\n<p>执行合约的交易：调用合约中的方法，需要将交易的to字段指定为调用的合约的地址， 通过data字段指定要调用的方法以及向该方法传递的参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web3.eth.sendTransaction(&#123;</span><br><span class=\"line\">    from: &quot;sender&apos;s address&quot;,</span><br><span class=\"line\">    to: &quot; contract address&quot;,</span><br><span class=\"line\">    data: &quot;目标方法和传递的参数&quot;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>data字段需要特殊的编码规则，一般使用SDK(web3.js)</p>\n<h3 id=\"web3-eth\"><a href=\"#web3-eth\" class=\"headerlink\" title=\"web3.eth\"></a>web3.eth</h3><p>包含以太坊区块链相关的方法</p>\n<ul>\n<li>web3.eth.gasprice  //gas当前单价</li>\n<li>web3.eth.accounts  //当前节点的帐户列表</li>\n<li>web3.eth.getBalance()</li>\n<li>web3.eth.getTransaction()<br>创建帐户</li>\n</ul>\n<p>gas limit: 这个交易的执行最都被允许使用的计算步骤<br>gas price: 交易发送者愿意支付的gas费用，一个单位的gas表示了执行一个基本指令；</p>\n<p>eth测试网络用户名：cp123456<br>key：clown magic joy essence collect find auction announce shrimp gate fruit urge</p>\n"},{"title":"goroutine","_content":"\n### 协程\n协程（Coroutine）本质上是一种用户态线程，不需要操作系统来进行抢占式调度，且在真正的实现中寄存于线程中，因此，系统开销极小，可以有效提高线程的任务并发性，而避免多线程的缺点。使用协程的优点是编程简单，结构清晰；缺点是需要语言的支持，如果不支持，则需要用户在程序中自行实现调度器；目前，原生支持协程的语言还很少；\n\n### 并发通信\n- 两种最常用的并发通信模式：消息和共享数据\n```go\nvar ch map[string] chan bool\n```\n\n### 单向channel\n对channel的限制使用：<br/>\n一个channel变量传递到一个函数时，可以通过将其指定为单向channel变量，从而限制该函数中可以对此channel的操作，比如只能往这个channel写，或者只能从这个channel读。\n\n- 使用多核心CPU:\n```go\n  runtime.GOMAXPROCS(16)\n```\n- 出让时间片\n  使用runtime包中的Gosched()函数实现\n  实际上，需要精细地控制goroutine的行为，就必须深入地了解GO语言开发包中的runtime包所提供的具体功能；\n\n### go 网络编程\n- 标准库中的net包\n- 使用net.Dial()封装了socket(), bind(), listen(), connect(),accept(), receive(), send()函数；\n```go\nfunc handleMsg(conn net.Conn) ([]byte, error) {\n    defer conn.Close()\n\n    result := bytes.NewBuffer(nil)  //这里需要用循环buf来提高效率\n    var buf [512]byte\n    for {\n        size, err := conn.Read(buf[0:])\n        result.Write(buf[0:size])\n        if err != nil {\n            if err == io.EOF {\n                break\n            }\n            return nil, err\n        }\n    }\n    return result.Bytes(), nil\n}\n```\n\n### http\n- net/http包\n\n\n### 工程管理\n- 命名<br/>\n  驼峰命名命名法doSometing<br/>\n  c/c++则是下划线命名法\n- 目录结构\n```sh\n<calcproj>\n  ├─README\n  ├─AUTHORS\n  |─LICENSE\n  ├─<bin>\n    ├─calc\n  ├─<pkg>\n    └─<linux_amd64>\n      └─simplemath.a\n  ├─<src>\n    ├─<calc>\n      └─calc.go\n    ├─<simplemath>\n      ├─add.go\n      ├─add_test.go\n      ├─sqrt.go\n      ├─sqrt_test.go\n```\n","source":"_posts/go_goroutine.md","raw":"---\n    title: goroutine\n---\n\n### 协程\n协程（Coroutine）本质上是一种用户态线程，不需要操作系统来进行抢占式调度，且在真正的实现中寄存于线程中，因此，系统开销极小，可以有效提高线程的任务并发性，而避免多线程的缺点。使用协程的优点是编程简单，结构清晰；缺点是需要语言的支持，如果不支持，则需要用户在程序中自行实现调度器；目前，原生支持协程的语言还很少；\n\n### 并发通信\n- 两种最常用的并发通信模式：消息和共享数据\n```go\nvar ch map[string] chan bool\n```\n\n### 单向channel\n对channel的限制使用：<br/>\n一个channel变量传递到一个函数时，可以通过将其指定为单向channel变量，从而限制该函数中可以对此channel的操作，比如只能往这个channel写，或者只能从这个channel读。\n\n- 使用多核心CPU:\n```go\n  runtime.GOMAXPROCS(16)\n```\n- 出让时间片\n  使用runtime包中的Gosched()函数实现\n  实际上，需要精细地控制goroutine的行为，就必须深入地了解GO语言开发包中的runtime包所提供的具体功能；\n\n### go 网络编程\n- 标准库中的net包\n- 使用net.Dial()封装了socket(), bind(), listen(), connect(),accept(), receive(), send()函数；\n```go\nfunc handleMsg(conn net.Conn) ([]byte, error) {\n    defer conn.Close()\n\n    result := bytes.NewBuffer(nil)  //这里需要用循环buf来提高效率\n    var buf [512]byte\n    for {\n        size, err := conn.Read(buf[0:])\n        result.Write(buf[0:size])\n        if err != nil {\n            if err == io.EOF {\n                break\n            }\n            return nil, err\n        }\n    }\n    return result.Bytes(), nil\n}\n```\n\n### http\n- net/http包\n\n\n### 工程管理\n- 命名<br/>\n  驼峰命名命名法doSometing<br/>\n  c/c++则是下划线命名法\n- 目录结构\n```sh\n<calcproj>\n  ├─README\n  ├─AUTHORS\n  |─LICENSE\n  ├─<bin>\n    ├─calc\n  ├─<pkg>\n    └─<linux_amd64>\n      └─simplemath.a\n  ├─<src>\n    ├─<calc>\n      └─calc.go\n    ├─<simplemath>\n      ├─add.go\n      ├─add_test.go\n      ├─sqrt.go\n      ├─sqrt_test.go\n```\n","slug":"go_goroutine","published":1,"date":"2018-07-04T02:25:49.616Z","updated":"2018-07-04T02:25:49.615Z","_id":"cjj6hwjnv0004lihaonla0ilw","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h3><p>协程（Coroutine）本质上是一种用户态线程，不需要操作系统来进行抢占式调度，且在真正的实现中寄存于线程中，因此，系统开销极小，可以有效提高线程的任务并发性，而避免多线程的缺点。使用协程的优点是编程简单，结构清晰；缺点是需要语言的支持，如果不支持，则需要用户在程序中自行实现调度器；目前，原生支持协程的语言还很少；</p>\n<h3 id=\"并发通信\"><a href=\"#并发通信\" class=\"headerlink\" title=\"并发通信\"></a>并发通信</h3><ul>\n<li>两种最常用的并发通信模式：消息和共享数据<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ch <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>] <span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"单向channel\"><a href=\"#单向channel\" class=\"headerlink\" title=\"单向channel\"></a>单向channel</h3><p>对channel的限制使用：<br><br>一个channel变量传递到一个函数时，可以通过将其指定为单向channel变量，从而限制该函数中可以对此channel的操作，比如只能往这个channel写，或者只能从这个channel读。</p>\n<ul>\n<li><p>使用多核心CPU:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runtime.GOMAXPROCS(<span class=\"number\">16</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>出让时间片<br>使用runtime包中的Gosched()函数实现<br>实际上，需要精细地控制goroutine的行为，就必须深入地了解GO语言开发包中的runtime包所提供的具体功能；</p>\n</li>\n</ul>\n<h3 id=\"go-网络编程\"><a href=\"#go-网络编程\" class=\"headerlink\" title=\"go 网络编程\"></a>go 网络编程</h3><ul>\n<li>标准库中的net包</li>\n<li>使用net.Dial()封装了socket(), bind(), listen(), connect(),accept(), receive(), send()函数；<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleMsg</span><span class=\"params\">(conn net.Conn)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    result := bytes.NewBuffer(<span class=\"literal\">nil</span>)  <span class=\"comment\">//这里需要用循环buf来提高效率</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> buf [<span class=\"number\">512</span>]<span class=\"keyword\">byte</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        size, err := conn.Read(buf[<span class=\"number\">0</span>:])</span><br><span class=\"line\">        result.Write(buf[<span class=\"number\">0</span>:size])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> err == io.EOF &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.Bytes(), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h3><ul>\n<li>net/http包</li>\n</ul>\n<h3 id=\"工程管理\"><a href=\"#工程管理\" class=\"headerlink\" title=\"工程管理\"></a>工程管理</h3><ul>\n<li>命名<br><br>驼峰命名命名法doSometing<br><br>c/c++则是下划线命名法</li>\n<li>目录结构<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;calcproj&gt;</span><br><span class=\"line\">  ├─README</span><br><span class=\"line\">  ├─AUTHORS</span><br><span class=\"line\">  |─LICENSE</span><br><span class=\"line\">  ├─&lt;bin&gt;</span><br><span class=\"line\">    ├─calc</span><br><span class=\"line\">  ├─&lt;pkg&gt;</span><br><span class=\"line\">    └─&lt;linux_amd64&gt;</span><br><span class=\"line\">      └─simplemath.a</span><br><span class=\"line\">  ├─&lt;src&gt;</span><br><span class=\"line\">    ├─&lt;calc&gt;</span><br><span class=\"line\">      └─calc.go</span><br><span class=\"line\">    ├─&lt;simplemath&gt;</span><br><span class=\"line\">      ├─add.go</span><br><span class=\"line\">      ├─add_test.go</span><br><span class=\"line\">      ├─sqrt.go</span><br><span class=\"line\">      ├─sqrt_test.go</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h3><p>协程（Coroutine）本质上是一种用户态线程，不需要操作系统来进行抢占式调度，且在真正的实现中寄存于线程中，因此，系统开销极小，可以有效提高线程的任务并发性，而避免多线程的缺点。使用协程的优点是编程简单，结构清晰；缺点是需要语言的支持，如果不支持，则需要用户在程序中自行实现调度器；目前，原生支持协程的语言还很少；</p>\n<h3 id=\"并发通信\"><a href=\"#并发通信\" class=\"headerlink\" title=\"并发通信\"></a>并发通信</h3><ul>\n<li>两种最常用的并发通信模式：消息和共享数据<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ch <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>] <span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"单向channel\"><a href=\"#单向channel\" class=\"headerlink\" title=\"单向channel\"></a>单向channel</h3><p>对channel的限制使用：<br><br>一个channel变量传递到一个函数时，可以通过将其指定为单向channel变量，从而限制该函数中可以对此channel的操作，比如只能往这个channel写，或者只能从这个channel读。</p>\n<ul>\n<li><p>使用多核心CPU:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runtime.GOMAXPROCS(<span class=\"number\">16</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>出让时间片<br>使用runtime包中的Gosched()函数实现<br>实际上，需要精细地控制goroutine的行为，就必须深入地了解GO语言开发包中的runtime包所提供的具体功能；</p>\n</li>\n</ul>\n<h3 id=\"go-网络编程\"><a href=\"#go-网络编程\" class=\"headerlink\" title=\"go 网络编程\"></a>go 网络编程</h3><ul>\n<li>标准库中的net包</li>\n<li>使用net.Dial()封装了socket(), bind(), listen(), connect(),accept(), receive(), send()函数；<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleMsg</span><span class=\"params\">(conn net.Conn)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">    result := bytes.NewBuffer(<span class=\"literal\">nil</span>)  <span class=\"comment\">//这里需要用循环buf来提高效率</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> buf [<span class=\"number\">512</span>]<span class=\"keyword\">byte</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">        size, err := conn.Read(buf[<span class=\"number\">0</span>:])</span><br><span class=\"line\">        result.Write(buf[<span class=\"number\">0</span>:size])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> err == io.EOF &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result.Bytes(), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h3><ul>\n<li>net/http包</li>\n</ul>\n<h3 id=\"工程管理\"><a href=\"#工程管理\" class=\"headerlink\" title=\"工程管理\"></a>工程管理</h3><ul>\n<li>命名<br><br>驼峰命名命名法doSometing<br><br>c/c++则是下划线命名法</li>\n<li>目录结构<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;calcproj&gt;</span><br><span class=\"line\">  ├─README</span><br><span class=\"line\">  ├─AUTHORS</span><br><span class=\"line\">  |─LICENSE</span><br><span class=\"line\">  ├─&lt;bin&gt;</span><br><span class=\"line\">    ├─calc</span><br><span class=\"line\">  ├─&lt;pkg&gt;</span><br><span class=\"line\">    └─&lt;linux_amd64&gt;</span><br><span class=\"line\">      └─simplemath.a</span><br><span class=\"line\">  ├─&lt;src&gt;</span><br><span class=\"line\">    ├─&lt;calc&gt;</span><br><span class=\"line\">      └─calc.go</span><br><span class=\"line\">    ├─&lt;simplemath&gt;</span><br><span class=\"line\">      ├─add.go</span><br><span class=\"line\">      ├─add_test.go</span><br><span class=\"line\">      ├─sqrt.go</span><br><span class=\"line\">      ├─sqrt_test.go</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"go之基础重温","_content":"- 值语义\n  - 大多数类型基于值语义，包括基本类型：byte, int, bool, float32, float64 和string\n  - 复合类型： array, struct, pointer\n\n- 引用语义\n  - 数组切片\n  - map\n  - channel\n  - interface\n\n- Go中的struct与其他语言的类(class)有同等地位，Go中放弃了包括继承在内的大量面向对象特性，只保留了组合composition这个基础特性；\n- Go中未被初始化的值都被初始化为该类型的零值；\n\n```go\ntype Rect struct{\n  x int\n  y int\n}\n//初始化\nrect := new(Rect)\nrect := &Rect{}\nrect := &Rect{1,  2}\nrect := &Rect{\n  x: 1,\n  y: 2,\n}\n\n//约定俗成的规矩，而非强制\n/* 对象的创建通常由一个全局的创建函数完成，NewXXX来命名，表示构造函数 */\nfunc NewRect(x, y, width, height int) *Rect{\n  return &Rect{\n    x: x,\n    y: y,\n  }\n}\n```\n\n- 匿名组合\n```go\ntype Foo struct{\n    Rect\n    z int\n}\n\nfunc NewFoo(x, y, z) *Foo{\n  return &Foo{\n    Base: Base{x: x, y: y},\n    z: z,\n  }\n\n  //形式2， y后面的逗号\n  return &Foo{\n        Base: Base{\n            X: x,\n            Y: y,\n        },\n        z: z,\n    }\n}\nvar  f *Foo\nf.Base.Bfunc()\nf.Bfunc()\n```\n\n- 可见性\n\n  需要使某个符号对其他包可见，需要将该符号定义为以大写字母开头\n\n<font color=\"#dd0000\">- interface 接口 </font><br />\n<font color=\"#dd0000\">- interface 赋值 </font><br />\n```go\nfunc (this *Foo)add(size int){\n  this.X += size\n}\n\nfunc (this Foo)less(m int) bool {\n  return Foo.X > m\n}\n\ntype Add interface{\n  add(s int)\n  less(m int) bool\n}\n\nvar f = Foo{Base{X: 1, Y: 2}, 3}\nvar a Add = &foo        //pointer      (1)\nvar a Add = foo         // error       (2)\n\n 应该用语句(1)。原因在于，Go语言可以根据下面的函数：\nfunc (this Foo) less(m int) bool\n自动生成一个新的Less()方法：\nfunc (this *Foo) less(m int) bool {\nreturn (*this).less(m)\n}\n\n这样，类型*Foo就既存在less()方法，也存在add()方法，满足Add接口。而从另一方面来说，根据\nfunc (this *Foo) add(size int)\n这个函数无法自动生成以下这个成员方法：\nfunc (this Foo) add(size int) {\n  (&this).add(size)\n}\n因为(&this).add()改变的只是函数参数a，对外部实际要操作的对象并无影响，这不符合用\n户的预期。所以，Go语言不会自动为其生成该函数。因此，类型Foo只存在less()方法，\n缺少add()方法，不满足Add接口，故此上面的语句(2)不能赋值。\n```\n\n- 接口查询:\n\n```go\nvar f = Foo{Base{X:1, Y: 2}, 3}\nif f_, ok := f.(Add); ok{\n    ...\n}\n\nvar v1 interface{} = ...\nswitch v := v1.(type){\ncase int:\ncase string:\ndefault:\n...\n}\n```\n","source":"_posts/golang_base.md","raw":"---\ntitle: go之基础重温\n---\n- 值语义\n  - 大多数类型基于值语义，包括基本类型：byte, int, bool, float32, float64 和string\n  - 复合类型： array, struct, pointer\n\n- 引用语义\n  - 数组切片\n  - map\n  - channel\n  - interface\n\n- Go中的struct与其他语言的类(class)有同等地位，Go中放弃了包括继承在内的大量面向对象特性，只保留了组合composition这个基础特性；\n- Go中未被初始化的值都被初始化为该类型的零值；\n\n```go\ntype Rect struct{\n  x int\n  y int\n}\n//初始化\nrect := new(Rect)\nrect := &Rect{}\nrect := &Rect{1,  2}\nrect := &Rect{\n  x: 1,\n  y: 2,\n}\n\n//约定俗成的规矩，而非强制\n/* 对象的创建通常由一个全局的创建函数完成，NewXXX来命名，表示构造函数 */\nfunc NewRect(x, y, width, height int) *Rect{\n  return &Rect{\n    x: x,\n    y: y,\n  }\n}\n```\n\n- 匿名组合\n```go\ntype Foo struct{\n    Rect\n    z int\n}\n\nfunc NewFoo(x, y, z) *Foo{\n  return &Foo{\n    Base: Base{x: x, y: y},\n    z: z,\n  }\n\n  //形式2， y后面的逗号\n  return &Foo{\n        Base: Base{\n            X: x,\n            Y: y,\n        },\n        z: z,\n    }\n}\nvar  f *Foo\nf.Base.Bfunc()\nf.Bfunc()\n```\n\n- 可见性\n\n  需要使某个符号对其他包可见，需要将该符号定义为以大写字母开头\n\n<font color=\"#dd0000\">- interface 接口 </font><br />\n<font color=\"#dd0000\">- interface 赋值 </font><br />\n```go\nfunc (this *Foo)add(size int){\n  this.X += size\n}\n\nfunc (this Foo)less(m int) bool {\n  return Foo.X > m\n}\n\ntype Add interface{\n  add(s int)\n  less(m int) bool\n}\n\nvar f = Foo{Base{X: 1, Y: 2}, 3}\nvar a Add = &foo        //pointer      (1)\nvar a Add = foo         // error       (2)\n\n 应该用语句(1)。原因在于，Go语言可以根据下面的函数：\nfunc (this Foo) less(m int) bool\n自动生成一个新的Less()方法：\nfunc (this *Foo) less(m int) bool {\nreturn (*this).less(m)\n}\n\n这样，类型*Foo就既存在less()方法，也存在add()方法，满足Add接口。而从另一方面来说，根据\nfunc (this *Foo) add(size int)\n这个函数无法自动生成以下这个成员方法：\nfunc (this Foo) add(size int) {\n  (&this).add(size)\n}\n因为(&this).add()改变的只是函数参数a，对外部实际要操作的对象并无影响，这不符合用\n户的预期。所以，Go语言不会自动为其生成该函数。因此，类型Foo只存在less()方法，\n缺少add()方法，不满足Add接口，故此上面的语句(2)不能赋值。\n```\n\n- 接口查询:\n\n```go\nvar f = Foo{Base{X:1, Y: 2}, 3}\nif f_, ok := f.(Add); ok{\n    ...\n}\n\nvar v1 interface{} = ...\nswitch v := v1.(type){\ncase int:\ncase string:\ndefault:\n...\n}\n```\n","slug":"golang_base","published":1,"date":"2018-06-21T03:36:44.944Z","updated":"2018-06-21T03:36:44.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj6hwjop0006lihang4htbvq","content":"<ul>\n<li><p>值语义</p>\n<ul>\n<li>大多数类型基于值语义，包括基本类型：byte, int, bool, float32, float64 和string</li>\n<li>复合类型： array, struct, pointer</li>\n</ul>\n</li>\n<li><p>引用语义</p>\n<ul>\n<li>数组切片</li>\n<li>map</li>\n<li>channel</li>\n<li>interface</li>\n</ul>\n</li>\n<li><p>Go中的struct与其他语言的类(class)有同等地位，Go中放弃了包括继承在内的大量面向对象特性，只保留了组合composition这个基础特性；</p>\n</li>\n<li>Go中未被初始化的值都被初始化为该类型的零值；</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  x <span class=\"keyword\">int</span></span><br><span class=\"line\">  y <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\">rect := <span class=\"built_in\">new</span>(Rect)</span><br><span class=\"line\">rect := &amp;Rect&#123;&#125;</span><br><span class=\"line\">rect := &amp;Rect&#123;<span class=\"number\">1</span>,  <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">rect := &amp;Rect&#123;</span><br><span class=\"line\">  x: <span class=\"number\">1</span>,</span><br><span class=\"line\">  y: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//约定俗成的规矩，而非强制</span></span><br><span class=\"line\"><span class=\"comment\">/* 对象的创建通常由一个全局的创建函数完成，NewXXX来命名，表示构造函数 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewRect</span><span class=\"params\">(x, y, width, height <span class=\"keyword\">int</span>)</span> *<span class=\"title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Rect&#123;</span><br><span class=\"line\">    x: x,</span><br><span class=\"line\">    y: y,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>匿名组合</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Foo <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Rect</span><br><span class=\"line\">    z <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewFoo</span><span class=\"params\">(x, y, z)</span> *<span class=\"title\">Foo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Foo&#123;</span><br><span class=\"line\">    Base: Base&#123;x: x, y: y&#125;,</span><br><span class=\"line\">    z: z,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//形式2， y后面的逗号</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Foo&#123;</span><br><span class=\"line\">        Base: Base&#123;</span><br><span class=\"line\">            X: x,</span><br><span class=\"line\">            Y: y,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        z: z,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span>  f *Foo</span><br><span class=\"line\">f.Base.Bfunc()</span><br><span class=\"line\">f.Bfunc()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可见性</p>\n<p>需要使某个符号对其他包可见，需要将该符号定义为以大写字母开头</p>\n</li>\n</ul>\n<p><font color=\"#dd0000\">- interface 接口 </font><br></p>\n<p><font color=\"#dd0000\">- interface 赋值 </font><br><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Foo)</span><span class=\"title\">add</span><span class=\"params\">(size <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">  this.X += size</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this Foo)</span><span class=\"title\">less</span><span class=\"params\">(m <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Foo.X &gt; m</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Add <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">  add(s <span class=\"keyword\">int</span>)</span><br><span class=\"line\">  less(m <span class=\"keyword\">int</span>) <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = Foo&#123;Base&#123;X: <span class=\"number\">1</span>, Y: <span class=\"number\">2</span>&#125;, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a Add = &amp;foo        <span class=\"comment\">//pointer      (1)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a Add = foo         <span class=\"comment\">// error       (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\"> 应该用语句(<span class=\"number\">1</span>)。原因在于，Go语言可以根据下面的函数：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this Foo)</span> <span class=\"title\">less</span><span class=\"params\">(m <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">自动生成一个新的<span class=\"title\">Less</span><span class=\"params\">()</span>方法：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(this *Foo)</span> <span class=\"title\">less</span><span class=\"params\">(m <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (*this).less(m)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">这样，类型*Foo就既存在less()方法，也存在add()方法，满足Add接口。而从另一方面来说，根据</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Foo)</span> <span class=\"title\">add</span><span class=\"params\">(size <span class=\"keyword\">int</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">这个函数无法自动生成以下这个成员方法：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(this Foo)</span> <span class=\"title\">add</span><span class=\"params\">(size <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  (&amp;this).add(size)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">因为(&amp;this).add()改变的只是函数参数a，对外部实际要操作的对象并无影响，这不符合用</span><br><span class=\"line\">户的预期。所以，Go语言不会自动为其生成该函数。因此，类型Foo只存在less()方法，</span><br><span class=\"line\">缺少add()方法，不满足Add接口，故此上面的语句(<span class=\"number\">2</span>)不能赋值。</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>接口查询:</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = Foo&#123;Base&#123;X:<span class=\"number\">1</span>, Y: <span class=\"number\">2</span>&#125;, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> f_, ok := f.(Add); ok&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> v1 <span class=\"keyword\">interface</span>&#123;&#125; = ...</span><br><span class=\"line\"><span class=\"keyword\">switch</span> v := v1.(<span class=\"keyword\">type</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">int</span>:</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">string</span>:</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>值语义</p>\n<ul>\n<li>大多数类型基于值语义，包括基本类型：byte, int, bool, float32, float64 和string</li>\n<li>复合类型： array, struct, pointer</li>\n</ul>\n</li>\n<li><p>引用语义</p>\n<ul>\n<li>数组切片</li>\n<li>map</li>\n<li>channel</li>\n<li>interface</li>\n</ul>\n</li>\n<li><p>Go中的struct与其他语言的类(class)有同等地位，Go中放弃了包括继承在内的大量面向对象特性，只保留了组合composition这个基础特性；</p>\n</li>\n<li>Go中未被初始化的值都被初始化为该类型的零值；</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Rect <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  x <span class=\"keyword\">int</span></span><br><span class=\"line\">  y <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\">rect := <span class=\"built_in\">new</span>(Rect)</span><br><span class=\"line\">rect := &amp;Rect&#123;&#125;</span><br><span class=\"line\">rect := &amp;Rect&#123;<span class=\"number\">1</span>,  <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">rect := &amp;Rect&#123;</span><br><span class=\"line\">  x: <span class=\"number\">1</span>,</span><br><span class=\"line\">  y: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//约定俗成的规矩，而非强制</span></span><br><span class=\"line\"><span class=\"comment\">/* 对象的创建通常由一个全局的创建函数完成，NewXXX来命名，表示构造函数 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewRect</span><span class=\"params\">(x, y, width, height <span class=\"keyword\">int</span>)</span> *<span class=\"title\">Rect</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Rect&#123;</span><br><span class=\"line\">    x: x,</span><br><span class=\"line\">    y: y,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>匿名组合</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Foo <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    Rect</span><br><span class=\"line\">    z <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewFoo</span><span class=\"params\">(x, y, z)</span> *<span class=\"title\">Foo</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Foo&#123;</span><br><span class=\"line\">    Base: Base&#123;x: x, y: y&#125;,</span><br><span class=\"line\">    z: z,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//形式2， y后面的逗号</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Foo&#123;</span><br><span class=\"line\">        Base: Base&#123;</span><br><span class=\"line\">            X: x,</span><br><span class=\"line\">            Y: y,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        z: z,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span>  f *Foo</span><br><span class=\"line\">f.Base.Bfunc()</span><br><span class=\"line\">f.Bfunc()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可见性</p>\n<p>需要使某个符号对其他包可见，需要将该符号定义为以大写字母开头</p>\n</li>\n</ul>\n<p><font color=\"#dd0000\">- interface 接口 </font><br></p>\n<p><font color=\"#dd0000\">- interface 赋值 </font><br><br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Foo)</span><span class=\"title\">add</span><span class=\"params\">(size <span class=\"keyword\">int</span>)</span></span>&#123;</span><br><span class=\"line\">  this.X += size</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this Foo)</span><span class=\"title\">less</span><span class=\"params\">(m <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Foo.X &gt; m</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Add <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">  add(s <span class=\"keyword\">int</span>)</span><br><span class=\"line\">  less(m <span class=\"keyword\">int</span>) <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = Foo&#123;Base&#123;X: <span class=\"number\">1</span>, Y: <span class=\"number\">2</span>&#125;, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a Add = &amp;foo        <span class=\"comment\">//pointer      (1)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a Add = foo         <span class=\"comment\">// error       (2)</span></span><br><span class=\"line\"></span><br><span class=\"line\"> 应该用语句(<span class=\"number\">1</span>)。原因在于，Go语言可以根据下面的函数：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this Foo)</span> <span class=\"title\">less</span><span class=\"params\">(m <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">自动生成一个新的<span class=\"title\">Less</span><span class=\"params\">()</span>方法：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(this *Foo)</span> <span class=\"title\">less</span><span class=\"params\">(m <span class=\"keyword\">int</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (*this).less(m)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">这样，类型*Foo就既存在less()方法，也存在add()方法，满足Add接口。而从另一方面来说，根据</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *Foo)</span> <span class=\"title\">add</span><span class=\"params\">(size <span class=\"keyword\">int</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">这个函数无法自动生成以下这个成员方法：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"params\">(this Foo)</span> <span class=\"title\">add</span><span class=\"params\">(size <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  (&amp;this).add(size)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">因为(&amp;this).add()改变的只是函数参数a，对外部实际要操作的对象并无影响，这不符合用</span><br><span class=\"line\">户的预期。所以，Go语言不会自动为其生成该函数。因此，类型Foo只存在less()方法，</span><br><span class=\"line\">缺少add()方法，不满足Add接口，故此上面的语句(<span class=\"number\">2</span>)不能赋值。</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>接口查询:</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = Foo&#123;Base&#123;X:<span class=\"number\">1</span>, Y: <span class=\"number\">2</span>&#125;, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> f_, ok := f.(Add); ok&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> v1 <span class=\"keyword\">interface</span>&#123;&#125; = ...</span><br><span class=\"line\"><span class=\"keyword\">switch</span> v := v1.(<span class=\"keyword\">type</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">int</span>:</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">string</span>:</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-06-21T03:36:44.944Z","updated":"2018-06-21T03:36:44.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj6hwjp70007lihaytzoogyj","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"ipfs","_content":"\n### ipfs系统相关命令 (主要与ipfs在/root/.ipfs/的配置相关）\n\n- ipfs id\n- ipfs 跨域\n  - `ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"PUT\", \"GET\", \"POST\", \"OPTIONS\"]'`\n  - `ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"*\"]'`\n\n### 操作相关命令\n\n- ipfs add demo.file   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //upload file and the output is hash key\n- ipfs get {hash key}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //download file\n- ipfs add -r  {dir}   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //递归添加，输出包含文件和目录的hash key\n- ipfs get {dir hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //download dir and file\n- ipfs get {not exist hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //一直blocked\n- 目录操作\n  - ipfs files  mkdir  /demo         //只能是一级一级创建，不能多级创建\n  - ipfs files cp /ipfs/QmXXX   /demo/file.txt\n  - ipfs filess ls /    ;  ipfs files ls /demo\n  - ipfs files read /demo/file.txt\n\n#### 增加目录\n\n- ipfs add  -r demo\n\n\t\tadded QmZoApUnALi4oRJpGGZhgDi8cp3x65EA668nnJMrqEonPg demo/demo2.txt\n\tadded QmWMgtnYhbEuEVRvdejoD8bEuLy5JJisD19WrJYCqQiHeP demo/ipget\n\tadded QmefA8mR2ed2mTfaqtm7RbNAY2nMDpKkBUtKmg61kcq617 demo\n\n-  ipfs cat  QmefA8mR2ed2mTfaqtm7RbNAY2nMDpKkBUtKmg61kcq617/demo2.txt\n\n#### Pin （是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）\n\n&nbsp;&nbsp;IPFS的Pin是将文件长期保留在本地，不被垃圾回收；\n\n- ipfs pin ls  //查看哪些文件在本地是持久化的，通过 add 添加的文件默认就是 pin 过的\n\n### IPFS存储文件时，会经历以下几个步骤：\n\n-  把单个文件拆分成若干个256KB大小的块（ block，这个就可以理解成扇区 ）；\n- 逐块(block)计算block hash，hashn = hash ( blockn )；\n- 把所有的block hash拼凑成一个数组，再计算一次hash，便得到了文件最终的hash，hash ( file ) = hash ( hash1……n )，并将这个 hash（file） 和block hash数组“捆绑”起来，组成一个对象，把这个对象当做一个索引结构；\n- 把block、索引结构全部上传给IPFS节点，文件便同步到了IPFS网络了；\n-  把 Hash（file）打印出来，读的时候用；\n\n### 绑定节点\n\n- ipfs name publish {dir hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //将该目录与ipfs node id进行绑定\n\n### 绑定节点之后，可以通过ipns进行访问\n\n- ipfs cat /ipns/{ipfs node id}/demo.txt &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //demo.txt为dir下文件\n\n### DNS 解析\n\n&nbsp;&nbsp;IPFS 允许用户使用现有的域名系统，这样就能用一个好记的地址来访问文件；\n\n- ipfs cat /ipns/ipfs.b3log.org/hacpai/README.md\n\n只需要在DNS解析加入一条TXT记录即可：\n\nTXT\tipfs\tdnslink=/ipns/{ipfs node id}\n\n### 查看当前ipfs节点连接状态\n\n\tipfs swarm peers\n\n### 查看数据提供方 （这里需要深入研究）\n\n\tipfs dht findprovs <hash>\n\tipfs dht provide   <hash>\n\tipfs bitswap ledger <peer ID>  #对账单\n\n### 查找peer：\n\n\tipfs dht findpeer <node A peerID>\n\n### 手动连接特定节点:\n\n\tipfs swarm connect <multiaddr>\n\n\n### ipfs p2p listener ls\n\n\t[root@SJ-T1-Cloud172 .ipfs]# ipfs p2p listener ls\n\tError: libp2p stream mounting not enabled\n\t需要修改config中Libp2pStreamMounting\n\n### 删除local store file\n\n\tipfs pin rm <hash>\n\tipfs repo gc\n\n\n### 生成hash，但不上传\n\n\techo <data>  | ipfs add -n\n\tipfs add <file> -n\n\n### add分析：\n\n\tipfs add alargefile  //ensure this file is larger than 256k,otherwise has no sub-tree\n\tipfs ls thathash\n\n\tipfs@earth ~> ipfs ls qms2hjwx8qejwm4nmwu7ze6ndam2sfums3x6idwz5myzbn\n\tqmv8ndh7ageh9b24zngaextmuhj7aiuw3scc8hkczvjkww 7866189  //称为block\n\tqmuvjja4s4cgyqyppozttssquvgcv2n2v8mae3gnkrxmol 7866189\n\tqmrgjmlhlddhvxuieveuuwkeci4ygx8z7ujunikzpfzjuk 7866189\n\tqmrolalcquyo5vu5v8bvqmgjcpzow16wukq3s3vrll2tdk 7866189\n\tqmwk51jygpchgwr3srdnmhyerheqd22qw3vvyamb3emhuw 5244129\n\n### 查看block：\n\n\tipfs cat <block hash>  //output to screen\n\tipfs block stat <block hash> //查看block状态，大小等\n\n\tipfs refs <block hash> //打印该block的子块\n\t等价于\n\tipfs object links <block hash> 或 ipfs ls <block hash>\n\n### 查看ipfs对象底层结构：\n\n\tipfs object get <hash>\n\n\n### debug模式运行\n\n\tIPFS_LOGGING=debug ipfs daemon\n\t//eventlog output:\n\tipfs log tail\n\t//or\n\tcurl http://localhost:5001/logs\n\nipfs blog：\n\nhttps://forum.qtum.org/topic/87/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%98%9F%E9%99%85%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E7%BD%91%E7%BB%9C-ipfs-%E6%90%AD%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BE%E6%9C%8D%E5%8A%A1-%E4%B8%80\n\n## IPFS 内部\n\nIPLD（ InterPlanetary Linked Data） 主要用来定义数据， 给数据建模；定义了统一的数据模型IPLD ；\n\n    \"API\": \"/ip4/0.0.0.0/tcp/5001\",\n    \"Gateway\": \"/ip4/0.0.0.0/tcp/8080\"\n\n\n\ndb 删除到某个单词的开始位置\n\ndw 删除到某个单词的结尾位置\n\nD 删除到某一行的结尾\n\nd0 删至行首。\n\nd$ 删至行尾。\n","source":"_posts/ipfs.md","raw":"---\ntitle: ipfs \n---\n\n### ipfs系统相关命令 (主要与ipfs在/root/.ipfs/的配置相关）\n\n- ipfs id\n- ipfs 跨域\n  - `ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"PUT\", \"GET\", \"POST\", \"OPTIONS\"]'`\n  - `ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"*\"]'`\n\n### 操作相关命令\n\n- ipfs add demo.file   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //upload file and the output is hash key\n- ipfs get {hash key}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //download file\n- ipfs add -r  {dir}   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //递归添加，输出包含文件和目录的hash key\n- ipfs get {dir hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //download dir and file\n- ipfs get {not exist hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //一直blocked\n- 目录操作\n  - ipfs files  mkdir  /demo         //只能是一级一级创建，不能多级创建\n  - ipfs files cp /ipfs/QmXXX   /demo/file.txt\n  - ipfs filess ls /    ;  ipfs files ls /demo\n  - ipfs files read /demo/file.txt\n\n#### 增加目录\n\n- ipfs add  -r demo\n\n\t\tadded QmZoApUnALi4oRJpGGZhgDi8cp3x65EA668nnJMrqEonPg demo/demo2.txt\n\tadded QmWMgtnYhbEuEVRvdejoD8bEuLy5JJisD19WrJYCqQiHeP demo/ipget\n\tadded QmefA8mR2ed2mTfaqtm7RbNAY2nMDpKkBUtKmg61kcq617 demo\n\n-  ipfs cat  QmefA8mR2ed2mTfaqtm7RbNAY2nMDpKkBUtKmg61kcq617/demo2.txt\n\n#### Pin （是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）\n\n&nbsp;&nbsp;IPFS的Pin是将文件长期保留在本地，不被垃圾回收；\n\n- ipfs pin ls  //查看哪些文件在本地是持久化的，通过 add 添加的文件默认就是 pin 过的\n\n### IPFS存储文件时，会经历以下几个步骤：\n\n-  把单个文件拆分成若干个256KB大小的块（ block，这个就可以理解成扇区 ）；\n- 逐块(block)计算block hash，hashn = hash ( blockn )；\n- 把所有的block hash拼凑成一个数组，再计算一次hash，便得到了文件最终的hash，hash ( file ) = hash ( hash1……n )，并将这个 hash（file） 和block hash数组“捆绑”起来，组成一个对象，把这个对象当做一个索引结构；\n- 把block、索引结构全部上传给IPFS节点，文件便同步到了IPFS网络了；\n-  把 Hash（file）打印出来，读的时候用；\n\n### 绑定节点\n\n- ipfs name publish {dir hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //将该目录与ipfs node id进行绑定\n\n### 绑定节点之后，可以通过ipns进行访问\n\n- ipfs cat /ipns/{ipfs node id}/demo.txt &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //demo.txt为dir下文件\n\n### DNS 解析\n\n&nbsp;&nbsp;IPFS 允许用户使用现有的域名系统，这样就能用一个好记的地址来访问文件；\n\n- ipfs cat /ipns/ipfs.b3log.org/hacpai/README.md\n\n只需要在DNS解析加入一条TXT记录即可：\n\nTXT\tipfs\tdnslink=/ipns/{ipfs node id}\n\n### 查看当前ipfs节点连接状态\n\n\tipfs swarm peers\n\n### 查看数据提供方 （这里需要深入研究）\n\n\tipfs dht findprovs <hash>\n\tipfs dht provide   <hash>\n\tipfs bitswap ledger <peer ID>  #对账单\n\n### 查找peer：\n\n\tipfs dht findpeer <node A peerID>\n\n### 手动连接特定节点:\n\n\tipfs swarm connect <multiaddr>\n\n\n### ipfs p2p listener ls\n\n\t[root@SJ-T1-Cloud172 .ipfs]# ipfs p2p listener ls\n\tError: libp2p stream mounting not enabled\n\t需要修改config中Libp2pStreamMounting\n\n### 删除local store file\n\n\tipfs pin rm <hash>\n\tipfs repo gc\n\n\n### 生成hash，但不上传\n\n\techo <data>  | ipfs add -n\n\tipfs add <file> -n\n\n### add分析：\n\n\tipfs add alargefile  //ensure this file is larger than 256k,otherwise has no sub-tree\n\tipfs ls thathash\n\n\tipfs@earth ~> ipfs ls qms2hjwx8qejwm4nmwu7ze6ndam2sfums3x6idwz5myzbn\n\tqmv8ndh7ageh9b24zngaextmuhj7aiuw3scc8hkczvjkww 7866189  //称为block\n\tqmuvjja4s4cgyqyppozttssquvgcv2n2v8mae3gnkrxmol 7866189\n\tqmrgjmlhlddhvxuieveuuwkeci4ygx8z7ujunikzpfzjuk 7866189\n\tqmrolalcquyo5vu5v8bvqmgjcpzow16wukq3s3vrll2tdk 7866189\n\tqmwk51jygpchgwr3srdnmhyerheqd22qw3vvyamb3emhuw 5244129\n\n### 查看block：\n\n\tipfs cat <block hash>  //output to screen\n\tipfs block stat <block hash> //查看block状态，大小等\n\n\tipfs refs <block hash> //打印该block的子块\n\t等价于\n\tipfs object links <block hash> 或 ipfs ls <block hash>\n\n### 查看ipfs对象底层结构：\n\n\tipfs object get <hash>\n\n\n### debug模式运行\n\n\tIPFS_LOGGING=debug ipfs daemon\n\t//eventlog output:\n\tipfs log tail\n\t//or\n\tcurl http://localhost:5001/logs\n\nipfs blog：\n\nhttps://forum.qtum.org/topic/87/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%98%9F%E9%99%85%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E7%BD%91%E7%BB%9C-ipfs-%E6%90%AD%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BE%E6%9C%8D%E5%8A%A1-%E4%B8%80\n\n## IPFS 内部\n\nIPLD（ InterPlanetary Linked Data） 主要用来定义数据， 给数据建模；定义了统一的数据模型IPLD ；\n\n    \"API\": \"/ip4/0.0.0.0/tcp/5001\",\n    \"Gateway\": \"/ip4/0.0.0.0/tcp/8080\"\n\n\n\ndb 删除到某个单词的开始位置\n\ndw 删除到某个单词的结尾位置\n\nD 删除到某一行的结尾\n\nd0 删至行首。\n\nd$ 删至行尾。\n","slug":"ipfs","published":1,"date":"2018-06-21T03:36:44.945Z","updated":"2018-06-21T03:36:44.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjj6hwjph0008liha2p8y7o55","content":"<h3 id=\"ipfs系统相关命令-主要与ipfs在-root-ipfs-的配置相关）\"><a href=\"#ipfs系统相关命令-主要与ipfs在-root-ipfs-的配置相关）\" class=\"headerlink\" title=\"ipfs系统相关命令 (主要与ipfs在/root/.ipfs/的配置相关）\"></a>ipfs系统相关命令 (主要与ipfs在/root/.ipfs/的配置相关）</h3><ul>\n<li>ipfs id</li>\n<li>ipfs 跨域<ul>\n<li><code>ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods &#39;[&quot;PUT&quot;, &quot;GET&quot;, &quot;POST&quot;, &quot;OPTIONS&quot;]&#39;</code></li>\n<li><code>ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin &#39;[&quot;*&quot;]&#39;</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"操作相关命令\"><a href=\"#操作相关命令\" class=\"headerlink\" title=\"操作相关命令\"></a>操作相关命令</h3><ul>\n<li>ipfs add demo.file   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //upload file and the output is hash key</li>\n<li>ipfs get {hash key}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //download file</li>\n<li>ipfs add -r  {dir}   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //递归添加，输出包含文件和目录的hash key</li>\n<li>ipfs get {dir hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //download dir and file</li>\n<li>ipfs get {not exist hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //一直blocked</li>\n<li>目录操作<ul>\n<li>ipfs files  mkdir  /demo         //只能是一级一级创建，不能多级创建</li>\n<li>ipfs files cp /ipfs/QmXXX   /demo/file.txt</li>\n<li>ipfs filess ls /    ;  ipfs files ls /demo</li>\n<li>ipfs files read /demo/file.txt</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"增加目录\"><a href=\"#增加目录\" class=\"headerlink\" title=\"增加目录\"></a>增加目录</h4><ul>\n<li><p>ipfs add  -r demo</p>\n<pre><code>added QmZoApUnALi4oRJpGGZhgDi8cp3x65EA668nnJMrqEonPg demo/demo2.txt\n</code></pre><p>  added QmWMgtnYhbEuEVRvdejoD8bEuLy5JJisD19WrJYCqQiHeP demo/ipget<br>  added QmefA8mR2ed2mTfaqtm7RbNAY2nMDpKkBUtKmg61kcq617 demo</p>\n</li>\n<li><p>ipfs cat  QmefA8mR2ed2mTfaqtm7RbNAY2nMDpKkBUtKmg61kcq617/demo2.txt</p>\n</li>\n</ul>\n<h4 id=\"Pin-（是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）\"><a href=\"#Pin-（是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）\" class=\"headerlink\" title=\"Pin （是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）\"></a>Pin （是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）</h4><p>&nbsp;&nbsp;IPFS的Pin是将文件长期保留在本地，不被垃圾回收；</p>\n<ul>\n<li>ipfs pin ls  //查看哪些文件在本地是持久化的，通过 add 添加的文件默认就是 pin 过的</li>\n</ul>\n<h3 id=\"IPFS存储文件时，会经历以下几个步骤：\"><a href=\"#IPFS存储文件时，会经历以下几个步骤：\" class=\"headerlink\" title=\"IPFS存储文件时，会经历以下几个步骤：\"></a>IPFS存储文件时，会经历以下几个步骤：</h3><ul>\n<li>把单个文件拆分成若干个256KB大小的块（ block，这个就可以理解成扇区 ）；</li>\n<li>逐块(block)计算block hash，hashn = hash ( blockn )；</li>\n<li>把所有的block hash拼凑成一个数组，再计算一次hash，便得到了文件最终的hash，hash ( file ) = hash ( hash1……n )，并将这个 hash（file） 和block hash数组“捆绑”起来，组成一个对象，把这个对象当做一个索引结构；</li>\n<li>把block、索引结构全部上传给IPFS节点，文件便同步到了IPFS网络了；</li>\n<li>把 Hash（file）打印出来，读的时候用；</li>\n</ul>\n<h3 id=\"绑定节点\"><a href=\"#绑定节点\" class=\"headerlink\" title=\"绑定节点\"></a>绑定节点</h3><ul>\n<li>ipfs name publish {dir hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //将该目录与ipfs node id进行绑定</li>\n</ul>\n<h3 id=\"绑定节点之后，可以通过ipns进行访问\"><a href=\"#绑定节点之后，可以通过ipns进行访问\" class=\"headerlink\" title=\"绑定节点之后，可以通过ipns进行访问\"></a>绑定节点之后，可以通过ipns进行访问</h3><ul>\n<li>ipfs cat /ipns/{ipfs node id}/demo.txt &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //demo.txt为dir下文件</li>\n</ul>\n<h3 id=\"DNS-解析\"><a href=\"#DNS-解析\" class=\"headerlink\" title=\"DNS 解析\"></a>DNS 解析</h3><p>&nbsp;&nbsp;IPFS 允许用户使用现有的域名系统，这样就能用一个好记的地址来访问文件；</p>\n<ul>\n<li>ipfs cat /ipns/ipfs.b3log.org/hacpai/README.md</li>\n</ul>\n<p>只需要在DNS解析加入一条TXT记录即可：</p>\n<p>TXT    ipfs    dnslink=/ipns/{ipfs node id}</p>\n<h3 id=\"查看当前ipfs节点连接状态\"><a href=\"#查看当前ipfs节点连接状态\" class=\"headerlink\" title=\"查看当前ipfs节点连接状态\"></a>查看当前ipfs节点连接状态</h3><pre><code>ipfs swarm peers\n</code></pre><h3 id=\"查看数据提供方-（这里需要深入研究）\"><a href=\"#查看数据提供方-（这里需要深入研究）\" class=\"headerlink\" title=\"查看数据提供方 （这里需要深入研究）\"></a>查看数据提供方 （这里需要深入研究）</h3><pre><code>ipfs dht findprovs &lt;hash&gt;\nipfs dht provide   &lt;hash&gt;\nipfs bitswap ledger &lt;peer ID&gt;  #对账单\n</code></pre><h3 id=\"查找peer：\"><a href=\"#查找peer：\" class=\"headerlink\" title=\"查找peer：\"></a>查找peer：</h3><pre><code>ipfs dht findpeer &lt;node A peerID&gt;\n</code></pre><h3 id=\"手动连接特定节点\"><a href=\"#手动连接特定节点\" class=\"headerlink\" title=\"手动连接特定节点:\"></a>手动连接特定节点:</h3><pre><code>ipfs swarm connect &lt;multiaddr&gt;\n</code></pre><h3 id=\"ipfs-p2p-listener-ls\"><a href=\"#ipfs-p2p-listener-ls\" class=\"headerlink\" title=\"ipfs p2p listener ls\"></a>ipfs p2p listener ls</h3><pre><code>[root@SJ-T1-Cloud172 .ipfs]# ipfs p2p listener ls\nError: libp2p stream mounting not enabled\n需要修改config中Libp2pStreamMounting\n</code></pre><h3 id=\"删除local-store-file\"><a href=\"#删除local-store-file\" class=\"headerlink\" title=\"删除local store file\"></a>删除local store file</h3><pre><code>ipfs pin rm &lt;hash&gt;\nipfs repo gc\n</code></pre><h3 id=\"生成hash，但不上传\"><a href=\"#生成hash，但不上传\" class=\"headerlink\" title=\"生成hash，但不上传\"></a>生成hash，但不上传</h3><pre><code>echo &lt;data&gt;  | ipfs add -n\nipfs add &lt;file&gt; -n\n</code></pre><h3 id=\"add分析：\"><a href=\"#add分析：\" class=\"headerlink\" title=\"add分析：\"></a>add分析：</h3><pre><code>ipfs add alargefile  //ensure this file is larger than 256k,otherwise has no sub-tree\nipfs ls thathash\n\nipfs@earth ~&gt; ipfs ls qms2hjwx8qejwm4nmwu7ze6ndam2sfums3x6idwz5myzbn\nqmv8ndh7ageh9b24zngaextmuhj7aiuw3scc8hkczvjkww 7866189  //称为block\nqmuvjja4s4cgyqyppozttssquvgcv2n2v8mae3gnkrxmol 7866189\nqmrgjmlhlddhvxuieveuuwkeci4ygx8z7ujunikzpfzjuk 7866189\nqmrolalcquyo5vu5v8bvqmgjcpzow16wukq3s3vrll2tdk 7866189\nqmwk51jygpchgwr3srdnmhyerheqd22qw3vvyamb3emhuw 5244129\n</code></pre><h3 id=\"查看block：\"><a href=\"#查看block：\" class=\"headerlink\" title=\"查看block：\"></a>查看block：</h3><pre><code>ipfs cat &lt;block hash&gt;  //output to screen\nipfs block stat &lt;block hash&gt; //查看block状态，大小等\n\nipfs refs &lt;block hash&gt; //打印该block的子块\n等价于\nipfs object links &lt;block hash&gt; 或 ipfs ls &lt;block hash&gt;\n</code></pre><h3 id=\"查看ipfs对象底层结构：\"><a href=\"#查看ipfs对象底层结构：\" class=\"headerlink\" title=\"查看ipfs对象底层结构：\"></a>查看ipfs对象底层结构：</h3><pre><code>ipfs object get &lt;hash&gt;\n</code></pre><h3 id=\"debug模式运行\"><a href=\"#debug模式运行\" class=\"headerlink\" title=\"debug模式运行\"></a>debug模式运行</h3><pre><code>IPFS_LOGGING=debug ipfs daemon\n//eventlog output:\nipfs log tail\n//or\ncurl http://localhost:5001/logs\n</code></pre><p>ipfs blog：</p>\n<p><a href=\"https://forum.qtum.org/topic/87/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%98%9F%E9%99%85%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E7%BD%91%E7%BB%9C-ipfs-%E6%90%AD%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BE%E6%9C%8D%E5%8A%A1-%E4%B8%80\" target=\"_blank\" rel=\"noopener\">https://forum.qtum.org/topic/87/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%98%9F%E9%99%85%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E7%BD%91%E7%BB%9C-ipfs-%E6%90%AD%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BE%E6%9C%8D%E5%8A%A1-%E4%B8%80</a></p>\n<h2 id=\"IPFS-内部\"><a href=\"#IPFS-内部\" class=\"headerlink\" title=\"IPFS 内部\"></a>IPFS 内部</h2><p>IPLD（ InterPlanetary Linked Data） 主要用来定义数据， 给数据建模；定义了统一的数据模型IPLD ；</p>\n<pre><code>&quot;API&quot;: &quot;/ip4/0.0.0.0/tcp/5001&quot;,\n&quot;Gateway&quot;: &quot;/ip4/0.0.0.0/tcp/8080&quot;\n</code></pre><p>db 删除到某个单词的开始位置</p>\n<p>dw 删除到某个单词的结尾位置</p>\n<p>D 删除到某一行的结尾</p>\n<p>d0 删至行首。</p>\n<p>d$ 删至行尾。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ipfs系统相关命令-主要与ipfs在-root-ipfs-的配置相关）\"><a href=\"#ipfs系统相关命令-主要与ipfs在-root-ipfs-的配置相关）\" class=\"headerlink\" title=\"ipfs系统相关命令 (主要与ipfs在/root/.ipfs/的配置相关）\"></a>ipfs系统相关命令 (主要与ipfs在/root/.ipfs/的配置相关）</h3><ul>\n<li>ipfs id</li>\n<li>ipfs 跨域<ul>\n<li><code>ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods &#39;[&quot;PUT&quot;, &quot;GET&quot;, &quot;POST&quot;, &quot;OPTIONS&quot;]&#39;</code></li>\n<li><code>ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin &#39;[&quot;*&quot;]&#39;</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"操作相关命令\"><a href=\"#操作相关命令\" class=\"headerlink\" title=\"操作相关命令\"></a>操作相关命令</h3><ul>\n<li>ipfs add demo.file   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //upload file and the output is hash key</li>\n<li>ipfs get {hash key}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //download file</li>\n<li>ipfs add -r  {dir}   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //递归添加，输出包含文件和目录的hash key</li>\n<li>ipfs get {dir hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //download dir and file</li>\n<li>ipfs get {not exist hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //一直blocked</li>\n<li>目录操作<ul>\n<li>ipfs files  mkdir  /demo         //只能是一级一级创建，不能多级创建</li>\n<li>ipfs files cp /ipfs/QmXXX   /demo/file.txt</li>\n<li>ipfs filess ls /    ;  ipfs files ls /demo</li>\n<li>ipfs files read /demo/file.txt</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"增加目录\"><a href=\"#增加目录\" class=\"headerlink\" title=\"增加目录\"></a>增加目录</h4><ul>\n<li><p>ipfs add  -r demo</p>\n<pre><code>added QmZoApUnALi4oRJpGGZhgDi8cp3x65EA668nnJMrqEonPg demo/demo2.txt\n</code></pre><p>  added QmWMgtnYhbEuEVRvdejoD8bEuLy5JJisD19WrJYCqQiHeP demo/ipget<br>  added QmefA8mR2ed2mTfaqtm7RbNAY2nMDpKkBUtKmg61kcq617 demo</p>\n</li>\n<li><p>ipfs cat  QmefA8mR2ed2mTfaqtm7RbNAY2nMDpKkBUtKmg61kcq617/demo2.txt</p>\n</li>\n</ul>\n<h4 id=\"Pin-（是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）\"><a href=\"#Pin-（是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）\" class=\"headerlink\" title=\"Pin （是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）\"></a>Pin （是否缓存内容在本地，缓存到本地的内容不仅可以自己使用，还能为其他节点提供资源）</h4><p>&nbsp;&nbsp;IPFS的Pin是将文件长期保留在本地，不被垃圾回收；</p>\n<ul>\n<li>ipfs pin ls  //查看哪些文件在本地是持久化的，通过 add 添加的文件默认就是 pin 过的</li>\n</ul>\n<h3 id=\"IPFS存储文件时，会经历以下几个步骤：\"><a href=\"#IPFS存储文件时，会经历以下几个步骤：\" class=\"headerlink\" title=\"IPFS存储文件时，会经历以下几个步骤：\"></a>IPFS存储文件时，会经历以下几个步骤：</h3><ul>\n<li>把单个文件拆分成若干个256KB大小的块（ block，这个就可以理解成扇区 ）；</li>\n<li>逐块(block)计算block hash，hashn = hash ( blockn )；</li>\n<li>把所有的block hash拼凑成一个数组，再计算一次hash，便得到了文件最终的hash，hash ( file ) = hash ( hash1……n )，并将这个 hash（file） 和block hash数组“捆绑”起来，组成一个对象，把这个对象当做一个索引结构；</li>\n<li>把block、索引结构全部上传给IPFS节点，文件便同步到了IPFS网络了；</li>\n<li>把 Hash（file）打印出来，读的时候用；</li>\n</ul>\n<h3 id=\"绑定节点\"><a href=\"#绑定节点\" class=\"headerlink\" title=\"绑定节点\"></a>绑定节点</h3><ul>\n<li>ipfs name publish {dir hash key} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   //将该目录与ipfs node id进行绑定</li>\n</ul>\n<h3 id=\"绑定节点之后，可以通过ipns进行访问\"><a href=\"#绑定节点之后，可以通过ipns进行访问\" class=\"headerlink\" title=\"绑定节点之后，可以通过ipns进行访问\"></a>绑定节点之后，可以通过ipns进行访问</h3><ul>\n<li>ipfs cat /ipns/{ipfs node id}/demo.txt &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  //demo.txt为dir下文件</li>\n</ul>\n<h3 id=\"DNS-解析\"><a href=\"#DNS-解析\" class=\"headerlink\" title=\"DNS 解析\"></a>DNS 解析</h3><p>&nbsp;&nbsp;IPFS 允许用户使用现有的域名系统，这样就能用一个好记的地址来访问文件；</p>\n<ul>\n<li>ipfs cat /ipns/ipfs.b3log.org/hacpai/README.md</li>\n</ul>\n<p>只需要在DNS解析加入一条TXT记录即可：</p>\n<p>TXT    ipfs    dnslink=/ipns/{ipfs node id}</p>\n<h3 id=\"查看当前ipfs节点连接状态\"><a href=\"#查看当前ipfs节点连接状态\" class=\"headerlink\" title=\"查看当前ipfs节点连接状态\"></a>查看当前ipfs节点连接状态</h3><pre><code>ipfs swarm peers\n</code></pre><h3 id=\"查看数据提供方-（这里需要深入研究）\"><a href=\"#查看数据提供方-（这里需要深入研究）\" class=\"headerlink\" title=\"查看数据提供方 （这里需要深入研究）\"></a>查看数据提供方 （这里需要深入研究）</h3><pre><code>ipfs dht findprovs &lt;hash&gt;\nipfs dht provide   &lt;hash&gt;\nipfs bitswap ledger &lt;peer ID&gt;  #对账单\n</code></pre><h3 id=\"查找peer：\"><a href=\"#查找peer：\" class=\"headerlink\" title=\"查找peer：\"></a>查找peer：</h3><pre><code>ipfs dht findpeer &lt;node A peerID&gt;\n</code></pre><h3 id=\"手动连接特定节点\"><a href=\"#手动连接特定节点\" class=\"headerlink\" title=\"手动连接特定节点:\"></a>手动连接特定节点:</h3><pre><code>ipfs swarm connect &lt;multiaddr&gt;\n</code></pre><h3 id=\"ipfs-p2p-listener-ls\"><a href=\"#ipfs-p2p-listener-ls\" class=\"headerlink\" title=\"ipfs p2p listener ls\"></a>ipfs p2p listener ls</h3><pre><code>[root@SJ-T1-Cloud172 .ipfs]# ipfs p2p listener ls\nError: libp2p stream mounting not enabled\n需要修改config中Libp2pStreamMounting\n</code></pre><h3 id=\"删除local-store-file\"><a href=\"#删除local-store-file\" class=\"headerlink\" title=\"删除local store file\"></a>删除local store file</h3><pre><code>ipfs pin rm &lt;hash&gt;\nipfs repo gc\n</code></pre><h3 id=\"生成hash，但不上传\"><a href=\"#生成hash，但不上传\" class=\"headerlink\" title=\"生成hash，但不上传\"></a>生成hash，但不上传</h3><pre><code>echo &lt;data&gt;  | ipfs add -n\nipfs add &lt;file&gt; -n\n</code></pre><h3 id=\"add分析：\"><a href=\"#add分析：\" class=\"headerlink\" title=\"add分析：\"></a>add分析：</h3><pre><code>ipfs add alargefile  //ensure this file is larger than 256k,otherwise has no sub-tree\nipfs ls thathash\n\nipfs@earth ~&gt; ipfs ls qms2hjwx8qejwm4nmwu7ze6ndam2sfums3x6idwz5myzbn\nqmv8ndh7ageh9b24zngaextmuhj7aiuw3scc8hkczvjkww 7866189  //称为block\nqmuvjja4s4cgyqyppozttssquvgcv2n2v8mae3gnkrxmol 7866189\nqmrgjmlhlddhvxuieveuuwkeci4ygx8z7ujunikzpfzjuk 7866189\nqmrolalcquyo5vu5v8bvqmgjcpzow16wukq3s3vrll2tdk 7866189\nqmwk51jygpchgwr3srdnmhyerheqd22qw3vvyamb3emhuw 5244129\n</code></pre><h3 id=\"查看block：\"><a href=\"#查看block：\" class=\"headerlink\" title=\"查看block：\"></a>查看block：</h3><pre><code>ipfs cat &lt;block hash&gt;  //output to screen\nipfs block stat &lt;block hash&gt; //查看block状态，大小等\n\nipfs refs &lt;block hash&gt; //打印该block的子块\n等价于\nipfs object links &lt;block hash&gt; 或 ipfs ls &lt;block hash&gt;\n</code></pre><h3 id=\"查看ipfs对象底层结构：\"><a href=\"#查看ipfs对象底层结构：\" class=\"headerlink\" title=\"查看ipfs对象底层结构：\"></a>查看ipfs对象底层结构：</h3><pre><code>ipfs object get &lt;hash&gt;\n</code></pre><h3 id=\"debug模式运行\"><a href=\"#debug模式运行\" class=\"headerlink\" title=\"debug模式运行\"></a>debug模式运行</h3><pre><code>IPFS_LOGGING=debug ipfs daemon\n//eventlog output:\nipfs log tail\n//or\ncurl http://localhost:5001/logs\n</code></pre><p>ipfs blog：</p>\n<p><a href=\"https://forum.qtum.org/topic/87/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%98%9F%E9%99%85%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E7%BD%91%E7%BB%9C-ipfs-%E6%90%AD%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BE%E6%9C%8D%E5%8A%A1-%E4%B8%80\" target=\"_blank\" rel=\"noopener\">https://forum.qtum.org/topic/87/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%98%9F%E9%99%85%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E7%BD%91%E7%BB%9C-ipfs-%E6%90%AD%E5%BB%BA%E5%8C%BA%E5%9D%97%E9%93%BE%E6%9C%8D%E5%8A%A1-%E4%B8%80</a></p>\n<h2 id=\"IPFS-内部\"><a href=\"#IPFS-内部\" class=\"headerlink\" title=\"IPFS 内部\"></a>IPFS 内部</h2><p>IPLD（ InterPlanetary Linked Data） 主要用来定义数据， 给数据建模；定义了统一的数据模型IPLD ；</p>\n<pre><code>&quot;API&quot;: &quot;/ip4/0.0.0.0/tcp/5001&quot;,\n&quot;Gateway&quot;: &quot;/ip4/0.0.0.0/tcp/8080&quot;\n</code></pre><p>db 删除到某个单词的开始位置</p>\n<p>dw 删除到某个单词的结尾位置</p>\n<p>D 删除到某一行的结尾</p>\n<p>d0 删至行首。</p>\n<p>d$ 删至行尾。</p>\n"},{"title":"solidity入门之一","_content":"\n### 概述\nsolidity 编译的方式生产evm字节,广泛用于投票、众筹，封闭，拍卖，多重签名钱包等合约中；\n\n- 外部帐户地址是由公钥决定的;\n- 合约帐户：被存储在帐户中的代码控制，在创建合约时候确定的；（这个地址由合约创建者的地址和该地址发出过的交易数量计算得到，地址发出过的交易数量也被称作为\"nonce\"）\n\n合约帐户存储了合约代码，而外部帐户则没有\n\n### 合约的结构\n- 状态变量： 在合约存储器中永久存储的值；\n- 函数： 合约中可执行单元的代码；\n- 函数修饰符： 在声明的方式中补充函数的语义；\n- 事件： 和EVM日志设施的接口\n- 结构体：一组用户定义的变量\n- 枚举： 创建一个特定值的集合的类型；\n\n\n### 特殊的数据类型\n\n- int/uint：是有符号和无符号的整数；\n- int/uint: 分别是int256 和uint256 的别名；\n\n- 地址address：\n\n  1、地址属性：balance 和 发送（send）<br/>\n  若查询到有资产余额的地址，然后发送 Ether（以wei为单位）到send函数的地址上\n```solidity\n  address x = 0x123；\n  x.send(10)\n```\n  2、call 和 callcode（调用和调用码）<br/>\n  call和callcode是非常低级的函数，它可以作为打破Solidity的类型安全的最后手段。\n```\n  address nameReg = 0x123;\n  nameReg.call(\"register\", \"MyName\");\n  nameReg.call(bytes4(sha3(\"fun(uint256)\")), a)\n```\n  函数调用返回了一个布尔值，表示函数是否正常调用结束或EVM异常（false）\n  callcode：只使用给定地址的编码\n\n- bytes1, bytes2, bytes3, ..., bytes32; byte 是bytes1的别名\n\n- 枚举：\n```\n  enum Choices{GoLeft, GORight, GoStraight, SitStill}\n  Choices constant defaultChoice = Choices.GoStraight;\n```\n\n- 字符串常量\n\n  字符串常量可以隐式换成bytes\n\n- 引用类型\n\n  复杂类型，例如类型并不总是256为，因为拷贝他们相当消耗存储和时间，我们必须考虑把它们存储在内存或者存储器（状态变量存放的地方）\n\n- 数据位置：\n  - 内存\n  - 存储器\n  - calldata： 一个无法改变的，非持久的 存储函数参数的地方\n  - 每一个复杂类型,即数组和结构体,有一个额外的注解,“数据位置”,不管它是存储在内存中，还是存储在存储器上。根据上下文,总是有一个默认的,但它可以通过附加存储或内存覆盖类型。函数参数的默认值(包括返回参数)是在内存上,局部变量的默认存储位置是在存储器上。存储器上存有状态变量(很明显)。\n  - 赋值过程：\n    - 在存储和内存以及状态变量之间赋值总需要创建一个独立的副本；赋值只分配一个本地存储变量引用，这总是指向状态变量的引用，后者同时改变，\n    -  从一个内存存储引用类型，赋值到另一个内存存储引用类型，并不创建一个副本；\n\n- 数组：\n  - 数组可以长度固定，也可以动态（类似切片）\n  - 存储器数组，成员类型是任意的（映射，结构体)\n  - 内存数组， 成员类型不能是映射\n  - bytes 和 string是特殊类型的数组， bytes byte[], string  bytes\n\n\n- 函数可见性和访问限制：\n  - external: 外部函数是合约接口的一部分，可能从其他合约调用；也通过食物调用；不能在被内部调用（即f()不执行，但是this.f()执行）\n  - public: default\n  - internal： 只能在内部访问（当前合约或它派生的合约），而不使用(关键字) this\n  - private： 私有函数和状态变量仅仅在定义该合约中可见，在派生的合约中不可见；\n\n- interface\n  -接口内没有任何函数是已实现的，并限制如下：\n  - 不能继承其他合约，或接口\n  - 不能定义构造器\n  - 不能定义变量、结构体、枚举等\n\n```\n  interface Token{\n    function transfer(address recipient, uint amount);\n  }\n```\n\n继承：\n\n```\n  contract owned{\n    address public owner;\n    function owned(){\n      owner = msg.sender;\n    }\n  }\n\n  contract base1{\n      addresss public owner2;\n      function base1(){\n        owner2 = msg.sender;\n      }\n  }\n\n // is 关键字\n  contract mortal is owned{\n\n    function kill(){\n      if(msg.sender == owner)\n        selfdestruct(owner);\n    }\n  }\n\n //继承顺序，从“最基本”到“最近派生”\n  contract Final is owned, base1{\n\n  }\n\n```\n优秀solidity文章：\nhttps://steemit.com/cn/@speeding/smart-contract-development8\n建议熟读Solidity全局变量、全局函数，要抄代码，首先去OpenZeppelin，然后是Consensys的项目里去抄，有现成的 ERC20、ERC721合约模版和mock，\n\n\nthis在合约中表示当前合约地址；\n\npayable 标识的函数：【重点】\n\n- 函数上增加payable标识，即可接收ether，并会把ether存在当前合约地址\n\n```\n   contract Pay{\n     //存入一些ether到合约帐户中\n     function deposit() payable{\n     }\n\n     //查询当前的余额\n     function getBalance() constant returns(uint){\n       return this.balance;\n     }\n   }\n```\n\n合约要接收通过send()函数发送的ether，有如下限制：\n\n- 必须定义fallback函数，否则抛异常\n- fallback函数必须增加payable关键字，否则send()执行结果始终未false；\n\n```\n  pragma solidity ^0.4.0;\n  contract SendAndReceiveBycontract{\n    //fallback函数对应记录事件\n    event fallbackTrigged(bytes data);\n\n    //合约接收send()的ether时，必须存在\n    function() payable{fallbackTrigged(msg.data);}\n  }\n\n  function deposit () payable{\n  }\n\n  function getBalance() constant returns (uint){\n    return this.balance;\n  }\n  event SendEvent(address to, uint value, bool result);\n\n  //使用send()发送ether\n  function sendEther(){\n    // this.send(msg.value) : 向当前合约转账；\n    bool result = this.send(1);\n    SendEvent(this, 1, result);\n  }\n```\n代\n\n```\n  modifier notThis(address _address){\n    require(_address != address(this))\n    _;\n  }\n```\n```go\n  type Account struct{\n    Address common.Address `json:\"address\"`\n    URL URL                `json:\"url\"`\n  }\n\n  const (\n    HashLength = 32 //32 bytes [256bit]\n    AddressLength = 20 // 20 bytes\n  )\n\n  type URL struct{\n    Scheme string\n    Path   string\n  }\n\n  type Address [AddressLength]byte  //20 bytes\n\n  type Wallet interface{\n    URL() URL\n    Status() (string, error)\n    ...\n  }\n\n  type KeyStore struct{\n    storage keyStore\n    cache *accountCache\n    changes chan struct{}\n    unlocked map[common.Address]*unlocked\n\n    ....\n\n  }\n  4.576b shard 528: soid 62df576b/rbd_data.742c2250945ff8.0000000000009896/118//4 size 0 != known size 8388608\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- xx\n","source":"_posts/solidity_01.md","raw":"---\n  title: solidity入门之一\n---\n\n### 概述\nsolidity 编译的方式生产evm字节,广泛用于投票、众筹，封闭，拍卖，多重签名钱包等合约中；\n\n- 外部帐户地址是由公钥决定的;\n- 合约帐户：被存储在帐户中的代码控制，在创建合约时候确定的；（这个地址由合约创建者的地址和该地址发出过的交易数量计算得到，地址发出过的交易数量也被称作为\"nonce\"）\n\n合约帐户存储了合约代码，而外部帐户则没有\n\n### 合约的结构\n- 状态变量： 在合约存储器中永久存储的值；\n- 函数： 合约中可执行单元的代码；\n- 函数修饰符： 在声明的方式中补充函数的语义；\n- 事件： 和EVM日志设施的接口\n- 结构体：一组用户定义的变量\n- 枚举： 创建一个特定值的集合的类型；\n\n\n### 特殊的数据类型\n\n- int/uint：是有符号和无符号的整数；\n- int/uint: 分别是int256 和uint256 的别名；\n\n- 地址address：\n\n  1、地址属性：balance 和 发送（send）<br/>\n  若查询到有资产余额的地址，然后发送 Ether（以wei为单位）到send函数的地址上\n```solidity\n  address x = 0x123；\n  x.send(10)\n```\n  2、call 和 callcode（调用和调用码）<br/>\n  call和callcode是非常低级的函数，它可以作为打破Solidity的类型安全的最后手段。\n```\n  address nameReg = 0x123;\n  nameReg.call(\"register\", \"MyName\");\n  nameReg.call(bytes4(sha3(\"fun(uint256)\")), a)\n```\n  函数调用返回了一个布尔值，表示函数是否正常调用结束或EVM异常（false）\n  callcode：只使用给定地址的编码\n\n- bytes1, bytes2, bytes3, ..., bytes32; byte 是bytes1的别名\n\n- 枚举：\n```\n  enum Choices{GoLeft, GORight, GoStraight, SitStill}\n  Choices constant defaultChoice = Choices.GoStraight;\n```\n\n- 字符串常量\n\n  字符串常量可以隐式换成bytes\n\n- 引用类型\n\n  复杂类型，例如类型并不总是256为，因为拷贝他们相当消耗存储和时间，我们必须考虑把它们存储在内存或者存储器（状态变量存放的地方）\n\n- 数据位置：\n  - 内存\n  - 存储器\n  - calldata： 一个无法改变的，非持久的 存储函数参数的地方\n  - 每一个复杂类型,即数组和结构体,有一个额外的注解,“数据位置”,不管它是存储在内存中，还是存储在存储器上。根据上下文,总是有一个默认的,但它可以通过附加存储或内存覆盖类型。函数参数的默认值(包括返回参数)是在内存上,局部变量的默认存储位置是在存储器上。存储器上存有状态变量(很明显)。\n  - 赋值过程：\n    - 在存储和内存以及状态变量之间赋值总需要创建一个独立的副本；赋值只分配一个本地存储变量引用，这总是指向状态变量的引用，后者同时改变，\n    -  从一个内存存储引用类型，赋值到另一个内存存储引用类型，并不创建一个副本；\n\n- 数组：\n  - 数组可以长度固定，也可以动态（类似切片）\n  - 存储器数组，成员类型是任意的（映射，结构体)\n  - 内存数组， 成员类型不能是映射\n  - bytes 和 string是特殊类型的数组， bytes byte[], string  bytes\n\n\n- 函数可见性和访问限制：\n  - external: 外部函数是合约接口的一部分，可能从其他合约调用；也通过食物调用；不能在被内部调用（即f()不执行，但是this.f()执行）\n  - public: default\n  - internal： 只能在内部访问（当前合约或它派生的合约），而不使用(关键字) this\n  - private： 私有函数和状态变量仅仅在定义该合约中可见，在派生的合约中不可见；\n\n- interface\n  -接口内没有任何函数是已实现的，并限制如下：\n  - 不能继承其他合约，或接口\n  - 不能定义构造器\n  - 不能定义变量、结构体、枚举等\n\n```\n  interface Token{\n    function transfer(address recipient, uint amount);\n  }\n```\n\n继承：\n\n```\n  contract owned{\n    address public owner;\n    function owned(){\n      owner = msg.sender;\n    }\n  }\n\n  contract base1{\n      addresss public owner2;\n      function base1(){\n        owner2 = msg.sender;\n      }\n  }\n\n // is 关键字\n  contract mortal is owned{\n\n    function kill(){\n      if(msg.sender == owner)\n        selfdestruct(owner);\n    }\n  }\n\n //继承顺序，从“最基本”到“最近派生”\n  contract Final is owned, base1{\n\n  }\n\n```\n优秀solidity文章：\nhttps://steemit.com/cn/@speeding/smart-contract-development8\n建议熟读Solidity全局变量、全局函数，要抄代码，首先去OpenZeppelin，然后是Consensys的项目里去抄，有现成的 ERC20、ERC721合约模版和mock，\n\n\nthis在合约中表示当前合约地址；\n\npayable 标识的函数：【重点】\n\n- 函数上增加payable标识，即可接收ether，并会把ether存在当前合约地址\n\n```\n   contract Pay{\n     //存入一些ether到合约帐户中\n     function deposit() payable{\n     }\n\n     //查询当前的余额\n     function getBalance() constant returns(uint){\n       return this.balance;\n     }\n   }\n```\n\n合约要接收通过send()函数发送的ether，有如下限制：\n\n- 必须定义fallback函数，否则抛异常\n- fallback函数必须增加payable关键字，否则send()执行结果始终未false；\n\n```\n  pragma solidity ^0.4.0;\n  contract SendAndReceiveBycontract{\n    //fallback函数对应记录事件\n    event fallbackTrigged(bytes data);\n\n    //合约接收send()的ether时，必须存在\n    function() payable{fallbackTrigged(msg.data);}\n  }\n\n  function deposit () payable{\n  }\n\n  function getBalance() constant returns (uint){\n    return this.balance;\n  }\n  event SendEvent(address to, uint value, bool result);\n\n  //使用send()发送ether\n  function sendEther(){\n    // this.send(msg.value) : 向当前合约转账；\n    bool result = this.send(1);\n    SendEvent(this, 1, result);\n  }\n```\n代\n\n```\n  modifier notThis(address _address){\n    require(_address != address(this))\n    _;\n  }\n```\n```go\n  type Account struct{\n    Address common.Address `json:\"address\"`\n    URL URL                `json:\"url\"`\n  }\n\n  const (\n    HashLength = 32 //32 bytes [256bit]\n    AddressLength = 20 // 20 bytes\n  )\n\n  type URL struct{\n    Scheme string\n    Path   string\n  }\n\n  type Address [AddressLength]byte  //20 bytes\n\n  type Wallet interface{\n    URL() URL\n    Status() (string, error)\n    ...\n  }\n\n  type KeyStore struct{\n    storage keyStore\n    cache *accountCache\n    changes chan struct{}\n    unlocked map[common.Address]*unlocked\n\n    ....\n\n  }\n  4.576b shard 528: soid 62df576b/rbd_data.742c2250945ff8.0000000000009896/118//4 size 0 != known size 8388608\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n- xx\n","slug":"solidity_01","published":1,"date":"2018-07-04T02:28:57.997Z","updated":"2018-07-04T02:28:57.996Z","_id":"cjj6hwjpr0009lihaihbrkz64","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>solidity 编译的方式生产evm字节,广泛用于投票、众筹，封闭，拍卖，多重签名钱包等合约中；</p>\n<ul>\n<li>外部帐户地址是由公钥决定的;</li>\n<li>合约帐户：被存储在帐户中的代码控制，在创建合约时候确定的；（这个地址由合约创建者的地址和该地址发出过的交易数量计算得到，地址发出过的交易数量也被称作为”nonce”）</li>\n</ul>\n<p>合约帐户存储了合约代码，而外部帐户则没有</p>\n<h3 id=\"合约的结构\"><a href=\"#合约的结构\" class=\"headerlink\" title=\"合约的结构\"></a>合约的结构</h3><ul>\n<li>状态变量： 在合约存储器中永久存储的值；</li>\n<li>函数： 合约中可执行单元的代码；</li>\n<li>函数修饰符： 在声明的方式中补充函数的语义；</li>\n<li>事件： 和EVM日志设施的接口</li>\n<li>结构体：一组用户定义的变量</li>\n<li>枚举： 创建一个特定值的集合的类型；</li>\n</ul>\n<h3 id=\"特殊的数据类型\"><a href=\"#特殊的数据类型\" class=\"headerlink\" title=\"特殊的数据类型\"></a>特殊的数据类型</h3><ul>\n<li>int/uint：是有符号和无符号的整数；</li>\n<li><p>int/uint: 分别是int256 和uint256 的别名；</p>\n</li>\n<li><p>地址address：</p>\n<p>1、地址属性：balance 和 发送（send）<br><br>若查询到有资产余额的地址，然后发送 Ether（以wei为单位）到send函数的地址上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">address x = 0x123；</span><br><span class=\"line\">x.send(10)</span><br></pre></td></tr></table></figure>\n<p>2、call 和 callcode（调用和调用码）<br><br>call和callcode是非常低级的函数，它可以作为打破Solidity的类型安全的最后手段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">address nameReg = 0x123;</span><br><span class=\"line\">nameReg.call(&quot;register&quot;, &quot;MyName&quot;);</span><br><span class=\"line\">nameReg.call(bytes4(sha3(&quot;fun(uint256)&quot;)), a)</span><br></pre></td></tr></table></figure>\n<p>函数调用返回了一个布尔值，表示函数是否正常调用结束或EVM异常（false）<br>callcode：只使用给定地址的编码</p>\n</li>\n<li><p>bytes1, bytes2, bytes3, …, bytes32; byte 是bytes1的别名</p>\n</li>\n<li><p>枚举：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Choices&#123;GoLeft, GORight, GoStraight, SitStill&#125;</span><br><span class=\"line\">Choices constant defaultChoice = Choices.GoStraight;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串常量</p>\n<p>字符串常量可以隐式换成bytes</p>\n</li>\n<li><p>引用类型</p>\n<p>复杂类型，例如类型并不总是256为，因为拷贝他们相当消耗存储和时间，我们必须考虑把它们存储在内存或者存储器（状态变量存放的地方）</p>\n</li>\n<li><p>数据位置：</p>\n<ul>\n<li>内存</li>\n<li>存储器</li>\n<li>calldata： 一个无法改变的，非持久的 存储函数参数的地方</li>\n<li>每一个复杂类型,即数组和结构体,有一个额外的注解,“数据位置”,不管它是存储在内存中，还是存储在存储器上。根据上下文,总是有一个默认的,但它可以通过附加存储或内存覆盖类型。函数参数的默认值(包括返回参数)是在内存上,局部变量的默认存储位置是在存储器上。存储器上存有状态变量(很明显)。</li>\n<li>赋值过程：<ul>\n<li>在存储和内存以及状态变量之间赋值总需要创建一个独立的副本；赋值只分配一个本地存储变量引用，这总是指向状态变量的引用，后者同时改变，</li>\n<li>从一个内存存储引用类型，赋值到另一个内存存储引用类型，并不创建一个副本；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>数组：</p>\n<ul>\n<li>数组可以长度固定，也可以动态（类似切片）</li>\n<li>存储器数组，成员类型是任意的（映射，结构体)</li>\n<li>内存数组， 成员类型不能是映射</li>\n<li>bytes 和 string是特殊类型的数组， bytes byte[], string  bytes</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>函数可见性和访问限制：</p>\n<ul>\n<li>external: 外部函数是合约接口的一部分，可能从其他合约调用；也通过食物调用；不能在被内部调用（即f()不执行，但是this.f()执行）</li>\n<li>public: default</li>\n<li>internal： 只能在内部访问（当前合约或它派生的合约），而不使用(关键字) this</li>\n<li>private： 私有函数和状态变量仅仅在定义该合约中可见，在派生的合约中不可见；</li>\n</ul>\n</li>\n<li><p>interface<br>-接口内没有任何函数是已实现的，并限制如下：</p>\n<ul>\n<li>不能继承其他合约，或接口</li>\n<li>不能定义构造器</li>\n<li>不能定义变量、结构体、枚举等</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Token&#123;</span><br><span class=\"line\">  function transfer(address recipient, uint amount);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继承：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> contract owned&#123;</span><br><span class=\"line\">   address public owner;</span><br><span class=\"line\">   function owned()&#123;</span><br><span class=\"line\">     owner = msg.sender;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> contract base1&#123;</span><br><span class=\"line\">     addresss public owner2;</span><br><span class=\"line\">     function base1()&#123;</span><br><span class=\"line\">       owner2 = msg.sender;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// is 关键字</span><br><span class=\"line\"> contract mortal is owned&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   function kill()&#123;</span><br><span class=\"line\">     if(msg.sender == owner)</span><br><span class=\"line\">       selfdestruct(owner);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//继承顺序，从“最基本”到“最近派生”</span><br><span class=\"line\"> contract Final is owned, base1&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>优秀solidity文章：<br><a href=\"https://steemit.com/cn/@speeding/smart-contract-development8\" target=\"_blank\" rel=\"noopener\">https://steemit.com/cn/@speeding/smart-contract-development8</a><br>建议熟读Solidity全局变量、全局函数，要抄代码，首先去OpenZeppelin，然后是Consensys的项目里去抄，有现成的 ERC20、ERC721合约模版和mock，</p>\n<p>this在合约中表示当前合约地址；</p>\n<p>payable 标识的函数：【重点】</p>\n<ul>\n<li>函数上增加payable标识，即可接收ether，并会把ether存在当前合约地址</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract Pay&#123;</span><br><span class=\"line\">  //存入一些ether到合约帐户中</span><br><span class=\"line\">  function deposit() payable&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //查询当前的余额</span><br><span class=\"line\">  function getBalance() constant returns(uint)&#123;</span><br><span class=\"line\">    return this.balance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>合约要接收通过send()函数发送的ether，有如下限制：</p>\n<ul>\n<li>必须定义fallback函数，否则抛异常</li>\n<li>fallback函数必须增加payable关键字，否则send()执行结果始终未false；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\">contract SendAndReceiveBycontract&#123;</span><br><span class=\"line\">  //fallback函数对应记录事件</span><br><span class=\"line\">  event fallbackTrigged(bytes data);</span><br><span class=\"line\"></span><br><span class=\"line\">  //合约接收send()的ether时，必须存在</span><br><span class=\"line\">  function() payable&#123;fallbackTrigged(msg.data);&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function deposit () payable&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function getBalance() constant returns (uint)&#123;</span><br><span class=\"line\">  return this.balance;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">event SendEvent(address to, uint value, bool result);</span><br><span class=\"line\"></span><br><span class=\"line\">//使用send()发送ether</span><br><span class=\"line\">function sendEther()&#123;</span><br><span class=\"line\">  // this.send(msg.value) : 向当前合约转账；</span><br><span class=\"line\">  bool result = this.send(1);</span><br><span class=\"line\">  SendEvent(this, 1, result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modifier notThis(address _address)&#123;</span><br><span class=\"line\">  require(_address != address(this))</span><br><span class=\"line\">  _;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Account <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  Address common.Address <span class=\"string\">`json:\"address\"`</span></span><br><span class=\"line\">  URL URL                <span class=\"string\">`json:\"url\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  HashLength = <span class=\"number\">32</span> <span class=\"comment\">//32 bytes [256bit]</span></span><br><span class=\"line\">  AddressLength = <span class=\"number\">20</span> <span class=\"comment\">// 20 bytes</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> URL <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  Scheme <span class=\"keyword\">string</span></span><br><span class=\"line\">  Path   <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Address [AddressLength]<span class=\"keyword\">byte</span>  <span class=\"comment\">//20 bytes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Wallet <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">  URL() URL</span><br><span class=\"line\">  Status() (<span class=\"keyword\">string</span>, error)</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> KeyStore <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  storage keyStore</span><br><span class=\"line\">  cache *accountCache</span><br><span class=\"line\">  changes <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\">  unlocked <span class=\"keyword\">map</span>[common.Address]*unlocked</span><br><span class=\"line\"></span><br><span class=\"line\">  ....</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">4.576</span>b shard <span class=\"number\">528</span>: soid <span class=\"number\">62d</span>f576b/rbd_data<span class=\"number\">.742</span>c2250945ff8<span class=\"number\">.0000000000009896</span>/<span class=\"number\">118</span><span class=\"comment\">//4 size 0 != known size 8388608</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>xx</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>solidity 编译的方式生产evm字节,广泛用于投票、众筹，封闭，拍卖，多重签名钱包等合约中；</p>\n<ul>\n<li>外部帐户地址是由公钥决定的;</li>\n<li>合约帐户：被存储在帐户中的代码控制，在创建合约时候确定的；（这个地址由合约创建者的地址和该地址发出过的交易数量计算得到，地址发出过的交易数量也被称作为”nonce”）</li>\n</ul>\n<p>合约帐户存储了合约代码，而外部帐户则没有</p>\n<h3 id=\"合约的结构\"><a href=\"#合约的结构\" class=\"headerlink\" title=\"合约的结构\"></a>合约的结构</h3><ul>\n<li>状态变量： 在合约存储器中永久存储的值；</li>\n<li>函数： 合约中可执行单元的代码；</li>\n<li>函数修饰符： 在声明的方式中补充函数的语义；</li>\n<li>事件： 和EVM日志设施的接口</li>\n<li>结构体：一组用户定义的变量</li>\n<li>枚举： 创建一个特定值的集合的类型；</li>\n</ul>\n<h3 id=\"特殊的数据类型\"><a href=\"#特殊的数据类型\" class=\"headerlink\" title=\"特殊的数据类型\"></a>特殊的数据类型</h3><ul>\n<li>int/uint：是有符号和无符号的整数；</li>\n<li><p>int/uint: 分别是int256 和uint256 的别名；</p>\n</li>\n<li><p>地址address：</p>\n<p>1、地址属性：balance 和 发送（send）<br><br>若查询到有资产余额的地址，然后发送 Ether（以wei为单位）到send函数的地址上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">address x = 0x123；</span><br><span class=\"line\">x.send(10)</span><br></pre></td></tr></table></figure>\n<p>2、call 和 callcode（调用和调用码）<br><br>call和callcode是非常低级的函数，它可以作为打破Solidity的类型安全的最后手段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">address nameReg = 0x123;</span><br><span class=\"line\">nameReg.call(&quot;register&quot;, &quot;MyName&quot;);</span><br><span class=\"line\">nameReg.call(bytes4(sha3(&quot;fun(uint256)&quot;)), a)</span><br></pre></td></tr></table></figure>\n<p>函数调用返回了一个布尔值，表示函数是否正常调用结束或EVM异常（false）<br>callcode：只使用给定地址的编码</p>\n</li>\n<li><p>bytes1, bytes2, bytes3, …, bytes32; byte 是bytes1的别名</p>\n</li>\n<li><p>枚举：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum Choices&#123;GoLeft, GORight, GoStraight, SitStill&#125;</span><br><span class=\"line\">Choices constant defaultChoice = Choices.GoStraight;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>字符串常量</p>\n<p>字符串常量可以隐式换成bytes</p>\n</li>\n<li><p>引用类型</p>\n<p>复杂类型，例如类型并不总是256为，因为拷贝他们相当消耗存储和时间，我们必须考虑把它们存储在内存或者存储器（状态变量存放的地方）</p>\n</li>\n<li><p>数据位置：</p>\n<ul>\n<li>内存</li>\n<li>存储器</li>\n<li>calldata： 一个无法改变的，非持久的 存储函数参数的地方</li>\n<li>每一个复杂类型,即数组和结构体,有一个额外的注解,“数据位置”,不管它是存储在内存中，还是存储在存储器上。根据上下文,总是有一个默认的,但它可以通过附加存储或内存覆盖类型。函数参数的默认值(包括返回参数)是在内存上,局部变量的默认存储位置是在存储器上。存储器上存有状态变量(很明显)。</li>\n<li>赋值过程：<ul>\n<li>在存储和内存以及状态变量之间赋值总需要创建一个独立的副本；赋值只分配一个本地存储变量引用，这总是指向状态变量的引用，后者同时改变，</li>\n<li>从一个内存存储引用类型，赋值到另一个内存存储引用类型，并不创建一个副本；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>数组：</p>\n<ul>\n<li>数组可以长度固定，也可以动态（类似切片）</li>\n<li>存储器数组，成员类型是任意的（映射，结构体)</li>\n<li>内存数组， 成员类型不能是映射</li>\n<li>bytes 和 string是特殊类型的数组， bytes byte[], string  bytes</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>函数可见性和访问限制：</p>\n<ul>\n<li>external: 外部函数是合约接口的一部分，可能从其他合约调用；也通过食物调用；不能在被内部调用（即f()不执行，但是this.f()执行）</li>\n<li>public: default</li>\n<li>internal： 只能在内部访问（当前合约或它派生的合约），而不使用(关键字) this</li>\n<li>private： 私有函数和状态变量仅仅在定义该合约中可见，在派生的合约中不可见；</li>\n</ul>\n</li>\n<li><p>interface<br>-接口内没有任何函数是已实现的，并限制如下：</p>\n<ul>\n<li>不能继承其他合约，或接口</li>\n<li>不能定义构造器</li>\n<li>不能定义变量、结构体、枚举等</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Token&#123;</span><br><span class=\"line\">  function transfer(address recipient, uint amount);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继承：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> contract owned&#123;</span><br><span class=\"line\">   address public owner;</span><br><span class=\"line\">   function owned()&#123;</span><br><span class=\"line\">     owner = msg.sender;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> contract base1&#123;</span><br><span class=\"line\">     addresss public owner2;</span><br><span class=\"line\">     function base1()&#123;</span><br><span class=\"line\">       owner2 = msg.sender;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// is 关键字</span><br><span class=\"line\"> contract mortal is owned&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   function kill()&#123;</span><br><span class=\"line\">     if(msg.sender == owner)</span><br><span class=\"line\">       selfdestruct(owner);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//继承顺序，从“最基本”到“最近派生”</span><br><span class=\"line\"> contract Final is owned, base1&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>优秀solidity文章：<br><a href=\"https://steemit.com/cn/@speeding/smart-contract-development8\" target=\"_blank\" rel=\"noopener\">https://steemit.com/cn/@speeding/smart-contract-development8</a><br>建议熟读Solidity全局变量、全局函数，要抄代码，首先去OpenZeppelin，然后是Consensys的项目里去抄，有现成的 ERC20、ERC721合约模版和mock，</p>\n<p>this在合约中表示当前合约地址；</p>\n<p>payable 标识的函数：【重点】</p>\n<ul>\n<li>函数上增加payable标识，即可接收ether，并会把ether存在当前合约地址</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract Pay&#123;</span><br><span class=\"line\">  //存入一些ether到合约帐户中</span><br><span class=\"line\">  function deposit() payable&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //查询当前的余额</span><br><span class=\"line\">  function getBalance() constant returns(uint)&#123;</span><br><span class=\"line\">    return this.balance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>合约要接收通过send()函数发送的ether，有如下限制：</p>\n<ul>\n<li>必须定义fallback函数，否则抛异常</li>\n<li>fallback函数必须增加payable关键字，否则send()执行结果始终未false；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.0;</span><br><span class=\"line\">contract SendAndReceiveBycontract&#123;</span><br><span class=\"line\">  //fallback函数对应记录事件</span><br><span class=\"line\">  event fallbackTrigged(bytes data);</span><br><span class=\"line\"></span><br><span class=\"line\">  //合约接收send()的ether时，必须存在</span><br><span class=\"line\">  function() payable&#123;fallbackTrigged(msg.data);&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function deposit () payable&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function getBalance() constant returns (uint)&#123;</span><br><span class=\"line\">  return this.balance;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">event SendEvent(address to, uint value, bool result);</span><br><span class=\"line\"></span><br><span class=\"line\">//使用send()发送ether</span><br><span class=\"line\">function sendEther()&#123;</span><br><span class=\"line\">  // this.send(msg.value) : 向当前合约转账；</span><br><span class=\"line\">  bool result = this.send(1);</span><br><span class=\"line\">  SendEvent(this, 1, result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modifier notThis(address _address)&#123;</span><br><span class=\"line\">  require(_address != address(this))</span><br><span class=\"line\">  _;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Account <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  Address common.Address <span class=\"string\">`json:\"address\"`</span></span><br><span class=\"line\">  URL URL                <span class=\"string\">`json:\"url\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  HashLength = <span class=\"number\">32</span> <span class=\"comment\">//32 bytes [256bit]</span></span><br><span class=\"line\">  AddressLength = <span class=\"number\">20</span> <span class=\"comment\">// 20 bytes</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> URL <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  Scheme <span class=\"keyword\">string</span></span><br><span class=\"line\">  Path   <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Address [AddressLength]<span class=\"keyword\">byte</span>  <span class=\"comment\">//20 bytes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Wallet <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">  URL() URL</span><br><span class=\"line\">  Status() (<span class=\"keyword\">string</span>, error)</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> KeyStore <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">  storage keyStore</span><br><span class=\"line\">  cache *accountCache</span><br><span class=\"line\">  changes <span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\">  unlocked <span class=\"keyword\">map</span>[common.Address]*unlocked</span><br><span class=\"line\"></span><br><span class=\"line\">  ....</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">4.576</span>b shard <span class=\"number\">528</span>: soid <span class=\"number\">62d</span>f576b/rbd_data<span class=\"number\">.742</span>c2250945ff8<span class=\"number\">.0000000000009896</span>/<span class=\"number\">118</span><span class=\"comment\">//4 size 0 != known size 8388608</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>xx</li>\n</ul>\n"},{"_content":"---\n  title： golang中使用makefile\n---\n\nMakefile必须以tab来进行缩进\n\n```\n  target: prerequisites\n    recipe\n```\n\n- make 变量\n\n  VAR := value  //声明变量\n```\n  FILE := abc\n  $(FILE): xyz\n    echo $(FILE) > \"something\"\n\n  xyz:\n    echo \"xyz\" > xyz\n```\nhttps://sahilm.com/makefiles-for-golang/\n\nmake描述了如何构建我们的项目，那些可运行的测试以及项目中依赖的额外的工具；\nPHONY 目标并非实际的文件名： 只是显示请求时执行命令的名字；优势有以下两点：\n\n- 避免和同名文件冲突\n  如果编写一个规则，并不产生目标文件，则其命令在每次make该目标时都执行：\n ```\n  clean:\n    rm *.o temp\n ```\n   因为\" rm \"  并不生成\" clean \"文件，则每次执行\" make clean \" 的时候，该命令都会执行；\n   如果目录中出现了 \" clean \"文件，则规则失效了：没有依赖文件，文件\"clean\"始终是最新的， 命令永远不会执行； 为了避免这个问题，可使用\" .PHONY \"指明该目标。\n```\n  .PHONY: clean\n  clean:\n    rm *.0 temp\n```\n  这样执行\" make clean \"会无视\" clean \"文件存在与否；\n  已知phony 目标并非是由其它文件生成的实际文件，make 会跳过隐含规则搜索。这就是声明phony 目标会改善性能的原因，即使你并不担心实际文件存在与否。\n\n- 改善性能\n  phony 目标可以有依赖关系。当一个目录中有多个程序，将其放在一个makefile 中会更方便。因为缺省目标是makefile 中的第一个目标，通常将这个phony 目标叫做\"all\"，其依赖文件为各个程序：\n\n```\nall : prog1 prog2 prog3\n.PHONY : all\nprog1 : prog1.o utils.o\n  cc -o prog1 prog1.o utils.o\nprog2 : prog2.o\n  cc -o prog2 prog2.o\nprog3 : prog3.o sort.o utils.o\n  cc -o prog3 prog3.o sort.o utils.o\n```\n一个项目最后需要产生两个可执行文件。主要目标是产生两个可执行文件，但这两个文件是相互独立的——如果一个文件需要重建，并不影响另一个。使用“假象目的”来 达到这种效果。一个假象目的跟一个正常的目的几乎是一样的， 只是这个目的文件是不存在的。因此， make 总是会假设它需要 被生成，当把它的依赖文件更新后，就会执行它的规则里的命令行。\n","source":"_posts/makefile.md","raw":"---\n  title： golang中使用makefile\n---\n\nMakefile必须以tab来进行缩进\n\n```\n  target: prerequisites\n    recipe\n```\n\n- make 变量\n\n  VAR := value  //声明变量\n```\n  FILE := abc\n  $(FILE): xyz\n    echo $(FILE) > \"something\"\n\n  xyz:\n    echo \"xyz\" > xyz\n```\nhttps://sahilm.com/makefiles-for-golang/\n\nmake描述了如何构建我们的项目，那些可运行的测试以及项目中依赖的额外的工具；\nPHONY 目标并非实际的文件名： 只是显示请求时执行命令的名字；优势有以下两点：\n\n- 避免和同名文件冲突\n  如果编写一个规则，并不产生目标文件，则其命令在每次make该目标时都执行：\n ```\n  clean:\n    rm *.o temp\n ```\n   因为\" rm \"  并不生成\" clean \"文件，则每次执行\" make clean \" 的时候，该命令都会执行；\n   如果目录中出现了 \" clean \"文件，则规则失效了：没有依赖文件，文件\"clean\"始终是最新的， 命令永远不会执行； 为了避免这个问题，可使用\" .PHONY \"指明该目标。\n```\n  .PHONY: clean\n  clean:\n    rm *.0 temp\n```\n  这样执行\" make clean \"会无视\" clean \"文件存在与否；\n  已知phony 目标并非是由其它文件生成的实际文件，make 会跳过隐含规则搜索。这就是声明phony 目标会改善性能的原因，即使你并不担心实际文件存在与否。\n\n- 改善性能\n  phony 目标可以有依赖关系。当一个目录中有多个程序，将其放在一个makefile 中会更方便。因为缺省目标是makefile 中的第一个目标，通常将这个phony 目标叫做\"all\"，其依赖文件为各个程序：\n\n```\nall : prog1 prog2 prog3\n.PHONY : all\nprog1 : prog1.o utils.o\n  cc -o prog1 prog1.o utils.o\nprog2 : prog2.o\n  cc -o prog2 prog2.o\nprog3 : prog3.o sort.o utils.o\n  cc -o prog3 prog3.o sort.o utils.o\n```\n一个项目最后需要产生两个可执行文件。主要目标是产生两个可执行文件，但这两个文件是相互独立的——如果一个文件需要重建，并不影响另一个。使用“假象目的”来 达到这种效果。一个假象目的跟一个正常的目的几乎是一样的， 只是这个目的文件是不存在的。因此， make 总是会假设它需要 被生成，当把它的依赖文件更新后，就会执行它的规则里的命令行。\n","slug":"makefile","published":1,"date":"2018-07-17T07:56:54.118Z","updated":"2018-07-06T10:48:40.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjpeohpc000075hake7q25tm","content":"<hr>\n<h2 id=\"title：-golang中使用makefile\"><a href=\"#title：-golang中使用makefile\" class=\"headerlink\" title=\"  title： golang中使用makefile\"></a>  title： golang中使用makefile</h2><p>Makefile必须以tab来进行缩进</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target: prerequisites</span><br><span class=\"line\">  recipe</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>make 变量</p>\n<p>VAR := value  //声明变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FILE := abc</span><br><span class=\"line\">$(FILE): xyz</span><br><span class=\"line\">  echo $(FILE) &gt; &quot;something&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">xyz:</span><br><span class=\"line\">  echo &quot;xyz&quot; &gt; xyz</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"https://sahilm.com/makefiles-for-golang/\" target=\"_blank\" rel=\"noopener\">https://sahilm.com/makefiles-for-golang/</a></p>\n<p>make描述了如何构建我们的项目，那些可运行的测试以及项目中依赖的额外的工具；<br>PHONY 目标并非实际的文件名： 只是显示请求时执行命令的名字；优势有以下两点：</p>\n<ul>\n<li><p>避免和同名文件冲突<br>如果编写一个规则，并不产生目标文件，则其命令在每次make该目标时都执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clean:</span><br><span class=\"line\">  rm *.o temp</span><br></pre></td></tr></table></figure>\n<p> 因为” rm “  并不生成” clean “文件，则每次执行” make clean “ 的时候，该命令都会执行；<br> 如果目录中出现了 “ clean “文件，则规则失效了：没有依赖文件，文件”clean”始终是最新的， 命令永远不会执行； 为了避免这个问题，可使用” .PHONY “指明该目标。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.PHONY: clean</span><br><span class=\"line\">clean:</span><br><span class=\"line\">  rm *.0 temp</span><br></pre></td></tr></table></figure>\n<p>这样执行” make clean “会无视” clean “文件存在与否；<br>已知phony 目标并非是由其它文件生成的实际文件，make 会跳过隐含规则搜索。这就是声明phony 目标会改善性能的原因，即使你并不担心实际文件存在与否。</p>\n</li>\n<li><p>改善性能<br>phony 目标可以有依赖关系。当一个目录中有多个程序，将其放在一个makefile 中会更方便。因为缺省目标是makefile 中的第一个目标，通常将这个phony 目标叫做”all”，其依赖文件为各个程序：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all : prog1 prog2 prog3</span><br><span class=\"line\">.PHONY : all</span><br><span class=\"line\">prog1 : prog1.o utils.o</span><br><span class=\"line\">  cc -o prog1 prog1.o utils.o</span><br><span class=\"line\">prog2 : prog2.o</span><br><span class=\"line\">  cc -o prog2 prog2.o</span><br><span class=\"line\">prog3 : prog3.o sort.o utils.o</span><br><span class=\"line\">  cc -o prog3 prog3.o sort.o utils.o</span><br></pre></td></tr></table></figure>\n<p>一个项目最后需要产生两个可执行文件。主要目标是产生两个可执行文件，但这两个文件是相互独立的——如果一个文件需要重建，并不影响另一个。使用“假象目的”来 达到这种效果。一个假象目的跟一个正常的目的几乎是一样的， 只是这个目的文件是不存在的。因此， make 总是会假设它需要 被生成，当把它的依赖文件更新后，就会执行它的规则里的命令行。</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"title：-golang中使用makefile\"><a href=\"#title：-golang中使用makefile\" class=\"headerlink\" title=\"  title： golang中使用makefile\"></a>  title： golang中使用makefile</h2><p>Makefile必须以tab来进行缩进</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target: prerequisites</span><br><span class=\"line\">  recipe</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>make 变量</p>\n<p>VAR := value  //声明变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FILE := abc</span><br><span class=\"line\">$(FILE): xyz</span><br><span class=\"line\">  echo $(FILE) &gt; &quot;something&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">xyz:</span><br><span class=\"line\">  echo &quot;xyz&quot; &gt; xyz</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><a href=\"https://sahilm.com/makefiles-for-golang/\" target=\"_blank\" rel=\"noopener\">https://sahilm.com/makefiles-for-golang/</a></p>\n<p>make描述了如何构建我们的项目，那些可运行的测试以及项目中依赖的额外的工具；<br>PHONY 目标并非实际的文件名： 只是显示请求时执行命令的名字；优势有以下两点：</p>\n<ul>\n<li><p>避免和同名文件冲突<br>如果编写一个规则，并不产生目标文件，则其命令在每次make该目标时都执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clean:</span><br><span class=\"line\">  rm *.o temp</span><br></pre></td></tr></table></figure>\n<p> 因为” rm “  并不生成” clean “文件，则每次执行” make clean “ 的时候，该命令都会执行；<br> 如果目录中出现了 “ clean “文件，则规则失效了：没有依赖文件，文件”clean”始终是最新的， 命令永远不会执行； 为了避免这个问题，可使用” .PHONY “指明该目标。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.PHONY: clean</span><br><span class=\"line\">clean:</span><br><span class=\"line\">  rm *.0 temp</span><br></pre></td></tr></table></figure>\n<p>这样执行” make clean “会无视” clean “文件存在与否；<br>已知phony 目标并非是由其它文件生成的实际文件，make 会跳过隐含规则搜索。这就是声明phony 目标会改善性能的原因，即使你并不担心实际文件存在与否。</p>\n</li>\n<li><p>改善性能<br>phony 目标可以有依赖关系。当一个目录中有多个程序，将其放在一个makefile 中会更方便。因为缺省目标是makefile 中的第一个目标，通常将这个phony 目标叫做”all”，其依赖文件为各个程序：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all : prog1 prog2 prog3</span><br><span class=\"line\">.PHONY : all</span><br><span class=\"line\">prog1 : prog1.o utils.o</span><br><span class=\"line\">  cc -o prog1 prog1.o utils.o</span><br><span class=\"line\">prog2 : prog2.o</span><br><span class=\"line\">  cc -o prog2 prog2.o</span><br><span class=\"line\">prog3 : prog3.o sort.o utils.o</span><br><span class=\"line\">  cc -o prog3 prog3.o sort.o utils.o</span><br></pre></td></tr></table></figure>\n<p>一个项目最后需要产生两个可执行文件。主要目标是产生两个可执行文件，但这两个文件是相互独立的——如果一个文件需要重建，并不影响另一个。使用“假象目的”来 达到这种效果。一个假象目的跟一个正常的目的几乎是一样的， 只是这个目的文件是不存在的。因此， make 总是会假设它需要 被生成，当把它的依赖文件更新后，就会执行它的规则里的命令行。</p>\n"},{"title":"solidity代码优化","_content":"```javascript\ncontract BadFailEarly {\n  uint constant DEFAULT_SALARY = 50000;\n  mapping(string => uint) nameToSalary;\n  function getSalary(string name) constant returns (uint) {\n      if (bytes(name).length != 0 && nameToSalary[name] != 0) {\n            return nameToSalary[name];\n          } else {\n                return DEFAULT_SALARY;\n              }\n    }\n}\n\ncontract GoodFailEarly {\n  mapping(string => uint) nameToSalary;\n\n  function getSalary(string name) constant returns (uint) {\n      if (bytes(name).length == 0) throw;\n      if (nameToSalary[name] == 0) throw;\n\n      return nameToSalary[name];\n    }\n}\n\ncontract BadPushPayments {\n  address highestBidder;\n  uint highestBid;\n\n  function bid() {\n      if (msg.value < highestBid) throw;\n      if (highestBidder != 0) {\n            // return bid to previous winner\n            if (!highestBidder.send(highestBid)) {\n                    throw;\n            }\n      }\n      highestBidder = msg.sender;\n      highestBid = msg.value;\n    }\n}\n\n/*when sending ether, favor pull over push payments. 发送以太坊，支付推动付款 */\ncontract GoodPullPayments {\n  address highestBidder;\n  uint highestBid;\nmapping(address => uint) refunds; //refund 退款\n\nfunction bid() external {\n    if (msg.value < highestBid) throw;\n\n    if (highestBidder != 0) {\n          refunds[highestBidder] += highestBid;\n        }\n\n    highestBidder = msg.sender;\n    highestBid = msg.value;\n  }\n\nfunction withdrawBid() external {\n    uint refund = refunds[msg.sender];\n    refunds[msg.sender] = 0;\n    if (!msg.sender.send(refund)) {\n          refunds[msg.sender] = refund;\n        }\n  }\n}\n\n/**\n*  顺序化代码\n   - condition, 条件\n   - actions,   动作\n   - interaction, 影响\n*\n*/\n\nfunction auctionEnd() {\n// 1. Conditions\nif (now <= auctionStart + biddingTime)\n  throw; // auction did not yet end\nif (ended)\n  throw; // this function has already been called\n\n// 2. Effects\nended = true;\nAuctionEnded(highestBidder, highestBid);\n\n// 3. Interaction\nif (!beneficiary.send(highestBid))\n  throw;\n}\n}\n\ncontract BadArrayUse {\naddress[] employees;\nmapping(address => uint) bonuses;\n\nfunction payBonus() {\n    //@ i : uint8(0~255)\n    for (var i = 0; i < employees.length; i++) {\n          address employee = employees[i];\n          uint bonus = calculateBonus(employee);\n          employee.send(bonus);\n        }\n  }\n\n  //循环中执行的函数，必须很清楚每个循环消耗多少gas，否则导致gas不足，进行回滚\n  function calculateBonus(address employee) returns (uint) {\n    // some expensive computation ...\n    bonuses[employee] = bonus;\n  }\n}\n\n\n// PullPayment.sol 在zeppelin包中\nimport './PullPayment.sol';\ncontract GoodArrayUse is PullPayment {\naddress[] employees;\nmapping(address => uint) bonuses;\n\nfunction payBonus() {\n    for (uint i = 0; i < employees.length; i++) {\n          address employee = employees[i];\n          uint bonus = bonuses[employee];\n          //******\n          asyncSend(employee, bonus);\n        }\n  }\nfunction calculateBonus(address employee) returns (uint) {\n    uint bonus = 0;\n    // some expensive computation...\n\n    bonuses[employee] = bonus;\n  }\n}\n\nimport './PullPayment.sol';\nimport './Token.sol';\ncontract Bounty is PullPayment {\nbool public claimed;\nmapping(address => address) public researchers;\n\nfunction() {\n    if (claimed) throw;\n  }\n\nfunction createTarget() returns(Token) {\n    Token target = new Token(0);\n    researchers[target] = msg.sender;\n    return target;\n  }\n\nfunction claim(Token target) {\n    address researcher = researchers[target];\n    if (researcher == 0) throw;\n\n    // check Token contract invariants\n    if (target.totalSupply() == target.balance) {\n          throw;\n        }\n    asyncSend(researcher, this.balance);\n    claimed = true;\n  }\n}\n\n//紧急停止合约\ncontract Stoppable{\n  address public curator;\n  bool public stopped;\n\n  modifier stopInEmergency {if (!stopped) _;}\n  modifier onlyInEmergency {if (stopped) _;}\n\n  function Stoppable(address _curator){\n      if(_curator == 0) throw;\n      curator = _curator;\n  }\n\n  function emergencyStop() external{\n      if(msg.sender != curator) throw;\n      stopped = true;\n  }\n}\n\nimport './PullPayment.sol';\nimport './Stoppable.sol';\ncontract StoppableBid is Stoppable, PullPayment {\naddress public highestBidder;\nuint public highestBid;\n\nfunction StoppableBid(address _curator)\n  Stoppable(_curator)\n  PullPayment() {}\n\nfunction bid() external stopInEmergency {\n    if (msg.value <= highestBid) throw;\n\n    if (highestBidder != 0) {\n          asyncSend(highestBidder, highestBid);\n    }\n\n    highestBidder = msg.sender;\n    highestBid = msg.value;\n}\n\nfunction withdraw() onlyInEmergency {\n    suicide(curator);\n  }\n}\n```\n","source":"_posts/sodility_optimal.md","raw":"---\n  title: solidity代码优化\n---\n```javascript\ncontract BadFailEarly {\n  uint constant DEFAULT_SALARY = 50000;\n  mapping(string => uint) nameToSalary;\n  function getSalary(string name) constant returns (uint) {\n      if (bytes(name).length != 0 && nameToSalary[name] != 0) {\n            return nameToSalary[name];\n          } else {\n                return DEFAULT_SALARY;\n              }\n    }\n}\n\ncontract GoodFailEarly {\n  mapping(string => uint) nameToSalary;\n\n  function getSalary(string name) constant returns (uint) {\n      if (bytes(name).length == 0) throw;\n      if (nameToSalary[name] == 0) throw;\n\n      return nameToSalary[name];\n    }\n}\n\ncontract BadPushPayments {\n  address highestBidder;\n  uint highestBid;\n\n  function bid() {\n      if (msg.value < highestBid) throw;\n      if (highestBidder != 0) {\n            // return bid to previous winner\n            if (!highestBidder.send(highestBid)) {\n                    throw;\n            }\n      }\n      highestBidder = msg.sender;\n      highestBid = msg.value;\n    }\n}\n\n/*when sending ether, favor pull over push payments. 发送以太坊，支付推动付款 */\ncontract GoodPullPayments {\n  address highestBidder;\n  uint highestBid;\nmapping(address => uint) refunds; //refund 退款\n\nfunction bid() external {\n    if (msg.value < highestBid) throw;\n\n    if (highestBidder != 0) {\n          refunds[highestBidder] += highestBid;\n        }\n\n    highestBidder = msg.sender;\n    highestBid = msg.value;\n  }\n\nfunction withdrawBid() external {\n    uint refund = refunds[msg.sender];\n    refunds[msg.sender] = 0;\n    if (!msg.sender.send(refund)) {\n          refunds[msg.sender] = refund;\n        }\n  }\n}\n\n/**\n*  顺序化代码\n   - condition, 条件\n   - actions,   动作\n   - interaction, 影响\n*\n*/\n\nfunction auctionEnd() {\n// 1. Conditions\nif (now <= auctionStart + biddingTime)\n  throw; // auction did not yet end\nif (ended)\n  throw; // this function has already been called\n\n// 2. Effects\nended = true;\nAuctionEnded(highestBidder, highestBid);\n\n// 3. Interaction\nif (!beneficiary.send(highestBid))\n  throw;\n}\n}\n\ncontract BadArrayUse {\naddress[] employees;\nmapping(address => uint) bonuses;\n\nfunction payBonus() {\n    //@ i : uint8(0~255)\n    for (var i = 0; i < employees.length; i++) {\n          address employee = employees[i];\n          uint bonus = calculateBonus(employee);\n          employee.send(bonus);\n        }\n  }\n\n  //循环中执行的函数，必须很清楚每个循环消耗多少gas，否则导致gas不足，进行回滚\n  function calculateBonus(address employee) returns (uint) {\n    // some expensive computation ...\n    bonuses[employee] = bonus;\n  }\n}\n\n\n// PullPayment.sol 在zeppelin包中\nimport './PullPayment.sol';\ncontract GoodArrayUse is PullPayment {\naddress[] employees;\nmapping(address => uint) bonuses;\n\nfunction payBonus() {\n    for (uint i = 0; i < employees.length; i++) {\n          address employee = employees[i];\n          uint bonus = bonuses[employee];\n          //******\n          asyncSend(employee, bonus);\n        }\n  }\nfunction calculateBonus(address employee) returns (uint) {\n    uint bonus = 0;\n    // some expensive computation...\n\n    bonuses[employee] = bonus;\n  }\n}\n\nimport './PullPayment.sol';\nimport './Token.sol';\ncontract Bounty is PullPayment {\nbool public claimed;\nmapping(address => address) public researchers;\n\nfunction() {\n    if (claimed) throw;\n  }\n\nfunction createTarget() returns(Token) {\n    Token target = new Token(0);\n    researchers[target] = msg.sender;\n    return target;\n  }\n\nfunction claim(Token target) {\n    address researcher = researchers[target];\n    if (researcher == 0) throw;\n\n    // check Token contract invariants\n    if (target.totalSupply() == target.balance) {\n          throw;\n        }\n    asyncSend(researcher, this.balance);\n    claimed = true;\n  }\n}\n\n//紧急停止合约\ncontract Stoppable{\n  address public curator;\n  bool public stopped;\n\n  modifier stopInEmergency {if (!stopped) _;}\n  modifier onlyInEmergency {if (stopped) _;}\n\n  function Stoppable(address _curator){\n      if(_curator == 0) throw;\n      curator = _curator;\n  }\n\n  function emergencyStop() external{\n      if(msg.sender != curator) throw;\n      stopped = true;\n  }\n}\n\nimport './PullPayment.sol';\nimport './Stoppable.sol';\ncontract StoppableBid is Stoppable, PullPayment {\naddress public highestBidder;\nuint public highestBid;\n\nfunction StoppableBid(address _curator)\n  Stoppable(_curator)\n  PullPayment() {}\n\nfunction bid() external stopInEmergency {\n    if (msg.value <= highestBid) throw;\n\n    if (highestBidder != 0) {\n          asyncSend(highestBidder, highestBid);\n    }\n\n    highestBidder = msg.sender;\n    highestBid = msg.value;\n}\n\nfunction withdraw() onlyInEmergency {\n    suicide(curator);\n  }\n}\n```\n","slug":"sodility_optimal","published":1,"date":"2018-07-17T07:57:11.050Z","updated":"2018-07-06T10:47:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjpeohpp000175hafj0lf6gz","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract BadFailEarly &#123;</span><br><span class=\"line\">  uint constant DEFAULT_SALARY = <span class=\"number\">50000</span>;</span><br><span class=\"line\">  mapping(<span class=\"function\"><span class=\"params\">string</span> =&gt;</span> uint) nameToSalary;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSalary</span>(<span class=\"params\">string name</span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (bytes(name).length != <span class=\"number\">0</span> &amp;&amp; nameToSalary[name] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nameToSalary[name];</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> DEFAULT_SALARY;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract GoodFailEarly &#123;</span><br><span class=\"line\">  mapping(<span class=\"function\"><span class=\"params\">string</span> =&gt;</span> uint) nameToSalary;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSalary</span>(<span class=\"params\">string name</span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (bytes(name).length == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nameToSalary[name] == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> nameToSalary[name];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract BadPushPayments &#123;</span><br><span class=\"line\">  address highestBidder;</span><br><span class=\"line\">  uint highestBid;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bid</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (msg.value &lt; highestBid) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (highestBidder != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// return bid to previous winner</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!highestBidder.send(highestBid)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      highestBidder = msg.sender;</span><br><span class=\"line\">      highestBid = msg.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*when sending ether, favor pull over push payments. 发送以太坊，支付推动付款 */</span></span><br><span class=\"line\">contract GoodPullPayments &#123;</span><br><span class=\"line\">  address highestBidder;</span><br><span class=\"line\">  uint highestBid;</span><br><span class=\"line\">mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint) refunds; <span class=\"comment\">//refund 退款</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bid</span>(<span class=\"params\"></span>) <span class=\"title\">external</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (msg.value &lt; highestBid) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (highestBidder != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          refunds[highestBidder] += highestBid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    highestBidder = msg.sender;</span><br><span class=\"line\">    highestBid = msg.value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">withdrawBid</span>(<span class=\"params\"></span>) <span class=\"title\">external</span> </span>&#123;</span><br><span class=\"line\">    uint refund = refunds[msg.sender];</span><br><span class=\"line\">    refunds[msg.sender] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!msg.sender.send(refund)) &#123;</span><br><span class=\"line\">          refunds[msg.sender] = refund;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*  顺序化代码</span></span><br><span class=\"line\"><span class=\"comment\">   - condition, 条件</span></span><br><span class=\"line\"><span class=\"comment\">   - actions,   动作</span></span><br><span class=\"line\"><span class=\"comment\">   - interaction, 影响</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">auctionEnd</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 1. Conditions</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (now &lt;= auctionStart + biddingTime)</span><br><span class=\"line\">  <span class=\"keyword\">throw</span>; <span class=\"comment\">// auction did not yet end</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ended)</span><br><span class=\"line\">  <span class=\"keyword\">throw</span>; <span class=\"comment\">// this function has already been called</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. Effects</span></span><br><span class=\"line\">ended = <span class=\"literal\">true</span>;</span><br><span class=\"line\">AuctionEnded(highestBidder, highestBid);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. Interaction</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!beneficiary.send(highestBid))</span><br><span class=\"line\">  <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract BadArrayUse &#123;</span><br><span class=\"line\">address[] employees;</span><br><span class=\"line\">mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint) bonuses;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">payBonus</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//@ i : uint8(0~255)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; employees.length; i++) &#123;</span><br><span class=\"line\">          address employee = employees[i];</span><br><span class=\"line\">          uint bonus = calculateBonus(employee);</span><br><span class=\"line\">          employee.send(bonus);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//循环中执行的函数，必须很清楚每个循环消耗多少gas，否则导致gas不足，进行回滚</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateBonus</span>(<span class=\"params\">address employee</span>) <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// some expensive computation ...</span></span><br><span class=\"line\">    bonuses[employee] = bonus;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PullPayment.sol 在zeppelin包中</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./PullPayment.sol'</span>;</span><br><span class=\"line\">contract GoodArrayUse is PullPayment &#123;</span><br><span class=\"line\">address[] employees;</span><br><span class=\"line\">mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint) bonuses;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">payBonus</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (uint i = <span class=\"number\">0</span>; i &lt; employees.length; i++) &#123;</span><br><span class=\"line\">          address employee = employees[i];</span><br><span class=\"line\">          uint bonus = bonuses[employee];</span><br><span class=\"line\">          <span class=\"comment\">//******</span></span><br><span class=\"line\">          asyncSend(employee, bonus);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateBonus</span>(<span class=\"params\">address employee</span>) <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;</span><br><span class=\"line\">    uint bonus = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// some expensive computation...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    bonuses[employee] = bonus;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./PullPayment.sol'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./Token.sol'</span>;</span><br><span class=\"line\">contract Bounty is PullPayment &#123;</span><br><span class=\"line\">bool public claimed;</span><br><span class=\"line\">mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> address) public researchers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (claimed) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createTarget</span>(<span class=\"params\"></span>) <span class=\"title\">returns</span>(<span class=\"params\">Token</span>) </span>&#123;</span><br><span class=\"line\">    Token target = <span class=\"keyword\">new</span> Token(<span class=\"number\">0</span>);</span><br><span class=\"line\">    researchers[target] = msg.sender;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">claim</span>(<span class=\"params\">Token target</span>) </span>&#123;</span><br><span class=\"line\">    address researcher = researchers[target];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (researcher == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// check Token contract invariants</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.totalSupply() == target.balance) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    asyncSend(researcher, <span class=\"keyword\">this</span>.balance);</span><br><span class=\"line\">    claimed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//紧急停止合约</span></span><br><span class=\"line\">contract Stoppable&#123;</span><br><span class=\"line\">  address public curator;</span><br><span class=\"line\">  bool public stopped;</span><br><span class=\"line\"></span><br><span class=\"line\">  modifier stopInEmergency &#123;<span class=\"keyword\">if</span> (!stopped) _;&#125;</span><br><span class=\"line\">  modifier onlyInEmergency &#123;<span class=\"keyword\">if</span> (stopped) _;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Stoppable</span>(<span class=\"params\">address _curator</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(_curator == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">      curator = _curator;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emergencyStop</span>(<span class=\"params\"></span>) <span class=\"title\">external</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(msg.sender != curator) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">      stopped = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./PullPayment.sol'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./Stoppable.sol'</span>;</span><br><span class=\"line\">contract StoppableBid is Stoppable, PullPayment &#123;</span><br><span class=\"line\">address public highestBidder;</span><br><span class=\"line\">uint public highestBid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">StoppableBid</span>(<span class=\"params\">address _curator</span>)</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">Stoppable</span>(<span class=\"params\">_curator</span>)</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">PullPayment</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bid</span>(<span class=\"params\"></span>) <span class=\"title\">external</span> <span class=\"title\">stopInEmergency</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (msg.value &lt;= highestBid) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (highestBidder != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          asyncSend(highestBidder, highestBid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    highestBidder = msg.sender;</span><br><span class=\"line\">    highestBid = msg.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">withdraw</span>(<span class=\"params\"></span>) <span class=\"title\">onlyInEmergency</span> </span>&#123;</span><br><span class=\"line\">    suicide(curator);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contract BadFailEarly &#123;</span><br><span class=\"line\">  uint constant DEFAULT_SALARY = <span class=\"number\">50000</span>;</span><br><span class=\"line\">  mapping(<span class=\"function\"><span class=\"params\">string</span> =&gt;</span> uint) nameToSalary;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSalary</span>(<span class=\"params\">string name</span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (bytes(name).length != <span class=\"number\">0</span> &amp;&amp; nameToSalary[name] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nameToSalary[name];</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> DEFAULT_SALARY;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract GoodFailEarly &#123;</span><br><span class=\"line\">  mapping(<span class=\"function\"><span class=\"params\">string</span> =&gt;</span> uint) nameToSalary;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSalary</span>(<span class=\"params\">string name</span>) <span class=\"title\">constant</span> <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (bytes(name).length == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nameToSalary[name] == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> nameToSalary[name];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract BadPushPayments &#123;</span><br><span class=\"line\">  address highestBidder;</span><br><span class=\"line\">  uint highestBid;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bid</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (msg.value &lt; highestBid) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (highestBidder != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// return bid to previous winner</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!highestBidder.send(highestBid)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      highestBidder = msg.sender;</span><br><span class=\"line\">      highestBid = msg.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*when sending ether, favor pull over push payments. 发送以太坊，支付推动付款 */</span></span><br><span class=\"line\">contract GoodPullPayments &#123;</span><br><span class=\"line\">  address highestBidder;</span><br><span class=\"line\">  uint highestBid;</span><br><span class=\"line\">mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint) refunds; <span class=\"comment\">//refund 退款</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bid</span>(<span class=\"params\"></span>) <span class=\"title\">external</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (msg.value &lt; highestBid) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (highestBidder != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          refunds[highestBidder] += highestBid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    highestBidder = msg.sender;</span><br><span class=\"line\">    highestBid = msg.value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">withdrawBid</span>(<span class=\"params\"></span>) <span class=\"title\">external</span> </span>&#123;</span><br><span class=\"line\">    uint refund = refunds[msg.sender];</span><br><span class=\"line\">    refunds[msg.sender] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!msg.sender.send(refund)) &#123;</span><br><span class=\"line\">          refunds[msg.sender] = refund;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*  顺序化代码</span></span><br><span class=\"line\"><span class=\"comment\">   - condition, 条件</span></span><br><span class=\"line\"><span class=\"comment\">   - actions,   动作</span></span><br><span class=\"line\"><span class=\"comment\">   - interaction, 影响</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">auctionEnd</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// 1. Conditions</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (now &lt;= auctionStart + biddingTime)</span><br><span class=\"line\">  <span class=\"keyword\">throw</span>; <span class=\"comment\">// auction did not yet end</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ended)</span><br><span class=\"line\">  <span class=\"keyword\">throw</span>; <span class=\"comment\">// this function has already been called</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. Effects</span></span><br><span class=\"line\">ended = <span class=\"literal\">true</span>;</span><br><span class=\"line\">AuctionEnded(highestBidder, highestBid);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. Interaction</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!beneficiary.send(highestBid))</span><br><span class=\"line\">  <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract BadArrayUse &#123;</span><br><span class=\"line\">address[] employees;</span><br><span class=\"line\">mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint) bonuses;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">payBonus</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//@ i : uint8(0~255)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; employees.length; i++) &#123;</span><br><span class=\"line\">          address employee = employees[i];</span><br><span class=\"line\">          uint bonus = calculateBonus(employee);</span><br><span class=\"line\">          employee.send(bonus);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//循环中执行的函数，必须很清楚每个循环消耗多少gas，否则导致gas不足，进行回滚</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateBonus</span>(<span class=\"params\">address employee</span>) <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// some expensive computation ...</span></span><br><span class=\"line\">    bonuses[employee] = bonus;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PullPayment.sol 在zeppelin包中</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./PullPayment.sol'</span>;</span><br><span class=\"line\">contract GoodArrayUse is PullPayment &#123;</span><br><span class=\"line\">address[] employees;</span><br><span class=\"line\">mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> uint) bonuses;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">payBonus</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (uint i = <span class=\"number\">0</span>; i &lt; employees.length; i++) &#123;</span><br><span class=\"line\">          address employee = employees[i];</span><br><span class=\"line\">          uint bonus = bonuses[employee];</span><br><span class=\"line\">          <span class=\"comment\">//******</span></span><br><span class=\"line\">          asyncSend(employee, bonus);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateBonus</span>(<span class=\"params\">address employee</span>) <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;</span><br><span class=\"line\">    uint bonus = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// some expensive computation...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    bonuses[employee] = bonus;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./PullPayment.sol'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./Token.sol'</span>;</span><br><span class=\"line\">contract Bounty is PullPayment &#123;</span><br><span class=\"line\">bool public claimed;</span><br><span class=\"line\">mapping(<span class=\"function\"><span class=\"params\">address</span> =&gt;</span> address) public researchers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (claimed) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createTarget</span>(<span class=\"params\"></span>) <span class=\"title\">returns</span>(<span class=\"params\">Token</span>) </span>&#123;</span><br><span class=\"line\">    Token target = <span class=\"keyword\">new</span> Token(<span class=\"number\">0</span>);</span><br><span class=\"line\">    researchers[target] = msg.sender;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">claim</span>(<span class=\"params\">Token target</span>) </span>&#123;</span><br><span class=\"line\">    address researcher = researchers[target];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (researcher == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// check Token contract invariants</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.totalSupply() == target.balance) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    asyncSend(researcher, <span class=\"keyword\">this</span>.balance);</span><br><span class=\"line\">    claimed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//紧急停止合约</span></span><br><span class=\"line\">contract Stoppable&#123;</span><br><span class=\"line\">  address public curator;</span><br><span class=\"line\">  bool public stopped;</span><br><span class=\"line\"></span><br><span class=\"line\">  modifier stopInEmergency &#123;<span class=\"keyword\">if</span> (!stopped) _;&#125;</span><br><span class=\"line\">  modifier onlyInEmergency &#123;<span class=\"keyword\">if</span> (stopped) _;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Stoppable</span>(<span class=\"params\">address _curator</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(_curator == <span class=\"number\">0</span>) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">      curator = _curator;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emergencyStop</span>(<span class=\"params\"></span>) <span class=\"title\">external</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(msg.sender != curator) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">      stopped = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./PullPayment.sol'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./Stoppable.sol'</span>;</span><br><span class=\"line\">contract StoppableBid is Stoppable, PullPayment &#123;</span><br><span class=\"line\">address public highestBidder;</span><br><span class=\"line\">uint public highestBid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">StoppableBid</span>(<span class=\"params\">address _curator</span>)</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">Stoppable</span>(<span class=\"params\">_curator</span>)</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">PullPayment</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bid</span>(<span class=\"params\"></span>) <span class=\"title\">external</span> <span class=\"title\">stopInEmergency</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (msg.value &lt;= highestBid) <span class=\"keyword\">throw</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (highestBidder != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          asyncSend(highestBidder, highestBid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    highestBidder = msg.sender;</span><br><span class=\"line\">    highestBid = msg.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">withdraw</span>(<span class=\"params\"></span>) <span class=\"title\">onlyInEmergency</span> </span>&#123;</span><br><span class=\"line\">    suicide(curator);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"solidity Library","_content":"\n在Solidity中，与合约有些不同，Library不能处理ether。你可以把它当作一个EVM中的单例，又或者是一个部署一次后不再部署，然后能被做任意其它合约调用的公共代码。\n\n这带来的一个显然好处是节省大量的gas（当然也可以减少重复代码对区块链带来的污染），因为代码不用一而再，再而三的部署，不同的合约可以依赖于同一个已部署的合约。\n\n库是一个特殊的合约，不允许payable的函数，不允许fallback函数（这些限制是在编译期间强制执行的，由此我们不能使用库来操作ether）。库通过关键字library定义，如library C{}，与合约定义类似contract A{}。\n\n调用库函数时，将使用一个特殊的指令（DELEGATECAL)，这会将调用时的上下文信息传入到library中，就好像代码在合约自身中执行一样。 “库可以被看作是使用它的合约中的一个隐式父类”\n\n```\n  library C{\n    function a() returns(address){\n      return address(this);\n    }\n  }\n\n  contract A{\n    function a() constant returns(address){\n      return C.a();\n    }\n  }\n```\n\n- using 结构体和方法\n\n尽管库并没有storage，他们可以使用关联合约的storage。当传递一个库调用，库所进行的修改，将会保存在合约中的storage中。这有点类似于向函数中传递了C语言一样的指针，只有通过这种方式，库才可能是一个已经被部署过的，或已经存在于区块链上了。\n\n使用using提供的语法糖，可以让这一切实现得简洁和好懂。\n```\nlibrary CounterLib {\n    struct Counter { uint i; }\n\n    function incremented(Counter storage self) returns (uint) {\n        return ++self.i;\n    }\n}\n\ncontract CounterContract {\n    using CounterLib for CounterLib.Counter;\n\n    CounterLib.Counter counter;\n\n    function increment() returns (uint) {\n        return counter.incremented();\n    }\n}\n```\nusing关键字，在CounterLib数据结构Counter上附着了CounterLib库中定义的方法。CounterLib.Counter的实例在使用时，就好像它自己有了incremented()，调用方法时，会直接把这个实例作为第一个参数传入了函数。\n\n- 事件和库\n\n  库中不止没有storage，也没有event。但他们类似storage这样，转发事件；\n  如之前所述，一个库可以被认为是被调用合约的隐式的基类。如果在基类合约中触发一个事件，它也会出现在主合约中事件日志中，同样的，库函数也是如此，当合约调用的库函数中的事件触发函数时，日志事件也会出现在合约的日志中。\n\n  当前的问题是，合约的ABI定义不能反映库中可能会触发的事件。这将导致客户端如web3，不知道如何解析事件，以及不知道如何解析参数。\n\n  这里有一个缓解的办法，是在合约和库中都定义同样的事件，这将让客户端认为合约触发对应的事件（而实际是库函数触发的）。\n\n  下面是一个简单的例子来说明这一切，尽管Emit事件由库触发，通过监听EventEmitterContract.Emit，我们可以监听事件。而相对来说，监听EventEmitterLib.Emit，反而不会得到什么事件。\n\n```\nlibrary EventEmitterLib {\n    function emit(string s) {\n        Emit(s);\n    }\n\n    event Emit(string s);\n}\n\ncontract EventEmitterContract {\n    using EventEmitterLib for string;\n\n    function emit(string s) {\n        s.emit();\n    }\n\n    event Emit(string s);\n}\n```\n","source":"_posts/solidity_library.md","raw":"---\n  title: solidity Library\n---\n\n在Solidity中，与合约有些不同，Library不能处理ether。你可以把它当作一个EVM中的单例，又或者是一个部署一次后不再部署，然后能被做任意其它合约调用的公共代码。\n\n这带来的一个显然好处是节省大量的gas（当然也可以减少重复代码对区块链带来的污染），因为代码不用一而再，再而三的部署，不同的合约可以依赖于同一个已部署的合约。\n\n库是一个特殊的合约，不允许payable的函数，不允许fallback函数（这些限制是在编译期间强制执行的，由此我们不能使用库来操作ether）。库通过关键字library定义，如library C{}，与合约定义类似contract A{}。\n\n调用库函数时，将使用一个特殊的指令（DELEGATECAL)，这会将调用时的上下文信息传入到library中，就好像代码在合约自身中执行一样。 “库可以被看作是使用它的合约中的一个隐式父类”\n\n```\n  library C{\n    function a() returns(address){\n      return address(this);\n    }\n  }\n\n  contract A{\n    function a() constant returns(address){\n      return C.a();\n    }\n  }\n```\n\n- using 结构体和方法\n\n尽管库并没有storage，他们可以使用关联合约的storage。当传递一个库调用，库所进行的修改，将会保存在合约中的storage中。这有点类似于向函数中传递了C语言一样的指针，只有通过这种方式，库才可能是一个已经被部署过的，或已经存在于区块链上了。\n\n使用using提供的语法糖，可以让这一切实现得简洁和好懂。\n```\nlibrary CounterLib {\n    struct Counter { uint i; }\n\n    function incremented(Counter storage self) returns (uint) {\n        return ++self.i;\n    }\n}\n\ncontract CounterContract {\n    using CounterLib for CounterLib.Counter;\n\n    CounterLib.Counter counter;\n\n    function increment() returns (uint) {\n        return counter.incremented();\n    }\n}\n```\nusing关键字，在CounterLib数据结构Counter上附着了CounterLib库中定义的方法。CounterLib.Counter的实例在使用时，就好像它自己有了incremented()，调用方法时，会直接把这个实例作为第一个参数传入了函数。\n\n- 事件和库\n\n  库中不止没有storage，也没有event。但他们类似storage这样，转发事件；\n  如之前所述，一个库可以被认为是被调用合约的隐式的基类。如果在基类合约中触发一个事件，它也会出现在主合约中事件日志中，同样的，库函数也是如此，当合约调用的库函数中的事件触发函数时，日志事件也会出现在合约的日志中。\n\n  当前的问题是，合约的ABI定义不能反映库中可能会触发的事件。这将导致客户端如web3，不知道如何解析事件，以及不知道如何解析参数。\n\n  这里有一个缓解的办法，是在合约和库中都定义同样的事件，这将让客户端认为合约触发对应的事件（而实际是库函数触发的）。\n\n  下面是一个简单的例子来说明这一切，尽管Emit事件由库触发，通过监听EventEmitterContract.Emit，我们可以监听事件。而相对来说，监听EventEmitterLib.Emit，反而不会得到什么事件。\n\n```\nlibrary EventEmitterLib {\n    function emit(string s) {\n        Emit(s);\n    }\n\n    event Emit(string s);\n}\n\ncontract EventEmitterContract {\n    using EventEmitterLib for string;\n\n    function emit(string s) {\n        s.emit();\n    }\n\n    event Emit(string s);\n}\n```\n","slug":"solidity_library","published":1,"date":"2018-07-17T07:57:22.554Z","updated":"2018-07-04T10:15:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjpeohpw000275hapaenldtm","content":"<p>在Solidity中，与合约有些不同，Library不能处理ether。你可以把它当作一个EVM中的单例，又或者是一个部署一次后不再部署，然后能被做任意其它合约调用的公共代码。</p>\n<p>这带来的一个显然好处是节省大量的gas（当然也可以减少重复代码对区块链带来的污染），因为代码不用一而再，再而三的部署，不同的合约可以依赖于同一个已部署的合约。</p>\n<p>库是一个特殊的合约，不允许payable的函数，不允许fallback函数（这些限制是在编译期间强制执行的，由此我们不能使用库来操作ether）。库通过关键字library定义，如library C{}，与合约定义类似contract A{}。</p>\n<p>调用库函数时，将使用一个特殊的指令（DELEGATECAL)，这会将调用时的上下文信息传入到library中，就好像代码在合约自身中执行一样。 “库可以被看作是使用它的合约中的一个隐式父类”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library C&#123;</span><br><span class=\"line\">  function a() returns(address)&#123;</span><br><span class=\"line\">    return address(this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract A&#123;</span><br><span class=\"line\">  function a() constant returns(address)&#123;</span><br><span class=\"line\">    return C.a();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>using 结构体和方法</li>\n</ul>\n<p>尽管库并没有storage，他们可以使用关联合约的storage。当传递一个库调用，库所进行的修改，将会保存在合约中的storage中。这有点类似于向函数中传递了C语言一样的指针，只有通过这种方式，库才可能是一个已经被部署过的，或已经存在于区块链上了。</p>\n<p>使用using提供的语法糖，可以让这一切实现得简洁和好懂。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library CounterLib &#123;</span><br><span class=\"line\">    struct Counter &#123; uint i; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function incremented(Counter storage self) returns (uint) &#123;</span><br><span class=\"line\">        return ++self.i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract CounterContract &#123;</span><br><span class=\"line\">    using CounterLib for CounterLib.Counter;</span><br><span class=\"line\"></span><br><span class=\"line\">    CounterLib.Counter counter;</span><br><span class=\"line\"></span><br><span class=\"line\">    function increment() returns (uint) &#123;</span><br><span class=\"line\">        return counter.incremented();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>using关键字，在CounterLib数据结构Counter上附着了CounterLib库中定义的方法。CounterLib.Counter的实例在使用时，就好像它自己有了incremented()，调用方法时，会直接把这个实例作为第一个参数传入了函数。</p>\n<ul>\n<li><p>事件和库</p>\n<p>库中不止没有storage，也没有event。但他们类似storage这样，转发事件；<br>如之前所述，一个库可以被认为是被调用合约的隐式的基类。如果在基类合约中触发一个事件，它也会出现在主合约中事件日志中，同样的，库函数也是如此，当合约调用的库函数中的事件触发函数时，日志事件也会出现在合约的日志中。</p>\n<p>当前的问题是，合约的ABI定义不能反映库中可能会触发的事件。这将导致客户端如web3，不知道如何解析事件，以及不知道如何解析参数。</p>\n<p>这里有一个缓解的办法，是在合约和库中都定义同样的事件，这将让客户端认为合约触发对应的事件（而实际是库函数触发的）。</p>\n<p>下面是一个简单的例子来说明这一切，尽管Emit事件由库触发，通过监听EventEmitterContract.Emit，我们可以监听事件。而相对来说，监听EventEmitterLib.Emit，反而不会得到什么事件。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library EventEmitterLib &#123;</span><br><span class=\"line\">    function emit(string s) &#123;</span><br><span class=\"line\">        Emit(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    event Emit(string s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract EventEmitterContract &#123;</span><br><span class=\"line\">    using EventEmitterLib for string;</span><br><span class=\"line\"></span><br><span class=\"line\">    function emit(string s) &#123;</span><br><span class=\"line\">        s.emit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    event Emit(string s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在Solidity中，与合约有些不同，Library不能处理ether。你可以把它当作一个EVM中的单例，又或者是一个部署一次后不再部署，然后能被做任意其它合约调用的公共代码。</p>\n<p>这带来的一个显然好处是节省大量的gas（当然也可以减少重复代码对区块链带来的污染），因为代码不用一而再，再而三的部署，不同的合约可以依赖于同一个已部署的合约。</p>\n<p>库是一个特殊的合约，不允许payable的函数，不允许fallback函数（这些限制是在编译期间强制执行的，由此我们不能使用库来操作ether）。库通过关键字library定义，如library C{}，与合约定义类似contract A{}。</p>\n<p>调用库函数时，将使用一个特殊的指令（DELEGATECAL)，这会将调用时的上下文信息传入到library中，就好像代码在合约自身中执行一样。 “库可以被看作是使用它的合约中的一个隐式父类”</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library C&#123;</span><br><span class=\"line\">  function a() returns(address)&#123;</span><br><span class=\"line\">    return address(this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract A&#123;</span><br><span class=\"line\">  function a() constant returns(address)&#123;</span><br><span class=\"line\">    return C.a();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>using 结构体和方法</li>\n</ul>\n<p>尽管库并没有storage，他们可以使用关联合约的storage。当传递一个库调用，库所进行的修改，将会保存在合约中的storage中。这有点类似于向函数中传递了C语言一样的指针，只有通过这种方式，库才可能是一个已经被部署过的，或已经存在于区块链上了。</p>\n<p>使用using提供的语法糖，可以让这一切实现得简洁和好懂。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library CounterLib &#123;</span><br><span class=\"line\">    struct Counter &#123; uint i; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function incremented(Counter storage self) returns (uint) &#123;</span><br><span class=\"line\">        return ++self.i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract CounterContract &#123;</span><br><span class=\"line\">    using CounterLib for CounterLib.Counter;</span><br><span class=\"line\"></span><br><span class=\"line\">    CounterLib.Counter counter;</span><br><span class=\"line\"></span><br><span class=\"line\">    function increment() returns (uint) &#123;</span><br><span class=\"line\">        return counter.incremented();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>using关键字，在CounterLib数据结构Counter上附着了CounterLib库中定义的方法。CounterLib.Counter的实例在使用时，就好像它自己有了incremented()，调用方法时，会直接把这个实例作为第一个参数传入了函数。</p>\n<ul>\n<li><p>事件和库</p>\n<p>库中不止没有storage，也没有event。但他们类似storage这样，转发事件；<br>如之前所述，一个库可以被认为是被调用合约的隐式的基类。如果在基类合约中触发一个事件，它也会出现在主合约中事件日志中，同样的，库函数也是如此，当合约调用的库函数中的事件触发函数时，日志事件也会出现在合约的日志中。</p>\n<p>当前的问题是，合约的ABI定义不能反映库中可能会触发的事件。这将导致客户端如web3，不知道如何解析事件，以及不知道如何解析参数。</p>\n<p>这里有一个缓解的办法，是在合约和库中都定义同样的事件，这将让客户端认为合约触发对应的事件（而实际是库函数触发的）。</p>\n<p>下面是一个简单的例子来说明这一切，尽管Emit事件由库触发，通过监听EventEmitterContract.Emit，我们可以监听事件。而相对来说，监听EventEmitterLib.Emit，反而不会得到什么事件。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library EventEmitterLib &#123;</span><br><span class=\"line\">    function emit(string s) &#123;</span><br><span class=\"line\">        Emit(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    event Emit(string s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract EventEmitterContract &#123;</span><br><span class=\"line\">    using EventEmitterLib for string;</span><br><span class=\"line\"></span><br><span class=\"line\">    function emit(string s) &#123;</span><br><span class=\"line\">        s.emit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    event Emit(string s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"solidity合约之间的调用","_content":"\n### solidity合约相互调用\n\n```javascript\npragma solidity ^0.4.18;\n\ncontract Deployed{\n    function setA(uint) public returns (uint) {}\n    function a() public pure returns(uint) {}\n}\n\ncontract Existing{\n    Deployed dc;\n    function Existing(address _t) public{\n        dc = Deployed(_t);\n    }\n\n    function getA() public view returns(uint result){\n        return dc.a();\n    }\n\n    function setA(uint _val) public returns(uint result){\n        dc.setA(_val);\n        return _val;\n    }\n}\n\n/**\n* We do not need the full implementation of the “Deployed” contract\n* but rather just the function signatures as required by the ABI.\n* Since we have the address of the \"Deployed\" contract,\n* we could initialised the “Existing” contract with  the address\n* and interact with the \"Deployed\" contract using the existing setA and getA functions accordingly\n* 简单的说：没有被调用合约的地址，我们无法初始化生成该合约(无法执行构造函数)\n*/\n\n//或者这样，也是可以的\n\ncontract ExistingWithoutABI{\n    address dc;\n    function ExistingWithoutABI(address _t) public{\n        dc = _t;\n    }\n\n    /*\n    * 因为调用(delegatecall)方法只是将值传递给合约的地址，不会获得任何返回值\n    * 我们不知道调用是否成功了,除非我们调用底层的合约\n    */\nfunction setA_Signature(uint _val) public returns(bool success){\n    //固定格式进行调用, 参数传递\n    require(dc.call(bytes4(keccak256(\"setA(uint256)\")), _val));\n    return true;\n}\n}\n\n/*\n*  那我们有没有办法来获取函数的返回值呢，很不幸;\n*  我们需要使用solidity汇编才能做到这一点\n*/\n\ncontract ExistingWithOutABIRt{\naddress dc;\nfunction ExistingWithOutABIRt(address _t) public{\n    dc = _t;\n}\n\nfunction setA_ASM(uint _val) public returns(uint answer){\n   bytes4 sig = bytes4(keccak256(\"setA(uint256)\"));\n\n   //汇编代码\n   assembly{\n        // move pointer to free memory spot\n        // 可用内存为64个字节；也就是(0x40)\n        // 移动内存指针到这里\n        let ptr := mload(0x40)\n        // put function sig at memory spot\n        // 将函数签名载入到这里\n        mstore(ptr,sig)\n        // append argument after function sig\n        mstore(add(ptr,0x04), _val)\n\n        // 函数签名为4字节(0x04), 参数是32字节(0x20)\n        // 所以总共为36字节(0x24)\n        //输出为32字节(0x20)\n        let result := call(\n          15000, // gas limit\n          sload(dc_slot),  // to addr. append var to _slot to access storage variable\n          0, // not transfer any ether\n          ptr, // Inputs are stored at location ptr\n          0x24, // Inputs are 36 bytes long\n          ptr,  //Store output over input\n          0x20) //Outputs are 32 bytes long\n\n        //执行失败，则进行回滚操作\n        if eq(result, 0) {\n            revert(0, 0)\n        }\n\n        // 赋值返回给answer\n        answer := mload(ptr) // Assign output to answer var\n        mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n   }\n}\n}\n```\n","source":"_posts/solidity_inter_call.md","raw":"---\n  title: solidity合约之间的调用\n---\n\n### solidity合约相互调用\n\n```javascript\npragma solidity ^0.4.18;\n\ncontract Deployed{\n    function setA(uint) public returns (uint) {}\n    function a() public pure returns(uint) {}\n}\n\ncontract Existing{\n    Deployed dc;\n    function Existing(address _t) public{\n        dc = Deployed(_t);\n    }\n\n    function getA() public view returns(uint result){\n        return dc.a();\n    }\n\n    function setA(uint _val) public returns(uint result){\n        dc.setA(_val);\n        return _val;\n    }\n}\n\n/**\n* We do not need the full implementation of the “Deployed” contract\n* but rather just the function signatures as required by the ABI.\n* Since we have the address of the \"Deployed\" contract,\n* we could initialised the “Existing” contract with  the address\n* and interact with the \"Deployed\" contract using the existing setA and getA functions accordingly\n* 简单的说：没有被调用合约的地址，我们无法初始化生成该合约(无法执行构造函数)\n*/\n\n//或者这样，也是可以的\n\ncontract ExistingWithoutABI{\n    address dc;\n    function ExistingWithoutABI(address _t) public{\n        dc = _t;\n    }\n\n    /*\n    * 因为调用(delegatecall)方法只是将值传递给合约的地址，不会获得任何返回值\n    * 我们不知道调用是否成功了,除非我们调用底层的合约\n    */\nfunction setA_Signature(uint _val) public returns(bool success){\n    //固定格式进行调用, 参数传递\n    require(dc.call(bytes4(keccak256(\"setA(uint256)\")), _val));\n    return true;\n}\n}\n\n/*\n*  那我们有没有办法来获取函数的返回值呢，很不幸;\n*  我们需要使用solidity汇编才能做到这一点\n*/\n\ncontract ExistingWithOutABIRt{\naddress dc;\nfunction ExistingWithOutABIRt(address _t) public{\n    dc = _t;\n}\n\nfunction setA_ASM(uint _val) public returns(uint answer){\n   bytes4 sig = bytes4(keccak256(\"setA(uint256)\"));\n\n   //汇编代码\n   assembly{\n        // move pointer to free memory spot\n        // 可用内存为64个字节；也就是(0x40)\n        // 移动内存指针到这里\n        let ptr := mload(0x40)\n        // put function sig at memory spot\n        // 将函数签名载入到这里\n        mstore(ptr,sig)\n        // append argument after function sig\n        mstore(add(ptr,0x04), _val)\n\n        // 函数签名为4字节(0x04), 参数是32字节(0x20)\n        // 所以总共为36字节(0x24)\n        //输出为32字节(0x20)\n        let result := call(\n          15000, // gas limit\n          sload(dc_slot),  // to addr. append var to _slot to access storage variable\n          0, // not transfer any ether\n          ptr, // Inputs are stored at location ptr\n          0x24, // Inputs are 36 bytes long\n          ptr,  //Store output over input\n          0x20) //Outputs are 32 bytes long\n\n        //执行失败，则进行回滚操作\n        if eq(result, 0) {\n            revert(0, 0)\n        }\n\n        // 赋值返回给answer\n        answer := mload(ptr) // Assign output to answer var\n        mstore(0x40,add(ptr,0x24)) // Set storage pointer to new space\n   }\n}\n}\n```\n","slug":"solidity_inter_call","published":1,"date":"2018-07-17T07:59:37.775Z","updated":"2018-07-17T07:59:37.774Z","_id":"cjjpeohq0000375hahauxo32r","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"solidity合约相互调用\"><a href=\"#solidity合约相互调用\" class=\"headerlink\" title=\"solidity合约相互调用\"></a>solidity合约相互调用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.4</span><span class=\"number\">.18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Deployed&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setA</span>(<span class=\"params\">uint</span>) <span class=\"title\">public</span> <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) <span class=\"title\">public</span> <span class=\"title\">pure</span> <span class=\"title\">returns</span>(<span class=\"params\">uint</span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Existing&#123;</span><br><span class=\"line\">    Deployed dc;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Existing</span>(<span class=\"params\">address _t</span>) <span class=\"title\">public</span></span>&#123;</span><br><span class=\"line\">        dc = Deployed(_t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getA</span>(<span class=\"params\"></span>) <span class=\"title\">public</span> <span class=\"title\">view</span> <span class=\"title\">returns</span>(<span class=\"params\">uint result</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dc.a();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setA</span>(<span class=\"params\">uint _val</span>) <span class=\"title\">public</span> <span class=\"title\">returns</span>(<span class=\"params\">uint result</span>)</span>&#123;</span><br><span class=\"line\">        dc.setA(_val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* We do not need the full implementation of the “Deployed” contract</span></span><br><span class=\"line\"><span class=\"comment\">* but rather just the function signatures as required by the ABI.</span></span><br><span class=\"line\"><span class=\"comment\">* Since we have the address of the \"Deployed\" contract,</span></span><br><span class=\"line\"><span class=\"comment\">* we could initialised the “Existing” contract with  the address</span></span><br><span class=\"line\"><span class=\"comment\">* and interact with the \"Deployed\" contract using the existing setA and getA functions accordingly</span></span><br><span class=\"line\"><span class=\"comment\">* 简单的说：没有被调用合约的地址，我们无法初始化生成该合约(无法执行构造函数)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者这样，也是可以的</span></span><br><span class=\"line\"></span><br><span class=\"line\">contract ExistingWithoutABI&#123;</span><br><span class=\"line\">    address dc;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ExistingWithoutABI</span>(<span class=\"params\">address _t</span>) <span class=\"title\">public</span></span>&#123;</span><br><span class=\"line\">        dc = _t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * 因为调用(delegatecall)方法只是将值传递给合约的地址，不会获得任何返回值</span></span><br><span class=\"line\"><span class=\"comment\">    * 我们不知道调用是否成功了,除非我们调用底层的合约</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setA_Signature</span>(<span class=\"params\">uint _val</span>) <span class=\"title\">public</span> <span class=\"title\">returns</span>(<span class=\"params\">bool success</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//固定格式进行调用, 参数传递</span></span><br><span class=\"line\">    <span class=\"built_in\">require</span>(dc.call(bytes4(keccak256(<span class=\"string\">\"setA(uint256)\"</span>)), _val));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*  那我们有没有办法来获取函数的返回值呢，很不幸;</span></span><br><span class=\"line\"><span class=\"comment\">*  我们需要使用solidity汇编才能做到这一点</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">contract ExistingWithOutABIRt&#123;</span><br><span class=\"line\">address dc;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ExistingWithOutABIRt</span>(<span class=\"params\">address _t</span>) <span class=\"title\">public</span></span>&#123;</span><br><span class=\"line\">    dc = _t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setA_ASM</span>(<span class=\"params\">uint _val</span>) <span class=\"title\">public</span> <span class=\"title\">returns</span>(<span class=\"params\">uint answer</span>)</span>&#123;</span><br><span class=\"line\">   bytes4 sig = bytes4(keccak256(<span class=\"string\">\"setA(uint256)\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//汇编代码</span></span><br><span class=\"line\">   assembly&#123;</span><br><span class=\"line\">        <span class=\"comment\">// move pointer to free memory spot</span></span><br><span class=\"line\">        <span class=\"comment\">// 可用内存为64个字节；也就是(0x40)</span></span><br><span class=\"line\">        <span class=\"comment\">// 移动内存指针到这里</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> ptr := mload(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">        <span class=\"comment\">// put function sig at memory spot</span></span><br><span class=\"line\">        <span class=\"comment\">// 将函数签名载入到这里</span></span><br><span class=\"line\">        mstore(ptr,sig)</span><br><span class=\"line\">        <span class=\"comment\">// append argument after function sig</span></span><br><span class=\"line\">        mstore(add(ptr,<span class=\"number\">0x04</span>), _val)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 函数签名为4字节(0x04), 参数是32字节(0x20)</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以总共为36字节(0x24)</span></span><br><span class=\"line\">        <span class=\"comment\">//输出为32字节(0x20)</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> result := call(</span><br><span class=\"line\">          <span class=\"number\">15000</span>, <span class=\"comment\">// gas limit</span></span><br><span class=\"line\">          sload(dc_slot),  <span class=\"comment\">// to addr. append var to _slot to access storage variable</span></span><br><span class=\"line\">          <span class=\"number\">0</span>, <span class=\"comment\">// not transfer any ether</span></span><br><span class=\"line\">          ptr, <span class=\"comment\">// Inputs are stored at location ptr</span></span><br><span class=\"line\">          <span class=\"number\">0x24</span>, <span class=\"comment\">// Inputs are 36 bytes long</span></span><br><span class=\"line\">          ptr,  <span class=\"comment\">//Store output over input</span></span><br><span class=\"line\">          <span class=\"number\">0x20</span>) <span class=\"comment\">//Outputs are 32 bytes long</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//执行失败，则进行回滚操作</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> eq(result, <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            revert(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 赋值返回给answer</span></span><br><span class=\"line\">        answer := mload(ptr) <span class=\"comment\">// Assign output to answer var</span></span><br><span class=\"line\">        mstore(<span class=\"number\">0x40</span>,add(ptr,<span class=\"number\">0x24</span>)) <span class=\"comment\">// Set storage pointer to new space</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"solidity合约相互调用\"><a href=\"#solidity合约相互调用\" class=\"headerlink\" title=\"solidity合约相互调用\"></a>solidity合约相互调用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.4</span><span class=\"number\">.18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Deployed&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setA</span>(<span class=\"params\">uint</span>) <span class=\"title\">public</span> <span class=\"title\">returns</span> (<span class=\"params\">uint</span>) </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) <span class=\"title\">public</span> <span class=\"title\">pure</span> <span class=\"title\">returns</span>(<span class=\"params\">uint</span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Existing&#123;</span><br><span class=\"line\">    Deployed dc;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Existing</span>(<span class=\"params\">address _t</span>) <span class=\"title\">public</span></span>&#123;</span><br><span class=\"line\">        dc = Deployed(_t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getA</span>(<span class=\"params\"></span>) <span class=\"title\">public</span> <span class=\"title\">view</span> <span class=\"title\">returns</span>(<span class=\"params\">uint result</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dc.a();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setA</span>(<span class=\"params\">uint _val</span>) <span class=\"title\">public</span> <span class=\"title\">returns</span>(<span class=\"params\">uint result</span>)</span>&#123;</span><br><span class=\"line\">        dc.setA(_val);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* We do not need the full implementation of the “Deployed” contract</span></span><br><span class=\"line\"><span class=\"comment\">* but rather just the function signatures as required by the ABI.</span></span><br><span class=\"line\"><span class=\"comment\">* Since we have the address of the \"Deployed\" contract,</span></span><br><span class=\"line\"><span class=\"comment\">* we could initialised the “Existing” contract with  the address</span></span><br><span class=\"line\"><span class=\"comment\">* and interact with the \"Deployed\" contract using the existing setA and getA functions accordingly</span></span><br><span class=\"line\"><span class=\"comment\">* 简单的说：没有被调用合约的地址，我们无法初始化生成该合约(无法执行构造函数)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者这样，也是可以的</span></span><br><span class=\"line\"></span><br><span class=\"line\">contract ExistingWithoutABI&#123;</span><br><span class=\"line\">    address dc;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ExistingWithoutABI</span>(<span class=\"params\">address _t</span>) <span class=\"title\">public</span></span>&#123;</span><br><span class=\"line\">        dc = _t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * 因为调用(delegatecall)方法只是将值传递给合约的地址，不会获得任何返回值</span></span><br><span class=\"line\"><span class=\"comment\">    * 我们不知道调用是否成功了,除非我们调用底层的合约</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setA_Signature</span>(<span class=\"params\">uint _val</span>) <span class=\"title\">public</span> <span class=\"title\">returns</span>(<span class=\"params\">bool success</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//固定格式进行调用, 参数传递</span></span><br><span class=\"line\">    <span class=\"built_in\">require</span>(dc.call(bytes4(keccak256(<span class=\"string\">\"setA(uint256)\"</span>)), _val));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*  那我们有没有办法来获取函数的返回值呢，很不幸;</span></span><br><span class=\"line\"><span class=\"comment\">*  我们需要使用solidity汇编才能做到这一点</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">contract ExistingWithOutABIRt&#123;</span><br><span class=\"line\">address dc;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ExistingWithOutABIRt</span>(<span class=\"params\">address _t</span>) <span class=\"title\">public</span></span>&#123;</span><br><span class=\"line\">    dc = _t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setA_ASM</span>(<span class=\"params\">uint _val</span>) <span class=\"title\">public</span> <span class=\"title\">returns</span>(<span class=\"params\">uint answer</span>)</span>&#123;</span><br><span class=\"line\">   bytes4 sig = bytes4(keccak256(<span class=\"string\">\"setA(uint256)\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//汇编代码</span></span><br><span class=\"line\">   assembly&#123;</span><br><span class=\"line\">        <span class=\"comment\">// move pointer to free memory spot</span></span><br><span class=\"line\">        <span class=\"comment\">// 可用内存为64个字节；也就是(0x40)</span></span><br><span class=\"line\">        <span class=\"comment\">// 移动内存指针到这里</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> ptr := mload(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">        <span class=\"comment\">// put function sig at memory spot</span></span><br><span class=\"line\">        <span class=\"comment\">// 将函数签名载入到这里</span></span><br><span class=\"line\">        mstore(ptr,sig)</span><br><span class=\"line\">        <span class=\"comment\">// append argument after function sig</span></span><br><span class=\"line\">        mstore(add(ptr,<span class=\"number\">0x04</span>), _val)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 函数签名为4字节(0x04), 参数是32字节(0x20)</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以总共为36字节(0x24)</span></span><br><span class=\"line\">        <span class=\"comment\">//输出为32字节(0x20)</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> result := call(</span><br><span class=\"line\">          <span class=\"number\">15000</span>, <span class=\"comment\">// gas limit</span></span><br><span class=\"line\">          sload(dc_slot),  <span class=\"comment\">// to addr. append var to _slot to access storage variable</span></span><br><span class=\"line\">          <span class=\"number\">0</span>, <span class=\"comment\">// not transfer any ether</span></span><br><span class=\"line\">          ptr, <span class=\"comment\">// Inputs are stored at location ptr</span></span><br><span class=\"line\">          <span class=\"number\">0x24</span>, <span class=\"comment\">// Inputs are 36 bytes long</span></span><br><span class=\"line\">          ptr,  <span class=\"comment\">//Store output over input</span></span><br><span class=\"line\">          <span class=\"number\">0x20</span>) <span class=\"comment\">//Outputs are 32 bytes long</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//执行失败，则进行回滚操作</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> eq(result, <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            revert(<span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 赋值返回给answer</span></span><br><span class=\"line\">        answer := mload(ptr) <span class=\"comment\">// Assign output to answer var</span></span><br><span class=\"line\">        mstore(<span class=\"number\">0x40</span>,add(ptr,<span class=\"number\">0x24</span>)) <span class=\"comment\">// Set storage pointer to new space</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}